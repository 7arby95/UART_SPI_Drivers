
GPIO_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000045c0  00004654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800070  00800070  00004664  2**0
                  ALLOC
  3 .stab         00004d7c  00000000  00000000  00004664  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002953  00000000  00000000  000093e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bd33  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000be73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000bfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000dc2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000eb17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f8c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fa24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fcb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001047f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__vector_3>
      10:	0c 94 5e 1c 	jmp	0x38bc	; 0x38bc <__vector_4>
      14:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__vector_5>
      18:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <__vector_6>
      1c:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__vector_7>
      20:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__vector_8>
      24:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__vector_9>
      28:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__vector_10>
      2c:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__vector_11>
      30:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__vector_12>
      34:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__vector_13>
      38:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__vector_14>
      3c:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 22 	jmp	0x454e	; 0x454e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 22 	jmp	0x4586	; 0x4586 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 22 	jmp	0x454e	; 0x454e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 22 	jmp	0x4586	; 0x4586 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b7 22 	jmp	0x456e	; 0x456e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void app_rx(void);

uint8_t flag = 0;

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	sint32_t var = 0;
     b5a:	19 82       	std	Y+1, r1	; 0x01
     b5c:	1a 82       	std	Y+2, r1	; 0x02
     b5e:	1b 82       	std	Y+3, r1	; 0x03
     b60:	1c 82       	std	Y+4, r1	; 0x04
			UART_SENDER_MODE,
			UART_EIGHT_BITS,
			UART_PARITY_DISABLED,
			UART_ONE_STOP_BIT,
			UART_INTERRUPT_DISABLED
	};
     b62:	ce 01       	movw	r24, r28
     b64:	05 96       	adiw	r24, 0x05	; 5
     b66:	9c 87       	std	Y+12, r25	; 0x0c
     b68:	8b 87       	std	Y+11, r24	; 0x0b
     b6a:	e9 e6       	ldi	r30, 0x69	; 105
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	fe 87       	std	Y+14, r31	; 0x0e
     b70:	ed 87       	std	Y+13, r30	; 0x0d
     b72:	f6 e0       	ldi	r31, 0x06	; 6
     b74:	ff 87       	std	Y+15, r31	; 0x0f
     b76:	ed 85       	ldd	r30, Y+13	; 0x0d
     b78:	fe 85       	ldd	r31, Y+14	; 0x0e
     b7a:	00 80       	ld	r0, Z
     b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	9e 87       	std	Y+14, r25	; 0x0e
     b84:	8d 87       	std	Y+13, r24	; 0x0d
     b86:	eb 85       	ldd	r30, Y+11	; 0x0b
     b88:	fc 85       	ldd	r31, Y+12	; 0x0c
     b8a:	00 82       	st	Z, r0
     b8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	9c 87       	std	Y+12, r25	; 0x0c
     b94:	8b 87       	std	Y+11, r24	; 0x0b
     b96:	9f 85       	ldd	r25, Y+15	; 0x0f
     b98:	91 50       	subi	r25, 0x01	; 1
     b9a:	9f 87       	std	Y+15, r25	; 0x0f
     b9c:	ef 85       	ldd	r30, Y+15	; 0x0f
     b9e:	ee 23       	and	r30, r30
     ba0:	51 f7       	brne	.-44     	; 0xb76 <main+0x30>

	softwareDelayMs(200);
     ba2:	68 ec       	ldi	r22, 0xC8	; 200
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <softwareDelayMs>

	UART_init(&configType);
     bae:	ce 01       	movw	r24, r28
     bb0:	05 96       	adiw	r24, 0x05	; 5
     bb2:	0e 94 de 13 	call	0x27bc	; 0x27bc <UART_init>

	while(1)
	{
		softwareDelayMs(1000);
     bb6:	68 ee       	ldi	r22, 0xE8	; 232
     bb8:	73 e0       	ldi	r23, 0x03	; 3
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <softwareDelayMs>
		UART_transmit(var++);
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	29 81       	ldd	r18, Y+1	; 0x01
     bc6:	3a 81       	ldd	r19, Y+2	; 0x02
     bc8:	4b 81       	ldd	r20, Y+3	; 0x03
     bca:	5c 81       	ldd	r21, Y+4	; 0x04
     bcc:	2f 5f       	subi	r18, 0xFF	; 255
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	4f 4f       	sbci	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	29 83       	std	Y+1, r18	; 0x01
     bd6:	3a 83       	std	Y+2, r19	; 0x02
     bd8:	4b 83       	std	Y+3, r20	; 0x03
     bda:	5c 83       	std	Y+4, r21	; 0x04
     bdc:	0e 94 a2 14 	call	0x2944	; 0x2944 <UART_transmit>
     be0:	ea cf       	rjmp	.-44     	; 0xbb6 <main+0x70>

00000be2 <app_tx>:
}

/*- APIs IMPLEMENTATION ------------------------------------*/

void app_tx(void)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62

}
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <app_rx>:

void app_rx(void)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
	flag = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 70 00 	sts	0x0070, r24
}
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <app_spi>:

void app_spi(void)
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62

}
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <GPIO_REQ7>:


void GPIO_REQ7(void)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <GPIO_REQ7+0x6>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <GPIO_REQ7+0x8>
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_countUpCounter = 0;
     c20:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_delayCounter = 0;
     c22:	19 82       	std	Y+1, r1	; 0x01
     c24:	1a 82       	std	Y+2, r1	; 0x02
     c26:	1b 82       	std	Y+3, r1	; 0x03
     c28:	1c 82       	std	Y+4, r1	; 0x04

	sevenSegInit(SEG_0);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <sevenSegInit>
	sevenSegInit(SEG_1);
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <sevenSegInit>
     c36:	52 c0       	rjmp	.+164    	; 0xcdc <GPIO_REQ7+0xca>

	while(1)
	{
		while(u8_countUpCounter <= 99)
		{
			sevenSegEnable(SEG_0);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 46 1a 	call	0x348c	; 0x348c <sevenSegEnable>
			sevenSegWrite(SEG_0, ((u8_countUpCounter / 10) % 10));
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9a e0       	ldi	r25, 0x0A	; 10
     c42:	69 2f       	mov	r22, r25
     c44:	0e 94 4a 22 	call	0x4494	; 0x4494 <__udivmodqi4>
     c48:	9a e0       	ldi	r25, 0x0A	; 10
     c4a:	69 2f       	mov	r22, r25
     c4c:	0e 94 4a 22 	call	0x4494	; 0x4494 <__udivmodqi4>
     c50:	89 2f       	mov	r24, r25
     c52:	98 2f       	mov	r25, r24
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	69 2f       	mov	r22, r25
     c58:	0e 94 9e 1a 	call	0x353c	; 0x353c <sevenSegWrite>
			softwareDelayMs(1);
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <softwareDelayMs>
			sevenSegDisable(SEG_0);
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <sevenSegDisable>

			sevenSegEnable(SEG_1);
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	0e 94 46 1a 	call	0x348c	; 0x348c <sevenSegEnable>
			sevenSegWrite(SEG_1, (u8_countUpCounter % 10));
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	9a e0       	ldi	r25, 0x0A	; 10
     c78:	69 2f       	mov	r22, r25
     c7a:	0e 94 4a 22 	call	0x4494	; 0x4494 <__udivmodqi4>
     c7e:	89 2f       	mov	r24, r25
     c80:	98 2f       	mov	r25, r24
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	69 2f       	mov	r22, r25
     c86:	0e 94 9e 1a 	call	0x353c	; 0x353c <sevenSegWrite>
			softwareDelayMs(1);
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <softwareDelayMs>
			sevenSegDisable(SEG_1);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <sevenSegDisable>

			u32_delayCounter++;
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	ab 81       	ldd	r26, Y+3	; 0x03
     ca2:	bc 81       	ldd	r27, Y+4	; 0x04
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	a1 1d       	adc	r26, r1
     ca8:	b1 1d       	adc	r27, r1
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	ab 83       	std	Y+3, r26	; 0x03
     cb0:	bc 83       	std	Y+4, r27	; 0x04

			if(u32_delayCounter % 469 == 0)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	ab 81       	ldd	r26, Y+3	; 0x03
     cb8:	bc 81       	ldd	r27, Y+4	; 0x04
     cba:	25 ed       	ldi	r18, 0xD5	; 213
     cbc:	31 e0       	ldi	r19, 0x01	; 1
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	bc 01       	movw	r22, r24
     cc4:	cd 01       	movw	r24, r26
     cc6:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__udivmodsi4>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	a1 05       	cpc	r26, r1
     cd2:	b1 05       	cpc	r27, r1
     cd4:	19 f4       	brne	.+6      	; 0xcdc <GPIO_REQ7+0xca>
				u8_countUpCounter++;
     cd6:	8d 81       	ldd	r24, Y+5	; 0x05
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	8d 83       	std	Y+5, r24	; 0x05
	sevenSegInit(SEG_0);
	sevenSegInit(SEG_1);

	while(1)
	{
		while(u8_countUpCounter <= 99)
     cdc:	8d 81       	ldd	r24, Y+5	; 0x05
     cde:	84 36       	cpi	r24, 0x64	; 100
     ce0:	08 f4       	brcc	.+2      	; 0xce4 <GPIO_REQ7+0xd2>
     ce2:	aa cf       	rjmp	.-172    	; 0xc38 <GPIO_REQ7+0x26>
     ce4:	fb cf       	rjmp	.-10     	; 0xcdc <GPIO_REQ7+0xca>

00000ce6 <GPIO_REQ8>:
	}
}


void GPIO_REQ8(void)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <GPIO_REQ8+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_appCounter = 0, u8_delayDivider = 20;
     cf0:	1a 82       	std	Y+2, r1	; 0x02
     cf2:	84 e1       	ldi	r24, 0x14	; 20
     cf4:	89 83       	std	Y+1, r24	; 0x01

	Led_Init(LED_1);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Led_Init>
	pushButtonInit(BTN_1);
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	0e 94 65 19 	call	0x32ca	; 0x32ca <pushButtonInit>

	while(1)
	{
		u8_delayDivider = 20;
     d02:	84 e1       	ldi	r24, 0x14	; 20
     d04:	89 83       	std	Y+1, r24	; 0x01
		if(pushButtonGetStatus(BTN_1) == Pressed)
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	0e 94 93 19 	call	0x3326	; 0x3326 <pushButtonGetStatus>
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	c9 f7       	brne	.-14     	; 0xd02 <GPIO_REQ8+0x1c>
		{
			while(pushButtonGetStatus(BTN_1) != Released);
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	0e 94 93 19 	call	0x3326	; 0x3326 <pushButtonGetStatus>
     d16:	88 23       	and	r24, r24
     d18:	d9 f7       	brne	.-10     	; 0xd10 <GPIO_REQ8+0x2a>
			u8_appCounter++;
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	8a 83       	std	Y+2, r24	; 0x02
     d20:	24 c0       	rjmp	.+72     	; 0xd6a <GPIO_REQ8+0x84>
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	0e 94 a0 18 	call	0x3140	; 0x3140 <Led_On>
     d28:	17 c0       	rjmp	.+46     	; 0xd58 <GPIO_REQ8+0x72>
				while(u8_delayDivider > 0)
				{
					softwareDelayMs(49);
     d2a:	61 e3       	ldi	r22, 0x31	; 49
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <softwareDelayMs>
					if(pushButtonGetStatus(BTN_1) == Pressed)
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 93 19 	call	0x3326	; 0x3326 <pushButtonGetStatus>
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	49 f4       	brne	.+18     	; 0xd52 <GPIO_REQ8+0x6c>
					{
						softwareDelayMs(300);
     d40:	6c e2       	ldi	r22, 0x2C	; 44
     d42:	71 e0       	ldi	r23, 0x01	; 1
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <softwareDelayMs>
						u8_delayDivider += 14;
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	82 5f       	subi	r24, 0xF2	; 242
     d50:	89 83       	std	Y+1, r24	; 0x01
					}
					u8_delayDivider--;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	81 50       	subi	r24, 0x01	; 1
     d56:	89 83       	std	Y+1, r24	; 0x01
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
				while(u8_delayDivider > 0)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	88 23       	and	r24, r24
     d5c:	31 f7       	brne	.-52     	; 0xd2a <GPIO_REQ8+0x44>
						softwareDelayMs(300);
						u8_delayDivider += 14;
					}
					u8_delayDivider--;
				}
				Led_Off(LED_1);
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <Led_Off>
				u8_appCounter--;
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	81 50       	subi	r24, 0x01	; 1
     d68:	8a 83       	std	Y+2, r24	; 0x02
		u8_delayDivider = 20;
		if(pushButtonGetStatus(BTN_1) == Pressed)
		{
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	88 23       	and	r24, r24
     d6e:	c9 f6       	brne	.-78     	; 0xd22 <GPIO_REQ8+0x3c>
				Led_Off(LED_1);
				u8_appCounter--;
			}
			break;
		}
	}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <GPIO_REQ9>:
}



void GPIO_REQ9(void)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <GPIO_REQ9+0x6>
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentState = GO;
     d86:	19 82       	std	Y+1, r1	; 0x01

	Led_Init(LED_1);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Led_Init>
	Led_Init(LED_2);
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Led_Init>
	Led_Init(LED_3);
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Led_Init>

	while(1)
	{
		switch(u8_currentState)
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	3b 83       	std	Y+3, r19	; 0x03
     da2:	2a 83       	std	Y+2, r18	; 0x02
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	9b 81       	ldd	r25, Y+3	; 0x03
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	91 05       	cpc	r25, r1
     dac:	a9 f0       	breq	.+42     	; 0xdd8 <GPIO_REQ9+0x5e>
     dae:	2a 81       	ldd	r18, Y+2	; 0x02
     db0:	3b 81       	ldd	r19, Y+3	; 0x03
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	e1 f0       	breq	.+56     	; 0xdf0 <GPIO_REQ9+0x76>
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	11 f5       	brne	.+68     	; 0xe04 <GPIO_REQ9+0x8a>
		{
		case GO:
			Led_On(LED_1);
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	0e 94 a0 18 	call	0x3140	; 0x3140 <Led_On>
			Led_Off(LED_2);
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <Led_Off>
			Led_Off(LED_3);
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <Led_Off>
			u8_currentState = STOP1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	16 c0       	rjmp	.+44     	; 0xe04 <GPIO_REQ9+0x8a>
			break;
		case STOP1:
			Led_Off(LED_1);
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <Led_Off>
			Led_On(LED_2);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	0e 94 a0 18 	call	0x3140	; 0x3140 <Led_On>
			Led_Off(LED_3);
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <Led_Off>
			u8_currentState = GET_READY;
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	0a c0       	rjmp	.+20     	; 0xe04 <GPIO_REQ9+0x8a>
			break;
		case GET_READY:
			Led_Off(LED_1);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <Led_Off>
			Led_Off(LED_2);
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <Led_Off>
			Led_On(LED_3);
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	0e 94 a0 18 	call	0x3140	; 0x3140 <Led_On>
			u8_currentState = GO;
     e02:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		softwareDelayMs(1000);
     e04:	68 ee       	ldi	r22, 0xE8	; 232
     e06:	73 e0       	ldi	r23, 0x03	; 3
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <softwareDelayMs>
     e10:	c4 cf       	rjmp	.-120    	; 0xd9a <GPIO_REQ9+0x20>

00000e12 <HwPWMInit>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void HwPWMInit(void)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
	/* set OC1A and OC1B pins as output pins */
	gpioPinDirection(GPIOD, (BIT4 | BIT5), OUTPUT);
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	60 e3       	ldi	r22, 0x30	; 48
     e1e:	4f ef       	ldi	r20, 0xFF	; 255
     e20:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>

	/* PWM mode */
	CLEAR_BIT(TCCR1A, FOC1B);
     e24:	af e4       	ldi	r26, 0x4F	; 79
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ef e4       	ldi	r30, 0x4F	; 79
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8b 7f       	andi	r24, 0xFB	; 251
     e30:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, FOC1A);
     e32:	af e4       	ldi	r26, 0x4F	; 79
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ef e4       	ldi	r30, 0x4F	; 79
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	87 7f       	andi	r24, 0xF7	; 247
     e3e:	8c 93       	st	X, r24

	/* fast PWM mode using OCR1A */
	CLEAR_BIT(TCCR1A, WGM10);
     e40:	af e4       	ldi	r26, 0x4F	; 79
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	ef e4       	ldi	r30, 0x4F	; 79
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
     e4e:	af e4       	ldi	r26, 0x4F	; 79
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ef e4       	ldi	r30, 0x4F	; 79
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	82 60       	ori	r24, 0x02	; 2
     e5a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
     e5c:	ae e4       	ldi	r26, 0x4E	; 78
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ee e4       	ldi	r30, 0x4E	; 78
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 60       	ori	r24, 0x08	; 8
     e68:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
     e6a:	ae e4       	ldi	r26, 0x4E	; 78
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ee e4       	ldi	r30, 0x4E	; 78
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 61       	ori	r24, 0x10	; 16
     e76:	8c 93       	st	X, r24

	/* use OCR1A and OCR1B */
	CLEAR_BIT(TCCR1A, COM1A0);
     e78:	af e4       	ldi	r26, 0x4F	; 79
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ef e4       	ldi	r30, 0x4F	; 79
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8f 7b       	andi	r24, 0xBF	; 191
     e84:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
     e86:	af e4       	ldi	r26, 0x4F	; 79
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	ef e4       	ldi	r30, 0x4F	; 79
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B0);
     e94:	af e4       	ldi	r26, 0x4F	; 79
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ef e4       	ldi	r30, 0x4F	; 79
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7e       	andi	r24, 0xEF	; 239
     ea0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1);
     ea2:	af e4       	ldi	r26, 0x4F	; 79
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ef e4       	ldi	r30, 0x4F	; 79
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 62       	ori	r24, 0x20	; 32
     eae:	8c 93       	st	X, r24

	/* clear input capture bits */
	CLEAR_BIT(TCCR1B, ICES1);
     eb0:	ae e4       	ldi	r26, 0x4E	; 78
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ee e4       	ldi	r30, 0x4E	; 78
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7b       	andi	r24, 0xBF	; 191
     ebc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, ICNC1);
     ebe:	ae e4       	ldi	r26, 0x4E	; 78
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ee e4       	ldi	r30, 0x4E	; 78
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8f 77       	andi	r24, 0x7F	; 127
     eca:	8c 93       	st	X, r24

	/* start counting from 0 */
	TCNT1 = 0;
     ecc:	ec e4       	ldi	r30, 0x4C	; 76
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	11 82       	std	Z+1, r1	; 0x01
     ed2:	10 82       	st	Z, r1
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <HwPWMSetDuty>:

void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency)
{
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <HwPWMSetDuty+0xe>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <HwPWMSetDuty+0x10>
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	4a 83       	std	Y+2, r20	; 0x02
     ef4:	5b 83       	std	Y+3, r21	; 0x03
     ef6:	6c 83       	std	Y+4, r22	; 0x04
     ef8:	7d 83       	std	Y+5, r23	; 0x05
	/* if condition to decide the prescaler and the ICR1 register content according to it */
	if(a_u32_frequency >= 245)
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	9b 81       	ldd	r25, Y+3	; 0x03
     efe:	ac 81       	ldd	r26, Y+4	; 0x04
     f00:	bd 81       	ldd	r27, Y+5	; 0x05
     f02:	85 3f       	cpi	r24, 0xF5	; 245
     f04:	91 05       	cpc	r25, r1
     f06:	a1 05       	cpc	r26, r1
     f08:	b1 05       	cpc	r27, r1
     f0a:	d8 f0       	brcs	.+54     	; 0xf42 <HwPWMSetDuty+0x68>
	{
		ICR1 = F_CPU / (1UL * a_u32_frequency);
     f0c:	06 e4       	ldi	r16, 0x46	; 70
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	94 e2       	ldi	r25, 0x24	; 36
     f14:	a4 ef       	ldi	r26, 0xF4	; 244
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	2a 81       	ldd	r18, Y+2	; 0x02
     f1a:	3b 81       	ldd	r19, Y+3	; 0x03
     f1c:	4c 81       	ldd	r20, Y+4	; 0x04
     f1e:	5d 81       	ldd	r21, Y+5	; 0x05
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__udivmodsi4>
     f28:	da 01       	movw	r26, r20
     f2a:	c9 01       	movw	r24, r18
     f2c:	f8 01       	movw	r30, r16
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	80 83       	st	Z, r24

		/* set clock for the timer */
		TCCR1B |= T1_PRESCALER_NO;
     f32:	ae e4       	ldi	r26, 0x4E	; 78
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ee e4       	ldi	r30, 0x4E	; 78
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	8c 93       	st	X, r24
     f40:	31 c0       	rjmp	.+98     	; 0xfa4 <HwPWMSetDuty+0xca>
	}else if(a_u32_frequency >= 31)
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	ac 81       	ldd	r26, Y+4	; 0x04
     f48:	bd 81       	ldd	r27, Y+5	; 0x05
     f4a:	8f 31       	cpi	r24, 0x1F	; 31
     f4c:	91 05       	cpc	r25, r1
     f4e:	a1 05       	cpc	r26, r1
     f50:	b1 05       	cpc	r27, r1
     f52:	40 f1       	brcs	.+80     	; 0xfa4 <HwPWMSetDuty+0xca>
	{
		ICR1 = F_CPU / (8UL * a_u32_frequency);
     f54:	06 e4       	ldi	r16, 0x46	; 70
     f56:	10 e0       	ldi	r17, 0x00	; 0
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	ac 81       	ldd	r26, Y+4	; 0x04
     f5e:	bd 81       	ldd	r27, Y+5	; 0x05
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	aa 1f       	adc	r26, r26
     f66:	bb 1f       	adc	r27, r27
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	aa 1f       	adc	r26, r26
     f76:	bb 1f       	adc	r27, r27
     f78:	9c 01       	movw	r18, r24
     f7a:	ad 01       	movw	r20, r26
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	94 e2       	ldi	r25, 0x24	; 36
     f80:	a4 ef       	ldi	r26, 0xF4	; 244
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__udivmodsi4>
     f8c:	da 01       	movw	r26, r20
     f8e:	c9 01       	movw	r24, r18
     f90:	f8 01       	movw	r30, r16
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24

		/* set clock for the timer */
		TCCR1B |= T1_PRESCALER_8;
     f96:	ae e4       	ldi	r26, 0x4E	; 78
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ee e4       	ldi	r30, 0x4E	; 78
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	82 60       	ori	r24, 0x02	; 2
     fa2:	8c 93       	st	X, r24
	}
	
	/* set the value of OCR1A:B which decides the duty cycle of the motor */
	OCR1A = a_u8_duty * (ICR1 / 100);
     fa4:	0f 2e       	mov	r0, r31
     fa6:	fa e4       	ldi	r31, 0x4A	; 74
     fa8:	ef 2e       	mov	r14, r31
     faa:	ff 24       	eor	r15, r15
     fac:	f0 2d       	mov	r31, r0
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	08 2f       	mov	r16, r24
     fb2:	10 e0       	ldi	r17, 0x00	; 0
     fb4:	e6 e4       	ldi	r30, 0x46	; 70
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	24 e6       	ldi	r18, 0x64	; 100
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	b9 01       	movw	r22, r18
     fc2:	0e 94 56 22 	call	0x44ac	; 0x44ac <__udivmodhi4>
     fc6:	cb 01       	movw	r24, r22
     fc8:	9c 01       	movw	r18, r24
     fca:	02 9f       	mul	r16, r18
     fcc:	c0 01       	movw	r24, r0
     fce:	03 9f       	mul	r16, r19
     fd0:	90 0d       	add	r25, r0
     fd2:	12 9f       	mul	r17, r18
     fd4:	90 0d       	add	r25, r0
     fd6:	11 24       	eor	r1, r1
     fd8:	f7 01       	movw	r30, r14
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	80 83       	st	Z, r24
	OCR1B = a_u8_duty * (ICR1 / 100);
     fde:	0f 2e       	mov	r0, r31
     fe0:	f8 e4       	ldi	r31, 0x48	; 72
     fe2:	ef 2e       	mov	r14, r31
     fe4:	ff 24       	eor	r15, r15
     fe6:	f0 2d       	mov	r31, r0
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	08 2f       	mov	r16, r24
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	e6 e4       	ldi	r30, 0x46	; 70
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	24 e6       	ldi	r18, 0x64	; 100
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	b9 01       	movw	r22, r18
     ffc:	0e 94 56 22 	call	0x44ac	; 0x44ac <__udivmodhi4>
    1000:	cb 01       	movw	r24, r22
    1002:	9c 01       	movw	r18, r24
    1004:	02 9f       	mul	r16, r18
    1006:	c0 01       	movw	r24, r0
    1008:	03 9f       	mul	r16, r19
    100a:	90 0d       	add	r25, r0
    100c:	12 9f       	mul	r17, r18
    100e:	90 0d       	add	r25, r0
    1010:	11 24       	eor	r1, r1
    1012:	f7 01       	movw	r30, r14
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	80 83       	st	Z, r24
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	08 95       	ret

00001030 <LCD_init>:

/*
 * Description : A Function to Initialize the LCD Driver.
 */
void LCD_init(void)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1 << E) | (1 << RS) | (1 << RW);
    1038:	aa e3       	ldi	r26, 0x3A	; 58
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	ea e3       	ldi	r30, 0x3A	; 58
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8e 60       	ori	r24, 0x0E	; 14
    1044:	8c 93       	st	X, r24
#if(DATA_BITS_MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF;
	LCD_sendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE);
#elif(DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT_DIR |= 0xF0;
    1046:	aa e3       	ldi	r26, 0x3A	; 58
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ea e3       	ldi	r30, 0x3A	; 58
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 6f       	ori	r24, 0xF0	; 240
    1052:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT_DIR |= 0x0F;
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE_ACTIVATED);
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	0e 94 39 08 	call	0x1072	; 0x1072 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);
    105a:	88 e2       	ldi	r24, 0x28	; 40
    105c:	0e 94 39 08 	call	0x1072	; 0x1072 <LCD_sendCommand>
#endif
	LCD_sendCommand(CURSOR_OFF);
    1060:	8c e0       	ldi	r24, 0x0C	; 12
    1062:	0e 94 39 08 	call	0x1072	; 0x1072 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 39 08 	call	0x1072	; 0x1072 <LCD_sendCommand>
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <LCD_sendCommand>:

/*
 * Description : A Function to send a Command.
 */
void LCD_sendCommand(uint8_t command)
{
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	c3 56       	subi	r28, 0x63	; 99
    1080:	d0 40       	sbci	r29, 0x00	; 0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	fe 01       	movw	r30, r28
    108e:	ed 59       	subi	r30, 0x9D	; 157
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT, RS);
    1094:	ab e3       	ldi	r26, 0x3B	; 59
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8d 7f       	andi	r24, 0xFD	; 253
    10a0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
    10a2:	ab e3       	ldi	r26, 0x3B	; 59
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e3       	ldi	r30, 0x3B	; 59
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8b 7f       	andi	r24, 0xFB	; 251
    10ae:	8c 93       	st	X, r24
    10b0:	fe 01       	movw	r30, r28
    10b2:	e1 5a       	subi	r30, 0xA1	; 161
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a0 e8       	ldi	r26, 0x80	; 128
    10bc:	bf e3       	ldi	r27, 0x3F	; 63
    10be:	80 83       	st	Z, r24
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	a2 83       	std	Z+2, r26	; 0x02
    10c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c6:	8e 01       	movw	r16, r28
    10c8:	05 5a       	subi	r16, 0xA5	; 165
    10ca:	1f 4f       	sbci	r17, 0xFF	; 255
    10cc:	fe 01       	movw	r30, r28
    10ce:	e1 5a       	subi	r30, 0xA1	; 161
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a e7       	ldi	r20, 0x7A	; 122
    10e0:	55 e4       	ldi	r21, 0x45	; 69
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	f8 01       	movw	r30, r16
    10ec:	80 83       	st	Z, r24
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	a2 83       	std	Z+2, r26	; 0x02
    10f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10f4:	fe 01       	movw	r30, r28
    10f6:	e5 5a       	subi	r30, 0xA5	; 165
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e8       	ldi	r20, 0x80	; 128
    1108:	5f e3       	ldi	r21, 0x3F	; 63
    110a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110e:	88 23       	and	r24, r24
    1110:	44 f4       	brge	.+16     	; 0x1122 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1112:	fe 01       	movw	r30, r28
    1114:	e7 5a       	subi	r30, 0xA7	; 167
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
    1120:	64 c0       	rjmp	.+200    	; 0x11ea <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1122:	fe 01       	movw	r30, r28
    1124:	e5 5a       	subi	r30, 0xA5	; 165
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	0c f0       	brlt	.+2      	; 0x1142 <LCD_sendCommand+0xd0>
    1140:	43 c0       	rjmp	.+134    	; 0x11c8 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1142:	fe 01       	movw	r30, r28
    1144:	e1 5a       	subi	r30, 0xA1	; 161
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	8e 01       	movw	r16, r28
    1162:	07 5a       	subi	r16, 0xA7	; 167
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	f8 01       	movw	r30, r16
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	80 83       	st	Z, r24
    1178:	1f c0       	rjmp	.+62     	; 0x11b8 <LCD_sendCommand+0x146>
    117a:	fe 01       	movw	r30, r28
    117c:	e9 5a       	subi	r30, 0xA9	; 169
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	80 e9       	ldi	r24, 0x90	; 144
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1188:	fe 01       	movw	r30, r28
    118a:	e9 5a       	subi	r30, 0xA9	; 169
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <LCD_sendCommand+0x120>
    1196:	fe 01       	movw	r30, r28
    1198:	e9 5a       	subi	r30, 0xA9	; 169
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	de 01       	movw	r26, r28
    11a2:	a7 5a       	subi	r26, 0xA7	; 167
    11a4:	bf 4f       	sbci	r27, 0xFF	; 255
    11a6:	fe 01       	movw	r30, r28
    11a8:	e7 5a       	subi	r30, 0xA7	; 167
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	11 96       	adiw	r26, 0x01	; 1
    11b4:	9c 93       	st	X, r25
    11b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	fe 01       	movw	r30, r28
    11ba:	e7 5a       	subi	r30, 0xA7	; 167
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	d1 f6       	brne	.-76     	; 0x117a <LCD_sendCommand+0x108>
    11c6:	27 c0       	rjmp	.+78     	; 0x1216 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	8e 01       	movw	r16, r28
    11ca:	07 5a       	subi	r16, 0xA7	; 167
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	fe 01       	movw	r30, r28
    11d0:	e5 5a       	subi	r30, 0xA5	; 165
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	f8 01       	movw	r30, r16
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	80 83       	st	Z, r24
    11ea:	de 01       	movw	r26, r28
    11ec:	ab 5a       	subi	r26, 0xAB	; 171
    11ee:	bf 4f       	sbci	r27, 0xFF	; 255
    11f0:	fe 01       	movw	r30, r28
    11f2:	e7 5a       	subi	r30, 0xA7	; 167
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	91 81       	ldd	r25, Z+1	; 0x01
    11fa:	8d 93       	st	X+, r24
    11fc:	9c 93       	st	X, r25
    11fe:	fe 01       	movw	r30, r28
    1200:	eb 5a       	subi	r30, 0xAB	; 171
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <LCD_sendCommand+0x196>
    120c:	fe 01       	movw	r30, r28
    120e:	eb 5a       	subi	r30, 0xAB	; 171
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    1216:	ab e3       	ldi	r26, 0x3B	; 59
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	88 60       	ori	r24, 0x08	; 8
    1222:	8c 93       	st	X, r24
    1224:	fe 01       	movw	r30, r28
    1226:	ef 5a       	subi	r30, 0xAF	; 175
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a0 e8       	ldi	r26, 0x80	; 128
    1230:	bf e3       	ldi	r27, 0x3F	; 63
    1232:	80 83       	st	Z, r24
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	a2 83       	std	Z+2, r26	; 0x02
    1238:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123a:	8e 01       	movw	r16, r28
    123c:	03 5b       	subi	r16, 0xB3	; 179
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	fe 01       	movw	r30, r28
    1242:	ef 5a       	subi	r30, 0xAF	; 175
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4a e7       	ldi	r20, 0x7A	; 122
    1254:	55 e4       	ldi	r21, 0x45	; 69
    1256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	f8 01       	movw	r30, r16
    1260:	80 83       	st	Z, r24
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	a2 83       	std	Z+2, r26	; 0x02
    1266:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1268:	fe 01       	movw	r30, r28
    126a:	e3 5b       	subi	r30, 0xB3	; 179
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e8       	ldi	r20, 0x80	; 128
    127c:	5f e3       	ldi	r21, 0x3F	; 63
    127e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1282:	88 23       	and	r24, r24
    1284:	44 f4       	brge	.+16     	; 0x1296 <LCD_sendCommand+0x224>
		__ticks = 1;
    1286:	fe 01       	movw	r30, r28
    1288:	e5 5b       	subi	r30, 0xB5	; 181
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	91 83       	std	Z+1, r25	; 0x01
    1292:	80 83       	st	Z, r24
    1294:	64 c0       	rjmp	.+200    	; 0x135e <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1296:	fe 01       	movw	r30, r28
    1298:	e3 5b       	subi	r30, 0xB3	; 179
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	60 81       	ld	r22, Z
    129e:	71 81       	ldd	r23, Z+1	; 0x01
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	93 81       	ldd	r25, Z+3	; 0x03
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	4f e7       	ldi	r20, 0x7F	; 127
    12aa:	57 e4       	ldi	r21, 0x47	; 71
    12ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b0:	18 16       	cp	r1, r24
    12b2:	0c f0       	brlt	.+2      	; 0x12b6 <LCD_sendCommand+0x244>
    12b4:	43 c0       	rjmp	.+134    	; 0x133c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b6:	fe 01       	movw	r30, r28
    12b8:	ef 5a       	subi	r30, 0xAF	; 175
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e2       	ldi	r20, 0x20	; 32
    12ca:	51 e4       	ldi	r21, 0x41	; 65
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8e 01       	movw	r16, r28
    12d6:	05 5b       	subi	r16, 0xB5	; 181
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	f8 01       	movw	r30, r16
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	80 83       	st	Z, r24
    12ec:	1f c0       	rjmp	.+62     	; 0x132c <LCD_sendCommand+0x2ba>
    12ee:	fe 01       	movw	r30, r28
    12f0:	e7 5b       	subi	r30, 0xB7	; 183
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	80 e9       	ldi	r24, 0x90	; 144
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	91 83       	std	Z+1, r25	; 0x01
    12fa:	80 83       	st	Z, r24
    12fc:	fe 01       	movw	r30, r28
    12fe:	e7 5b       	subi	r30, 0xB7	; 183
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	80 81       	ld	r24, Z
    1304:	91 81       	ldd	r25, Z+1	; 0x01
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <LCD_sendCommand+0x294>
    130a:	fe 01       	movw	r30, r28
    130c:	e7 5b       	subi	r30, 0xB7	; 183
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1314:	de 01       	movw	r26, r28
    1316:	a5 5b       	subi	r26, 0xB5	; 181
    1318:	bf 4f       	sbci	r27, 0xFF	; 255
    131a:	fe 01       	movw	r30, r28
    131c:	e5 5b       	subi	r30, 0xB5	; 181
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	80 81       	ld	r24, Z
    1322:	91 81       	ldd	r25, Z+1	; 0x01
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	11 96       	adiw	r26, 0x01	; 1
    1328:	9c 93       	st	X, r25
    132a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	fe 01       	movw	r30, r28
    132e:	e5 5b       	subi	r30, 0xB5	; 181
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	d1 f6       	brne	.-76     	; 0x12ee <LCD_sendCommand+0x27c>
    133a:	27 c0       	rjmp	.+78     	; 0x138a <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133c:	8e 01       	movw	r16, r28
    133e:	05 5b       	subi	r16, 0xB5	; 181
    1340:	1f 4f       	sbci	r17, 0xFF	; 255
    1342:	fe 01       	movw	r30, r28
    1344:	e3 5b       	subi	r30, 0xB3	; 179
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	f8 01       	movw	r30, r16
    135a:	91 83       	std	Z+1, r25	; 0x01
    135c:	80 83       	st	Z, r24
    135e:	de 01       	movw	r26, r28
    1360:	a9 5b       	subi	r26, 0xB9	; 185
    1362:	bf 4f       	sbci	r27, 0xFF	; 255
    1364:	fe 01       	movw	r30, r28
    1366:	e5 5b       	subi	r30, 0xB5	; 181
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	8d 93       	st	X+, r24
    1370:	9c 93       	st	X, r25
    1372:	fe 01       	movw	r30, r28
    1374:	e9 5b       	subi	r30, 0xB9	; 185
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <LCD_sendCommand+0x30a>
    1380:	fe 01       	movw	r30, r28
    1382:	e9 5b       	subi	r30, 0xB9	; 185
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
	_delay_ms(1);
#if(DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command;
#elif(DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    138a:	ab e3       	ldi	r26, 0x3B	; 59
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	eb e3       	ldi	r30, 0x3B	; 59
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	98 2f       	mov	r25, r24
    1396:	9f 70       	andi	r25, 0x0F	; 15
    1398:	fe 01       	movw	r30, r28
    139a:	ed 59       	subi	r30, 0x9D	; 157
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	80 7f       	andi	r24, 0xF0	; 240
    13a2:	89 2b       	or	r24, r25
    13a4:	8c 93       	st	X, r24
    13a6:	fe 01       	movw	r30, r28
    13a8:	ed 5b       	subi	r30, 0xBD	; 189
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a0 e8       	ldi	r26, 0x80	; 128
    13b2:	bf e3       	ldi	r27, 0x3F	; 63
    13b4:	80 83       	st	Z, r24
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	a2 83       	std	Z+2, r26	; 0x02
    13ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13bc:	8e 01       	movw	r16, r28
    13be:	01 5c       	subi	r16, 0xC1	; 193
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	fe 01       	movw	r30, r28
    13c4:	ed 5b       	subi	r30, 0xBD	; 189
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	60 81       	ld	r22, Z
    13ca:	71 81       	ldd	r23, Z+1	; 0x01
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a e7       	ldi	r20, 0x7A	; 122
    13d6:	55 e4       	ldi	r21, 0x45	; 69
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	f8 01       	movw	r30, r16
    13e2:	80 83       	st	Z, r24
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a2 83       	std	Z+2, r26	; 0x02
    13e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ea:	fe 01       	movw	r30, r28
    13ec:	ff 96       	adiw	r30, 0x3f	; 63
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e8       	ldi	r20, 0x80	; 128
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1402:	88 23       	and	r24, r24
    1404:	2c f4       	brge	.+10     	; 0x1410 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9e af       	std	Y+62, r25	; 0x3e
    140c:	8d af       	std	Y+61, r24	; 0x3d
    140e:	46 c0       	rjmp	.+140    	; 0x149c <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1410:	fe 01       	movw	r30, r28
    1412:	ff 96       	adiw	r30, 0x3f	; 63
    1414:	60 81       	ld	r22, Z
    1416:	71 81       	ldd	r23, Z+1	; 0x01
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	64 f5       	brge	.+88     	; 0x1484 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	fe 01       	movw	r30, r28
    142e:	ed 5b       	subi	r30, 0xBD	; 189
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	60 81       	ld	r22, Z
    1434:	71 81       	ldd	r23, Z+1	; 0x01
    1436:	82 81       	ldd	r24, Z+2	; 0x02
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9e af       	std	Y+62, r25	; 0x3e
    1458:	8d af       	std	Y+61, r24	; 0x3d
    145a:	0f c0       	rjmp	.+30     	; 0x147a <LCD_sendCommand+0x408>
    145c:	80 e9       	ldi	r24, 0x90	; 144
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	9c af       	std	Y+60, r25	; 0x3c
    1462:	8b af       	std	Y+59, r24	; 0x3b
    1464:	8b ad       	ldd	r24, Y+59	; 0x3b
    1466:	9c ad       	ldd	r25, Y+60	; 0x3c
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <LCD_sendCommand+0x3f6>
    146c:	9c af       	std	Y+60, r25	; 0x3c
    146e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1470:	8d ad       	ldd	r24, Y+61	; 0x3d
    1472:	9e ad       	ldd	r25, Y+62	; 0x3e
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	9e af       	std	Y+62, r25	; 0x3e
    1478:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	8d ad       	ldd	r24, Y+61	; 0x3d
    147c:	9e ad       	ldd	r25, Y+62	; 0x3e
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	69 f7       	brne	.-38     	; 0x145c <LCD_sendCommand+0x3ea>
    1482:	16 c0       	rjmp	.+44     	; 0x14b0 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1484:	fe 01       	movw	r30, r28
    1486:	ff 96       	adiw	r30, 0x3f	; 63
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	93 81       	ldd	r25, Z+3	; 0x03
    1490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9e af       	std	Y+62, r25	; 0x3e
    149a:	8d af       	std	Y+61, r24	; 0x3d
    149c:	8d ad       	ldd	r24, Y+61	; 0x3d
    149e:	9e ad       	ldd	r25, Y+62	; 0x3e
    14a0:	9a af       	std	Y+58, r25	; 0x3a
    14a2:	89 af       	std	Y+57, r24	; 0x39
    14a4:	89 ad       	ldd	r24, Y+57	; 0x39
    14a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <LCD_sendCommand+0x436>
    14ac:	9a af       	std	Y+58, r25	; 0x3a
    14ae:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    14b0:	ab e3       	ldi	r26, 0x3B	; 59
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	eb e3       	ldi	r30, 0x3B	; 59
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	87 7f       	andi	r24, 0xF7	; 247
    14bc:	8c 93       	st	X, r24
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a0 e8       	ldi	r26, 0x80	; 128
    14c4:	bf e3       	ldi	r27, 0x3F	; 63
    14c6:	8d ab       	std	Y+53, r24	; 0x35
    14c8:	9e ab       	std	Y+54, r25	; 0x36
    14ca:	af ab       	std	Y+55, r26	; 0x37
    14cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ce:	6d a9       	ldd	r22, Y+53	; 0x35
    14d0:	7e a9       	ldd	r23, Y+54	; 0x36
    14d2:	8f a9       	ldd	r24, Y+55	; 0x37
    14d4:	98 ad       	ldd	r25, Y+56	; 0x38
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	4a e7       	ldi	r20, 0x7A	; 122
    14dc:	55 e4       	ldi	r21, 0x45	; 69
    14de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	89 ab       	std	Y+49, r24	; 0x31
    14e8:	9a ab       	std	Y+50, r25	; 0x32
    14ea:	ab ab       	std	Y+51, r26	; 0x33
    14ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14ee:	69 a9       	ldd	r22, Y+49	; 0x31
    14f0:	7a a9       	ldd	r23, Y+50	; 0x32
    14f2:	8b a9       	ldd	r24, Y+51	; 0x33
    14f4:	9c a9       	ldd	r25, Y+52	; 0x34
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e8       	ldi	r20, 0x80	; 128
    14fc:	5f e3       	ldi	r21, 0x3F	; 63
    14fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1502:	88 23       	and	r24, r24
    1504:	2c f4       	brge	.+10     	; 0x1510 <LCD_sendCommand+0x49e>
		__ticks = 1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	98 ab       	std	Y+48, r25	; 0x30
    150c:	8f a7       	std	Y+47, r24	; 0x2f
    150e:	3f c0       	rjmp	.+126    	; 0x158e <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1510:	69 a9       	ldd	r22, Y+49	; 0x31
    1512:	7a a9       	ldd	r23, Y+50	; 0x32
    1514:	8b a9       	ldd	r24, Y+51	; 0x33
    1516:	9c a9       	ldd	r25, Y+52	; 0x34
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	3f ef       	ldi	r19, 0xFF	; 255
    151c:	4f e7       	ldi	r20, 0x7F	; 127
    151e:	57 e4       	ldi	r21, 0x47	; 71
    1520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1524:	18 16       	cp	r1, r24
    1526:	4c f5       	brge	.+82     	; 0x157a <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1528:	6d a9       	ldd	r22, Y+53	; 0x35
    152a:	7e a9       	ldd	r23, Y+54	; 0x36
    152c:	8f a9       	ldd	r24, Y+55	; 0x37
    152e:	98 ad       	ldd	r25, Y+56	; 0x38
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e2       	ldi	r20, 0x20	; 32
    1536:	51 e4       	ldi	r21, 0x41	; 65
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	98 ab       	std	Y+48, r25	; 0x30
    154e:	8f a7       	std	Y+47, r24	; 0x2f
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <LCD_sendCommand+0x4fe>
    1552:	80 e9       	ldi	r24, 0x90	; 144
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	9e a7       	std	Y+46, r25	; 0x2e
    1558:	8d a7       	std	Y+45, r24	; 0x2d
    155a:	8d a5       	ldd	r24, Y+45	; 0x2d
    155c:	9e a5       	ldd	r25, Y+46	; 0x2e
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <LCD_sendCommand+0x4ec>
    1562:	9e a7       	std	Y+46, r25	; 0x2e
    1564:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1566:	8f a5       	ldd	r24, Y+47	; 0x2f
    1568:	98 a9       	ldd	r25, Y+48	; 0x30
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	98 ab       	std	Y+48, r25	; 0x30
    156e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1570:	8f a5       	ldd	r24, Y+47	; 0x2f
    1572:	98 a9       	ldd	r25, Y+48	; 0x30
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	69 f7       	brne	.-38     	; 0x1552 <LCD_sendCommand+0x4e0>
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157a:	69 a9       	ldd	r22, Y+49	; 0x31
    157c:	7a a9       	ldd	r23, Y+50	; 0x32
    157e:	8b a9       	ldd	r24, Y+51	; 0x33
    1580:	9c a9       	ldd	r25, Y+52	; 0x34
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	98 ab       	std	Y+48, r25	; 0x30
    158c:	8f a7       	std	Y+47, r24	; 0x2f
    158e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1590:	98 a9       	ldd	r25, Y+48	; 0x30
    1592:	9c a7       	std	Y+44, r25	; 0x2c
    1594:	8b a7       	std	Y+43, r24	; 0x2b
    1596:	8b a5       	ldd	r24, Y+43	; 0x2b
    1598:	9c a5       	ldd	r25, Y+44	; 0x2c
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <LCD_sendCommand+0x528>
    159e:	9c a7       	std	Y+44, r25	; 0x2c
    15a0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    15a2:	ab e3       	ldi	r26, 0x3B	; 59
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	88 60       	ori	r24, 0x08	; 8
    15ae:	8c 93       	st	X, r24
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e8       	ldi	r26, 0x80	; 128
    15b6:	bf e3       	ldi	r27, 0x3F	; 63
    15b8:	8f a3       	std	Y+39, r24	; 0x27
    15ba:	98 a7       	std	Y+40, r25	; 0x28
    15bc:	a9 a7       	std	Y+41, r26	; 0x29
    15be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	6f a1       	ldd	r22, Y+39	; 0x27
    15c2:	78 a5       	ldd	r23, Y+40	; 0x28
    15c4:	89 a5       	ldd	r24, Y+41	; 0x29
    15c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	4a e7       	ldi	r20, 0x7A	; 122
    15ce:	55 e4       	ldi	r21, 0x45	; 69
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	8b a3       	std	Y+35, r24	; 0x23
    15da:	9c a3       	std	Y+36, r25	; 0x24
    15dc:	ad a3       	std	Y+37, r26	; 0x25
    15de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15e0:	6b a1       	ldd	r22, Y+35	; 0x23
    15e2:	7c a1       	ldd	r23, Y+36	; 0x24
    15e4:	8d a1       	ldd	r24, Y+37	; 0x25
    15e6:	9e a1       	ldd	r25, Y+38	; 0x26
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e8       	ldi	r20, 0x80	; 128
    15ee:	5f e3       	ldi	r21, 0x3F	; 63
    15f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f4:	88 23       	and	r24, r24
    15f6:	2c f4       	brge	.+10     	; 0x1602 <LCD_sendCommand+0x590>
		__ticks = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9a a3       	std	Y+34, r25	; 0x22
    15fe:	89 a3       	std	Y+33, r24	; 0x21
    1600:	3f c0       	rjmp	.+126    	; 0x1680 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1602:	6b a1       	ldd	r22, Y+35	; 0x23
    1604:	7c a1       	ldd	r23, Y+36	; 0x24
    1606:	8d a1       	ldd	r24, Y+37	; 0x25
    1608:	9e a1       	ldd	r25, Y+38	; 0x26
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	3f ef       	ldi	r19, 0xFF	; 255
    160e:	4f e7       	ldi	r20, 0x7F	; 127
    1610:	57 e4       	ldi	r21, 0x47	; 71
    1612:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1616:	18 16       	cp	r1, r24
    1618:	4c f5       	brge	.+82     	; 0x166c <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161a:	6f a1       	ldd	r22, Y+39	; 0x27
    161c:	78 a5       	ldd	r23, Y+40	; 0x28
    161e:	89 a5       	ldd	r24, Y+41	; 0x29
    1620:	9a a5       	ldd	r25, Y+42	; 0x2a
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9a a3       	std	Y+34, r25	; 0x22
    1640:	89 a3       	std	Y+33, r24	; 0x21
    1642:	0f c0       	rjmp	.+30     	; 0x1662 <LCD_sendCommand+0x5f0>
    1644:	80 e9       	ldi	r24, 0x90	; 144
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	98 a3       	std	Y+32, r25	; 0x20
    164a:	8f 8f       	std	Y+31, r24	; 0x1f
    164c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164e:	98 a1       	ldd	r25, Y+32	; 0x20
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <LCD_sendCommand+0x5de>
    1654:	98 a3       	std	Y+32, r25	; 0x20
    1656:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	89 a1       	ldd	r24, Y+33	; 0x21
    165a:	9a a1       	ldd	r25, Y+34	; 0x22
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	9a a3       	std	Y+34, r25	; 0x22
    1660:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1662:	89 a1       	ldd	r24, Y+33	; 0x21
    1664:	9a a1       	ldd	r25, Y+34	; 0x22
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	69 f7       	brne	.-38     	; 0x1644 <LCD_sendCommand+0x5d2>
    166a:	14 c0       	rjmp	.+40     	; 0x1694 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166c:	6b a1       	ldd	r22, Y+35	; 0x23
    166e:	7c a1       	ldd	r23, Y+36	; 0x24
    1670:	8d a1       	ldd	r24, Y+37	; 0x25
    1672:	9e a1       	ldd	r25, Y+38	; 0x26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9a a3       	std	Y+34, r25	; 0x22
    167e:	89 a3       	std	Y+33, r24	; 0x21
    1680:	89 a1       	ldd	r24, Y+33	; 0x21
    1682:	9a a1       	ldd	r25, Y+34	; 0x22
    1684:	9e 8f       	std	Y+30, r25	; 0x1e
    1686:	8d 8f       	std	Y+29, r24	; 0x1d
    1688:	8d 8d       	ldd	r24, Y+29	; 0x1d
    168a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <LCD_sendCommand+0x61a>
    1690:	9e 8f       	std	Y+30, r25	; 0x1e
    1692:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    1694:	ab e3       	ldi	r26, 0x3B	; 59
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	eb e3       	ldi	r30, 0x3B	; 59
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	28 2f       	mov	r18, r24
    16a0:	2f 70       	andi	r18, 0x0F	; 15
    16a2:	fe 01       	movw	r30, r28
    16a4:	ed 59       	subi	r30, 0x9D	; 157
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	82 95       	swap	r24
    16b0:	92 95       	swap	r25
    16b2:	90 7f       	andi	r25, 0xF0	; 240
    16b4:	98 27       	eor	r25, r24
    16b6:	80 7f       	andi	r24, 0xF0	; 240
    16b8:	98 27       	eor	r25, r24
    16ba:	82 2b       	or	r24, r18
    16bc:	8c 93       	st	X, r24
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a0 e8       	ldi	r26, 0x80	; 128
    16c4:	bf e3       	ldi	r27, 0x3F	; 63
    16c6:	89 8f       	std	Y+25, r24	; 0x19
    16c8:	9a 8f       	std	Y+26, r25	; 0x1a
    16ca:	ab 8f       	std	Y+27, r26	; 0x1b
    16cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ce:	69 8d       	ldd	r22, Y+25	; 0x19
    16d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	4a e7       	ldi	r20, 0x7A	; 122
    16dc:	55 e4       	ldi	r21, 0x45	; 69
    16de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	8d 8b       	std	Y+21, r24	; 0x15
    16e8:	9e 8b       	std	Y+22, r25	; 0x16
    16ea:	af 8b       	std	Y+23, r26	; 0x17
    16ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16ee:	6d 89       	ldd	r22, Y+21	; 0x15
    16f0:	7e 89       	ldd	r23, Y+22	; 0x16
    16f2:	8f 89       	ldd	r24, Y+23	; 0x17
    16f4:	98 8d       	ldd	r25, Y+24	; 0x18
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e8       	ldi	r20, 0x80	; 128
    16fc:	5f e3       	ldi	r21, 0x3F	; 63
    16fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1702:	88 23       	and	r24, r24
    1704:	2c f4       	brge	.+10     	; 0x1710 <LCD_sendCommand+0x69e>
		__ticks = 1;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9c 8b       	std	Y+20, r25	; 0x14
    170c:	8b 8b       	std	Y+19, r24	; 0x13
    170e:	3f c0       	rjmp	.+126    	; 0x178e <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1710:	6d 89       	ldd	r22, Y+21	; 0x15
    1712:	7e 89       	ldd	r23, Y+22	; 0x16
    1714:	8f 89       	ldd	r24, Y+23	; 0x17
    1716:	98 8d       	ldd	r25, Y+24	; 0x18
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	3f ef       	ldi	r19, 0xFF	; 255
    171c:	4f e7       	ldi	r20, 0x7F	; 127
    171e:	57 e4       	ldi	r21, 0x47	; 71
    1720:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1724:	18 16       	cp	r1, r24
    1726:	4c f5       	brge	.+82     	; 0x177a <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1728:	69 8d       	ldd	r22, Y+25	; 0x19
    172a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    172c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    172e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e2       	ldi	r20, 0x20	; 32
    1736:	51 e4       	ldi	r21, 0x41	; 65
    1738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9c 8b       	std	Y+20, r25	; 0x14
    174e:	8b 8b       	std	Y+19, r24	; 0x13
    1750:	0f c0       	rjmp	.+30     	; 0x1770 <LCD_sendCommand+0x6fe>
    1752:	80 e9       	ldi	r24, 0x90	; 144
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	9a 8b       	std	Y+18, r25	; 0x12
    1758:	89 8b       	std	Y+17, r24	; 0x11
    175a:	89 89       	ldd	r24, Y+17	; 0x11
    175c:	9a 89       	ldd	r25, Y+18	; 0x12
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_sendCommand+0x6ec>
    1762:	9a 8b       	std	Y+18, r25	; 0x12
    1764:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1766:	8b 89       	ldd	r24, Y+19	; 0x13
    1768:	9c 89       	ldd	r25, Y+20	; 0x14
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	9c 8b       	std	Y+20, r25	; 0x14
    176e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1770:	8b 89       	ldd	r24, Y+19	; 0x13
    1772:	9c 89       	ldd	r25, Y+20	; 0x14
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	69 f7       	brne	.-38     	; 0x1752 <LCD_sendCommand+0x6e0>
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177a:	6d 89       	ldd	r22, Y+21	; 0x15
    177c:	7e 89       	ldd	r23, Y+22	; 0x16
    177e:	8f 89       	ldd	r24, Y+23	; 0x17
    1780:	98 8d       	ldd	r25, Y+24	; 0x18
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9c 8b       	std	Y+20, r25	; 0x14
    178c:	8b 8b       	std	Y+19, r24	; 0x13
    178e:	8b 89       	ldd	r24, Y+19	; 0x13
    1790:	9c 89       	ldd	r25, Y+20	; 0x14
    1792:	98 8b       	std	Y+16, r25	; 0x10
    1794:	8f 87       	std	Y+15, r24	; 0x0f
    1796:	8f 85       	ldd	r24, Y+15	; 0x0f
    1798:	98 89       	ldd	r25, Y+16	; 0x10
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <LCD_sendCommand+0x728>
    179e:	98 8b       	std	Y+16, r25	; 0x10
    17a0:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    17a2:	ab e3       	ldi	r26, 0x3B	; 59
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	eb e3       	ldi	r30, 0x3B	; 59
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	87 7f       	andi	r24, 0xF7	; 247
    17ae:	8c 93       	st	X, r24
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a0 e8       	ldi	r26, 0x80	; 128
    17b6:	bf e3       	ldi	r27, 0x3F	; 63
    17b8:	8b 87       	std	Y+11, r24	; 0x0b
    17ba:	9c 87       	std	Y+12, r25	; 0x0c
    17bc:	ad 87       	std	Y+13, r26	; 0x0d
    17be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4a e7       	ldi	r20, 0x7A	; 122
    17ce:	55 e4       	ldi	r21, 0x45	; 69
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	8f 83       	std	Y+7, r24	; 0x07
    17da:	98 87       	std	Y+8, r25	; 0x08
    17dc:	a9 87       	std	Y+9, r26	; 0x09
    17de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f4:	88 23       	and	r24, r24
    17f6:	2c f4       	brge	.+10     	; 0x1802 <LCD_sendCommand+0x790>
		__ticks = 1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	8d 83       	std	Y+5, r24	; 0x05
    1800:	3f c0       	rjmp	.+126    	; 0x1880 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    180e:	4f e7       	ldi	r20, 0x7F	; 127
    1810:	57 e4       	ldi	r21, 0x47	; 71
    1812:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1816:	18 16       	cp	r1, r24
    1818:	4c f5       	brge	.+82     	; 0x186c <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181a:	6b 85       	ldd	r22, Y+11	; 0x0b
    181c:	7c 85       	ldd	r23, Y+12	; 0x0c
    181e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1820:	9e 85       	ldd	r25, Y+14	; 0x0e
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e2       	ldi	r20, 0x20	; 32
    1828:	51 e4       	ldi	r21, 0x41	; 65
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	0f c0       	rjmp	.+30     	; 0x1862 <LCD_sendCommand+0x7f0>
    1844:	80 e9       	ldi	r24, 0x90	; 144
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_sendCommand+0x7de>
    1854:	9c 83       	std	Y+4, r25	; 0x04
    1856:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	9e 83       	std	Y+6, r25	; 0x06
    1860:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	69 f7       	brne	.-38     	; 0x1844 <LCD_sendCommand+0x7d2>
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186c:	6f 81       	ldd	r22, Y+7	; 0x07
    186e:	78 85       	ldd	r23, Y+8	; 0x08
    1870:	89 85       	ldd	r24, Y+9	; 0x09
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <LCD_sendCommand+0x81a>
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1894:	cd 59       	subi	r28, 0x9D	; 157
    1896:	df 4f       	sbci	r29, 0xFF	; 255
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	08 95       	ret

000018ac <LCD_displayCharacter>:

/*
 * Description : A Function to write data (display character).
 */
void LCD_displayCharacter(uint8_t data)
{
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	c3 56       	subi	r28, 0x63	; 99
    18ba:	d0 40       	sbci	r29, 0x00	; 0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	fe 01       	movw	r30, r28
    18c8:	ed 59       	subi	r30, 0x9D	; 157
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT, RS);
    18ce:	ab e3       	ldi	r26, 0x3B	; 59
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	eb e3       	ldi	r30, 0x3B	; 59
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	82 60       	ori	r24, 0x02	; 2
    18da:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
    18dc:	ab e3       	ldi	r26, 0x3B	; 59
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	eb e3       	ldi	r30, 0x3B	; 59
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8b 7f       	andi	r24, 0xFB	; 251
    18e8:	8c 93       	st	X, r24
    18ea:	fe 01       	movw	r30, r28
    18ec:	e1 5a       	subi	r30, 0xA1	; 161
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	80 83       	st	Z, r24
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	a2 83       	std	Z+2, r26	; 0x02
    18fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	8e 01       	movw	r16, r28
    1902:	05 5a       	subi	r16, 0xA5	; 165
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	e1 5a       	subi	r30, 0xA1	; 161
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a e7       	ldi	r20, 0x7A	; 122
    191a:	55 e4       	ldi	r21, 0x45	; 69
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	80 83       	st	Z, r24
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    192e:	fe 01       	movw	r30, r28
    1930:	e5 5a       	subi	r30, 0xA5	; 165
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	44 f4       	brge	.+16     	; 0x195c <LCD_displayCharacter+0xb0>
		__ticks = 1;
    194c:	fe 01       	movw	r30, r28
    194e:	e7 5a       	subi	r30, 0xA7	; 167
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    195a:	64 c0       	rjmp	.+200    	; 0x1a24 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    195c:	fe 01       	movw	r30, r28
    195e:	e5 5a       	subi	r30, 0xA5	; 165
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	0c f0       	brlt	.+2      	; 0x197c <LCD_displayCharacter+0xd0>
    197a:	43 c0       	rjmp	.+134    	; 0x1a02 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	fe 01       	movw	r30, r28
    197e:	e1 5a       	subi	r30, 0xA1	; 161
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e2       	ldi	r20, 0x20	; 32
    1990:	51 e4       	ldi	r21, 0x41	; 65
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8e 01       	movw	r16, r28
    199c:	07 5a       	subi	r16, 0xA7	; 167
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	f8 01       	movw	r30, r16
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    19b2:	1f c0       	rjmp	.+62     	; 0x19f2 <LCD_displayCharacter+0x146>
    19b4:	fe 01       	movw	r30, r28
    19b6:	e9 5a       	subi	r30, 0xA9	; 169
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 e9       	ldi	r24, 0x90	; 144
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	fe 01       	movw	r30, r28
    19c4:	e9 5a       	subi	r30, 0xA9	; 169
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_displayCharacter+0x120>
    19d0:	fe 01       	movw	r30, r28
    19d2:	e9 5a       	subi	r30, 0xA9	; 169
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	de 01       	movw	r26, r28
    19dc:	a7 5a       	subi	r26, 0xA7	; 167
    19de:	bf 4f       	sbci	r27, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	e7 5a       	subi	r30, 0xA7	; 167
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	9c 93       	st	X, r25
    19f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	fe 01       	movw	r30, r28
    19f4:	e7 5a       	subi	r30, 0xA7	; 167
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	d1 f6       	brne	.-76     	; 0x19b4 <LCD_displayCharacter+0x108>
    1a00:	27 c0       	rjmp	.+78     	; 0x1a50 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	8e 01       	movw	r16, r28
    1a04:	07 5a       	subi	r16, 0xA7	; 167
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e5 5a       	subi	r30, 0xA5	; 165
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	f8 01       	movw	r30, r16
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
    1a24:	de 01       	movw	r26, r28
    1a26:	ab 5a       	subi	r26, 0xAB	; 171
    1a28:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e7 5a       	subi	r30, 0xA7	; 167
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	8d 93       	st	X+, r24
    1a36:	9c 93       	st	X, r25
    1a38:	fe 01       	movw	r30, r28
    1a3a:	eb 5a       	subi	r30, 0xAB	; 171
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_displayCharacter+0x196>
    1a46:	fe 01       	movw	r30, r28
    1a48:	eb 5a       	subi	r30, 0xAB	; 171
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    1a50:	ab e3       	ldi	r26, 0x3B	; 59
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	eb e3       	ldi	r30, 0x3B	; 59
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	88 60       	ori	r24, 0x08	; 8
    1a5c:	8c 93       	st	X, r24
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ef 5a       	subi	r30, 0xAF	; 175
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e8       	ldi	r26, 0x80	; 128
    1a6a:	bf e3       	ldi	r27, 0x3F	; 63
    1a6c:	80 83       	st	Z, r24
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	a2 83       	std	Z+2, r26	; 0x02
    1a72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a74:	8e 01       	movw	r16, r28
    1a76:	03 5b       	subi	r16, 0xB3	; 179
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	ef 5a       	subi	r30, 0xAF	; 175
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	4a e7       	ldi	r20, 0x7A	; 122
    1a8e:	55 e4       	ldi	r21, 0x45	; 69
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	f8 01       	movw	r30, r16
    1a9a:	80 83       	st	Z, r24
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	a2 83       	std	Z+2, r26	; 0x02
    1aa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e3 5b       	subi	r30, 0xB3	; 179
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	44 f4       	brge	.+16     	; 0x1ad0 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e5 5b       	subi	r30, 0xB5	; 181
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
    1ace:	64 c0       	rjmp	.+200    	; 0x1b98 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e3 5b       	subi	r30, 0xB3	; 179
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	3f ef       	ldi	r19, 0xFF	; 255
    1ae2:	4f e7       	ldi	r20, 0x7F	; 127
    1ae4:	57 e4       	ldi	r21, 0x47	; 71
    1ae6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	0c f0       	brlt	.+2      	; 0x1af0 <LCD_displayCharacter+0x244>
    1aee:	43 c0       	rjmp	.+134    	; 0x1b76 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	fe 01       	movw	r30, r28
    1af2:	ef 5a       	subi	r30, 0xAF	; 175
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8e 01       	movw	r16, r28
    1b10:	05 5b       	subi	r16, 0xB5	; 181
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	f8 01       	movw	r30, r16
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	80 83       	st	Z, r24
    1b26:	1f c0       	rjmp	.+62     	; 0x1b66 <LCD_displayCharacter+0x2ba>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e7 5b       	subi	r30, 0xB7	; 183
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 e9       	ldi	r24, 0x90	; 144
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	fe 01       	movw	r30, r28
    1b38:	e7 5b       	subi	r30, 0xB7	; 183
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 81       	ld	r24, Z
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_displayCharacter+0x294>
    1b44:	fe 01       	movw	r30, r28
    1b46:	e7 5b       	subi	r30, 0xB7	; 183
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	de 01       	movw	r26, r28
    1b50:	a5 5b       	subi	r26, 0xB5	; 181
    1b52:	bf 4f       	sbci	r27, 0xFF	; 255
    1b54:	fe 01       	movw	r30, r28
    1b56:	e5 5b       	subi	r30, 0xB5	; 181
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	11 96       	adiw	r26, 0x01	; 1
    1b62:	9c 93       	st	X, r25
    1b64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b66:	fe 01       	movw	r30, r28
    1b68:	e5 5b       	subi	r30, 0xB5	; 181
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	d1 f6       	brne	.-76     	; 0x1b28 <LCD_displayCharacter+0x27c>
    1b74:	27 c0       	rjmp	.+78     	; 0x1bc4 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	8e 01       	movw	r16, r28
    1b78:	05 5b       	subi	r16, 0xB5	; 181
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e3 5b       	subi	r30, 0xB3	; 179
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	f8 01       	movw	r30, r16
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	80 83       	st	Z, r24
    1b98:	de 01       	movw	r26, r28
    1b9a:	a9 5b       	subi	r26, 0xB9	; 185
    1b9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e5 5b       	subi	r30, 0xB5	; 181
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	8d 93       	st	X+, r24
    1baa:	9c 93       	st	X, r25
    1bac:	fe 01       	movw	r30, r28
    1bae:	e9 5b       	subi	r30, 0xB9	; 185
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	91 81       	ldd	r25, Z+1	; 0x01
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <LCD_displayCharacter+0x30a>
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e9 5b       	subi	r30, 0xB9	; 185
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
	_delay_ms(1);
#if(DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data;
#elif(DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    1bc4:	ab e3       	ldi	r26, 0x3B	; 59
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	eb e3       	ldi	r30, 0x3B	; 59
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	98 2f       	mov	r25, r24
    1bd0:	9f 70       	andi	r25, 0x0F	; 15
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ed 59       	subi	r30, 0x9D	; 157
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	80 7f       	andi	r24, 0xF0	; 240
    1bdc:	89 2b       	or	r24, r25
    1bde:	8c 93       	st	X, r24
    1be0:	fe 01       	movw	r30, r28
    1be2:	ed 5b       	subi	r30, 0xBD	; 189
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e8       	ldi	r26, 0x80	; 128
    1bec:	bf e3       	ldi	r27, 0x3F	; 63
    1bee:	80 83       	st	Z, r24
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	a2 83       	std	Z+2, r26	; 0x02
    1bf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf6:	8e 01       	movw	r16, r28
    1bf8:	01 5c       	subi	r16, 0xC1	; 193
    1bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	ed 5b       	subi	r30, 0xBD	; 189
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a e7       	ldi	r20, 0x7A	; 122
    1c10:	55 e4       	ldi	r21, 0x45	; 69
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	80 83       	st	Z, r24
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	a2 83       	std	Z+2, r26	; 0x02
    1c22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c24:	fe 01       	movw	r30, r28
    1c26:	ff 96       	adiw	r30, 0x3f	; 63
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9e af       	std	Y+62, r25	; 0x3e
    1c46:	8d af       	std	Y+61, r24	; 0x3d
    1c48:	46 c0       	rjmp	.+140    	; 0x1cd6 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ff 96       	adiw	r30, 0x3f	; 63
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	3f ef       	ldi	r19, 0xFF	; 255
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	57 e4       	ldi	r21, 0x47	; 71
    1c5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c62:	18 16       	cp	r1, r24
    1c64:	64 f5       	brge	.+88     	; 0x1cbe <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c66:	fe 01       	movw	r30, r28
    1c68:	ed 5b       	subi	r30, 0xBD	; 189
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e2       	ldi	r20, 0x20	; 32
    1c7a:	51 e4       	ldi	r21, 0x41	; 65
    1c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	bc 01       	movw	r22, r24
    1c86:	cd 01       	movw	r24, r26
    1c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	9e af       	std	Y+62, r25	; 0x3e
    1c92:	8d af       	std	Y+61, r24	; 0x3d
    1c94:	0f c0       	rjmp	.+30     	; 0x1cb4 <LCD_displayCharacter+0x408>
    1c96:	80 e9       	ldi	r24, 0x90	; 144
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	9c af       	std	Y+60, r25	; 0x3c
    1c9c:	8b af       	std	Y+59, r24	; 0x3b
    1c9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ca0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_displayCharacter+0x3f6>
    1ca6:	9c af       	std	Y+60, r25	; 0x3c
    1ca8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1caa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	9e af       	std	Y+62, r25	; 0x3e
    1cb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	69 f7       	brne	.-38     	; 0x1c96 <LCD_displayCharacter+0x3ea>
    1cbc:	16 c0       	rjmp	.+44     	; 0x1cea <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ff 96       	adiw	r30, 0x3f	; 63
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9e af       	std	Y+62, r25	; 0x3e
    1cd4:	8d af       	std	Y+61, r24	; 0x3d
    1cd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cda:	9a af       	std	Y+58, r25	; 0x3a
    1cdc:	89 af       	std	Y+57, r24	; 0x39
    1cde:	89 ad       	ldd	r24, Y+57	; 0x39
    1ce0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <LCD_displayCharacter+0x436>
    1ce6:	9a af       	std	Y+58, r25	; 0x3a
    1ce8:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    1cea:	ab e3       	ldi	r26, 0x3B	; 59
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	eb e3       	ldi	r30, 0x3B	; 59
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	87 7f       	andi	r24, 0xF7	; 247
    1cf6:	8c 93       	st	X, r24
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a0 e8       	ldi	r26, 0x80	; 128
    1cfe:	bf e3       	ldi	r27, 0x3F	; 63
    1d00:	8d ab       	std	Y+53, r24	; 0x35
    1d02:	9e ab       	std	Y+54, r25	; 0x36
    1d04:	af ab       	std	Y+55, r26	; 0x37
    1d06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d08:	6d a9       	ldd	r22, Y+53	; 0x35
    1d0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a e7       	ldi	r20, 0x7A	; 122
    1d16:	55 e4       	ldi	r21, 0x45	; 69
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	89 ab       	std	Y+49, r24	; 0x31
    1d22:	9a ab       	std	Y+50, r25	; 0x32
    1d24:	ab ab       	std	Y+51, r26	; 0x33
    1d26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d28:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	2c f4       	brge	.+10     	; 0x1d4a <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	98 ab       	std	Y+48, r25	; 0x30
    1d46:	8f a7       	std	Y+47, r24	; 0x2f
    1d48:	3f c0       	rjmp	.+126    	; 0x1dc8 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d50:	9c a9       	ldd	r25, Y+52	; 0x34
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	57 e4       	ldi	r21, 0x47	; 71
    1d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	4c f5       	brge	.+82     	; 0x1db4 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d62:	6d a9       	ldd	r22, Y+53	; 0x35
    1d64:	7e a9       	ldd	r23, Y+54	; 0x36
    1d66:	8f a9       	ldd	r24, Y+55	; 0x37
    1d68:	98 ad       	ldd	r25, Y+56	; 0x38
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e2       	ldi	r20, 0x20	; 32
    1d70:	51 e4       	ldi	r21, 0x41	; 65
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	98 ab       	std	Y+48, r25	; 0x30
    1d88:	8f a7       	std	Y+47, r24	; 0x2f
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <LCD_displayCharacter+0x4fe>
    1d8c:	80 e9       	ldi	r24, 0x90	; 144
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	9e a7       	std	Y+46, r25	; 0x2e
    1d92:	8d a7       	std	Y+45, r24	; 0x2d
    1d94:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d96:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_displayCharacter+0x4ec>
    1d9c:	9e a7       	std	Y+46, r25	; 0x2e
    1d9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da2:	98 a9       	ldd	r25, Y+48	; 0x30
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	98 ab       	std	Y+48, r25	; 0x30
    1da8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dac:	98 a9       	ldd	r25, Y+48	; 0x30
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	69 f7       	brne	.-38     	; 0x1d8c <LCD_displayCharacter+0x4e0>
    1db2:	14 c0       	rjmp	.+40     	; 0x1ddc <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db4:	69 a9       	ldd	r22, Y+49	; 0x31
    1db6:	7a a9       	ldd	r23, Y+50	; 0x32
    1db8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dba:	9c a9       	ldd	r25, Y+52	; 0x34
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	98 ab       	std	Y+48, r25	; 0x30
    1dc6:	8f a7       	std	Y+47, r24	; 0x2f
    1dc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dca:	98 a9       	ldd	r25, Y+48	; 0x30
    1dcc:	9c a7       	std	Y+44, r25	; 0x2c
    1dce:	8b a7       	std	Y+43, r24	; 0x2b
    1dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_displayCharacter+0x528>
    1dd8:	9c a7       	std	Y+44, r25	; 0x2c
    1dda:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    1ddc:	ab e3       	ldi	r26, 0x3B	; 59
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	eb e3       	ldi	r30, 0x3B	; 59
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	88 60       	ori	r24, 0x08	; 8
    1de8:	8c 93       	st	X, r24
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 e8       	ldi	r26, 0x80	; 128
    1df0:	bf e3       	ldi	r27, 0x3F	; 63
    1df2:	8f a3       	std	Y+39, r24	; 0x27
    1df4:	98 a7       	std	Y+40, r25	; 0x28
    1df6:	a9 a7       	std	Y+41, r26	; 0x29
    1df8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1dfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1e00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a e7       	ldi	r20, 0x7A	; 122
    1e08:	55 e4       	ldi	r21, 0x45	; 69
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	8b a3       	std	Y+35, r24	; 0x23
    1e14:	9c a3       	std	Y+36, r25	; 0x24
    1e16:	ad a3       	std	Y+37, r26	; 0x25
    1e18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e20:	9e a1       	ldd	r25, Y+38	; 0x26
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <LCD_displayCharacter+0x590>
		__ticks = 1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9a a3       	std	Y+34, r25	; 0x22
    1e38:	89 a3       	std	Y+33, r24	; 0x21
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1e3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e40:	8d a1       	ldd	r24, Y+37	; 0x25
    1e42:	9e a1       	ldd	r25, Y+38	; 0x26
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	4c f5       	brge	.+82     	; 0x1ea6 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	6f a1       	ldd	r22, Y+39	; 0x27
    1e56:	78 a5       	ldd	r23, Y+40	; 0x28
    1e58:	89 a5       	ldd	r24, Y+41	; 0x29
    1e5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9a a3       	std	Y+34, r25	; 0x22
    1e7a:	89 a3       	std	Y+33, r24	; 0x21
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <LCD_displayCharacter+0x5f0>
    1e7e:	80 e9       	ldi	r24, 0x90	; 144
    1e80:	91 e0       	ldi	r25, 0x01	; 1
    1e82:	98 a3       	std	Y+32, r25	; 0x20
    1e84:	8f 8f       	std	Y+31, r24	; 0x1f
    1e86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e88:	98 a1       	ldd	r25, Y+32	; 0x20
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_displayCharacter+0x5de>
    1e8e:	98 a3       	std	Y+32, r25	; 0x20
    1e90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	89 a1       	ldd	r24, Y+33	; 0x21
    1e94:	9a a1       	ldd	r25, Y+34	; 0x22
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	9a a3       	std	Y+34, r25	; 0x22
    1e9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <LCD_displayCharacter+0x5d2>
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    1eac:	9e a1       	ldd	r25, Y+38	; 0x26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9a a3       	std	Y+34, r25	; 0x22
    1eb8:	89 a3       	std	Y+33, r24	; 0x21
    1eba:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ebe:	9e 8f       	std	Y+30, r25	; 0x1e
    1ec0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_displayCharacter+0x61a>
    1eca:	9e 8f       	std	Y+30, r25	; 0x1e
    1ecc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1ece:	ab e3       	ldi	r26, 0x3B	; 59
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	eb e3       	ldi	r30, 0x3B	; 59
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	28 2f       	mov	r18, r24
    1eda:	2f 70       	andi	r18, 0x0F	; 15
    1edc:	fe 01       	movw	r30, r28
    1ede:	ed 59       	subi	r30, 0x9D	; 157
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	82 95       	swap	r24
    1eea:	92 95       	swap	r25
    1eec:	90 7f       	andi	r25, 0xF0	; 240
    1eee:	98 27       	eor	r25, r24
    1ef0:	80 7f       	andi	r24, 0xF0	; 240
    1ef2:	98 27       	eor	r25, r24
    1ef4:	82 2b       	or	r24, r18
    1ef6:	8c 93       	st	X, r24
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e8       	ldi	r26, 0x80	; 128
    1efe:	bf e3       	ldi	r27, 0x3F	; 63
    1f00:	89 8f       	std	Y+25, r24	; 0x19
    1f02:	9a 8f       	std	Y+26, r25	; 0x1a
    1f04:	ab 8f       	std	Y+27, r26	; 0x1b
    1f06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a e7       	ldi	r20, 0x7A	; 122
    1f16:	55 e4       	ldi	r21, 0x45	; 69
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8d 8b       	std	Y+21, r24	; 0x15
    1f22:	9e 8b       	std	Y+22, r25	; 0x16
    1f24:	af 8b       	std	Y+23, r26	; 0x17
    1f26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f28:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 8b       	std	Y+20, r25	; 0x14
    1f46:	8b 8b       	std	Y+19, r24	; 0x13
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f50:	98 8d       	ldd	r25, Y+24	; 0x18
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9c 8b       	std	Y+20, r25	; 0x14
    1f88:	8b 8b       	std	Y+19, r24	; 0x13
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <LCD_displayCharacter+0x6fe>
    1f8c:	80 e9       	ldi	r24, 0x90	; 144
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	9a 8b       	std	Y+18, r25	; 0x12
    1f92:	89 8b       	std	Y+17, r24	; 0x11
    1f94:	89 89       	ldd	r24, Y+17	; 0x11
    1f96:	9a 89       	ldd	r25, Y+18	; 0x12
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_displayCharacter+0x6ec>
    1f9c:	9a 8b       	std	Y+18, r25	; 0x12
    1f9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9c 8b       	std	Y+20, r25	; 0x14
    1fa8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8b 89       	ldd	r24, Y+19	; 0x13
    1fac:	9c 89       	ldd	r25, Y+20	; 0x14
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <LCD_displayCharacter+0x6e0>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fba:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9c 8b       	std	Y+20, r25	; 0x14
    1fc6:	8b 8b       	std	Y+19, r24	; 0x13
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	98 8b       	std	Y+16, r25	; 0x10
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
    1fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd2:	98 89       	ldd	r25, Y+16	; 0x10
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_displayCharacter+0x728>
    1fd8:	98 8b       	std	Y+16, r25	; 0x10
    1fda:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    1fdc:	ab e3       	ldi	r26, 0x3B	; 59
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	eb e3       	ldi	r30, 0x3B	; 59
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	87 7f       	andi	r24, 0xF7	; 247
    1fe8:	8c 93       	st	X, r24
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e8       	ldi	r26, 0x80	; 128
    1ff0:	bf e3       	ldi	r27, 0x3F	; 63
    1ff2:	8b 87       	std	Y+11, r24	; 0x0b
    1ff4:	9c 87       	std	Y+12, r25	; 0x0c
    1ff6:	ad 87       	std	Y+13, r26	; 0x0d
    1ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2000:	9e 85       	ldd	r25, Y+14	; 0x0e
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a e7       	ldi	r20, 0x7A	; 122
    2008:	55 e4       	ldi	r21, 0x45	; 69
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8f 83       	std	Y+7, r24	; 0x07
    2014:	98 87       	std	Y+8, r25	; 0x08
    2016:	a9 87       	std	Y+9, r26	; 0x09
    2018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <LCD_displayCharacter+0x790>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    203c:	6f 81       	ldd	r22, Y+7	; 0x07
    203e:	78 85       	ldd	r23, Y+8	; 0x08
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6b 85       	ldd	r22, Y+11	; 0x0b
    2056:	7c 85       	ldd	r23, Y+12	; 0x0c
    2058:	8d 85       	ldd	r24, Y+13	; 0x0d
    205a:	9e 85       	ldd	r25, Y+14	; 0x0e
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	0f c0       	rjmp	.+30     	; 0x209c <LCD_displayCharacter+0x7f0>
    207e:	80 e9       	ldi	r24, 0x90	; 144
    2080:	91 e0       	ldi	r25, 0x01	; 1
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_displayCharacter+0x7de>
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <LCD_displayCharacter+0x7d2>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_displayCharacter+0x81a>
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    20ce:	cd 59       	subi	r28, 0x9D	; 157
    20d0:	df 4f       	sbci	r29, 0xFF	; 255
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	1f 91       	pop	r17
    20e2:	0f 91       	pop	r16
    20e4:	08 95       	ret

000020e6 <LCD_displayString>:

/*
 * Description : A Function to display a string.
 */
void LCD_displayString(const sint8_t* str)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <LCD_displayString+0x6>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	0a c0       	rjmp	.+20     	; 0x210a <LCD_displayString+0x24>
	while((*str) != '\0')
	{
		LCD_displayCharacter(*str);
    20f6:	e9 81       	ldd	r30, Y+1	; 0x01
    20f8:	fa 81       	ldd	r31, Y+2	; 0x02
    20fa:	80 81       	ld	r24, Z
    20fc:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_displayCharacter>
		str++;
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description : A Function to display a string.
 */
void LCD_displayString(const sint8_t* str)
{
	while((*str) != '\0')
    210a:	e9 81       	ldd	r30, Y+1	; 0x01
    210c:	fa 81       	ldd	r31, Y+2	; 0x02
    210e:	80 81       	ld	r24, Z
    2110:	88 23       	and	r24, r24
    2112:	89 f7       	brne	.-30     	; 0x20f6 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*str);
		str++;
	}
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <LCD_goToRowColumn>:

/*
 * Description : A Function to move the cursor to an exact spot.
 */
void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <LCD_goToRowColumn+0x6>
    2124:	00 d0       	rcall	.+0      	; 0x2126 <LCD_goToRowColumn+0x8>
    2126:	0f 92       	push	r0
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	8a 83       	std	Y+2, r24	; 0x02
    212e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t address;
	switch(row)
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	3d 83       	std	Y+5, r19	; 0x05
    2138:	2c 83       	std	Y+4, r18	; 0x04
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	9d 81       	ldd	r25, Y+5	; 0x05
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	91 05       	cpc	r25, r1
    2142:	c1 f0       	breq	.+48     	; 0x2174 <LCD_goToRowColumn+0x56>
    2144:	2c 81       	ldd	r18, Y+4	; 0x04
    2146:	3d 81       	ldd	r19, Y+5	; 0x05
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	2c f4       	brge	.+10     	; 0x2158 <LCD_goToRowColumn+0x3a>
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	9d 81       	ldd	r25, Y+5	; 0x05
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	61 f0       	breq	.+24     	; 0x216e <LCD_goToRowColumn+0x50>
    2156:	19 c0       	rjmp	.+50     	; 0x218a <LCD_goToRowColumn+0x6c>
    2158:	2c 81       	ldd	r18, Y+4	; 0x04
    215a:	3d 81       	ldd	r19, Y+5	; 0x05
    215c:	22 30       	cpi	r18, 0x02	; 2
    215e:	31 05       	cpc	r19, r1
    2160:	69 f0       	breq	.+26     	; 0x217c <LCD_goToRowColumn+0x5e>
    2162:	8c 81       	ldd	r24, Y+4	; 0x04
    2164:	9d 81       	ldd	r25, Y+5	; 0x05
    2166:	83 30       	cpi	r24, 0x03	; 3
    2168:	91 05       	cpc	r25, r1
    216a:	61 f0       	breq	.+24     	; 0x2184 <LCD_goToRowColumn+0x66>
    216c:	0e c0       	rjmp	.+28     	; 0x218a <LCD_goToRowColumn+0x6c>
	{
	case 0 :
		address = col;
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	0b c0       	rjmp	.+22     	; 0x218a <LCD_goToRowColumn+0x6c>
		break;
	case 1 :
		address = col + 0x40;
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	80 5c       	subi	r24, 0xC0	; 192
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	07 c0       	rjmp	.+14     	; 0x218a <LCD_goToRowColumn+0x6c>
		break;
	case 2 :
		address = col + 0x10;
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	80 5f       	subi	r24, 0xF0	; 240
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	03 c0       	rjmp	.+6      	; 0x218a <LCD_goToRowColumn+0x6c>
		break;
	case 3 :
		address = col + 0x50;
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	80 5b       	subi	r24, 0xB0	; 176
    2188:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(address | SET_CURSOR_LOCATION);
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	80 68       	ori	r24, 0x80	; 128
    218e:	0e 94 39 08 	call	0x1072	; 0x1072 <LCD_sendCommand>
}
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <LCD_displayStringRowColumn>:

/*
 * Description : A Function to move the cursor to an exact spot and display a string at the spot.
 */
void LCD_displayStringRowColumn(uint8_t row, uint8_t col, const sint8_t* str)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <LCD_displayStringRowColumn+0x6>
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <LCD_displayStringRowColumn+0x8>
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	6a 83       	std	Y+2, r22	; 0x02
    21b2:	5c 83       	std	Y+4, r21	; 0x04
    21b4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col);
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	6a 81       	ldd	r22, Y+2	; 0x02
    21ba:	0e 94 8f 10 	call	0x211e	; 0x211e <LCD_goToRowColumn>
	LCD_displayString(str);
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_displayString>
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <LCD_displayInteger>:

/*
 * Description : A Function to display an integer number.
 */
void LCD_displayInteger(sint32_t num)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	63 97       	sbiw	r28, 0x13	; 19
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	68 8b       	std	Y+16, r22	; 0x10
    21ea:	79 8b       	std	Y+17, r23	; 0x11
    21ec:	8a 8b       	std	Y+18, r24	; 0x12
    21ee:	9b 8b       	std	Y+19, r25	; 0x13
	sint8_t buff[12];
	sint8_t* ptr = &buff[11]; 				// char *ptr = (buff + 11); [] is another way of describing the dereferencing operator
    21f0:	ce 01       	movw	r24, r28
    21f2:	04 96       	adiw	r24, 0x04	; 4
    21f4:	0b 96       	adiw	r24, 0x0b	; 11
    21f6:	9b 83       	std	Y+3, r25	; 0x03
    21f8:	8a 83       	std	Y+2, r24	; 0x02
	char N_flag = 0;
    21fa:	19 82       	std	Y+1, r1	; 0x01
	if(num < 0)
    21fc:	88 89       	ldd	r24, Y+16	; 0x10
    21fe:	99 89       	ldd	r25, Y+17	; 0x11
    2200:	aa 89       	ldd	r26, Y+18	; 0x12
    2202:	bb 89       	ldd	r27, Y+19	; 0x13
    2204:	bb 23       	and	r27, r27
    2206:	8c f4       	brge	.+34     	; 0x222a <LCD_displayInteger+0x56>
	{
		N_flag = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	89 83       	std	Y+1, r24	; 0x01
		num = -num;
    220c:	88 89       	ldd	r24, Y+16	; 0x10
    220e:	99 89       	ldd	r25, Y+17	; 0x11
    2210:	aa 89       	ldd	r26, Y+18	; 0x12
    2212:	bb 89       	ldd	r27, Y+19	; 0x13
    2214:	b0 95       	com	r27
    2216:	a0 95       	com	r26
    2218:	90 95       	com	r25
    221a:	81 95       	neg	r24
    221c:	9f 4f       	sbci	r25, 0xFF	; 255
    221e:	af 4f       	sbci	r26, 0xFF	; 255
    2220:	bf 4f       	sbci	r27, 0xFF	; 255
    2222:	88 8b       	std	Y+16, r24	; 0x10
    2224:	99 8b       	std	Y+17, r25	; 0x11
    2226:	aa 8b       	std	Y+18, r26	; 0x12
    2228:	bb 8b       	std	Y+19, r27	; 0x13
	}
	*ptr = '\0';
    222a:	ea 81       	ldd	r30, Y+2	; 0x02
    222c:	fb 81       	ldd	r31, Y+3	; 0x03
    222e:	10 82       	st	Z, r1
	do{
	    *--ptr = (num % 10) + 48;
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	9b 81       	ldd	r25, Y+3	; 0x03
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9b 83       	std	Y+3, r25	; 0x03
    2238:	8a 83       	std	Y+2, r24	; 0x02
    223a:	88 89       	ldd	r24, Y+16	; 0x10
    223c:	99 89       	ldd	r25, Y+17	; 0x11
    223e:	aa 89       	ldd	r26, Y+18	; 0x12
    2240:	bb 89       	ldd	r27, Y+19	; 0x13
    2242:	2a e0       	ldi	r18, 0x0A	; 10
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 8c 22 	call	0x4518	; 0x4518 <__divmodsi4>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	80 5d       	subi	r24, 0xD0	; 208
    2258:	ea 81       	ldd	r30, Y+2	; 0x02
    225a:	fb 81       	ldd	r31, Y+3	; 0x03
    225c:	80 83       	st	Z, r24
	    num /= 10;
    225e:	88 89       	ldd	r24, Y+16	; 0x10
    2260:	99 89       	ldd	r25, Y+17	; 0x11
    2262:	aa 89       	ldd	r26, Y+18	; 0x12
    2264:	bb 89       	ldd	r27, Y+19	; 0x13
    2266:	2a e0       	ldi	r18, 0x0A	; 10
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 8c 22 	call	0x4518	; 0x4518 <__divmodsi4>
    2276:	da 01       	movw	r26, r20
    2278:	c9 01       	movw	r24, r18
    227a:	88 8b       	std	Y+16, r24	; 0x10
    227c:	99 8b       	std	Y+17, r25	; 0x11
    227e:	aa 8b       	std	Y+18, r26	; 0x12
    2280:	bb 8b       	std	Y+19, r27	; 0x13
	}while(num != 0);
    2282:	88 89       	ldd	r24, Y+16	; 0x10
    2284:	99 89       	ldd	r25, Y+17	; 0x11
    2286:	aa 89       	ldd	r26, Y+18	; 0x12
    2288:	bb 89       	ldd	r27, Y+19	; 0x13
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	a1 05       	cpc	r26, r1
    228e:	b1 05       	cpc	r27, r1
    2290:	79 f6       	brne	.-98     	; 0x2230 <LCD_displayInteger+0x5c>
	if(N_flag)
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	88 23       	and	r24, r24
    2296:	49 f0       	breq	.+18     	; 0x22aa <LCD_displayInteger+0xd6>
		*--ptr = '-';
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	9b 83       	std	Y+3, r25	; 0x03
    22a0:	8a 83       	std	Y+2, r24	; 0x02
    22a2:	ea 81       	ldd	r30, Y+2	; 0x02
    22a4:	fb 81       	ldd	r31, Y+3	; 0x03
    22a6:	8d e2       	ldi	r24, 0x2D	; 45
    22a8:	80 83       	st	Z, r24
	LCD_displayString(ptr);
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_displayString>
}
    22b2:	63 96       	adiw	r28, 0x13	; 19
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <LCD_clearScreen>:

/*
 * Description : A Function to Clear the LCD Screen.
 */
void LCD_clearScreen(void)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	0e 94 39 08 	call	0x1072	; 0x1072 <LCD_sendCommand>
}
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <__vector_12>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(SPI_STC_vect)
{
    22d8:	1f 92       	push	r1
    22da:	0f 92       	push	r0
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	0f 92       	push	r0
    22e0:	11 24       	eor	r1, r1
    22e2:	2f 93       	push	r18
    22e4:	3f 93       	push	r19
    22e6:	4f 93       	push	r20
    22e8:	5f 93       	push	r21
    22ea:	6f 93       	push	r22
    22ec:	7f 93       	push	r23
    22ee:	8f 93       	push	r24
    22f0:	9f 93       	push	r25
    22f2:	af 93       	push	r26
    22f4:	bf 93       	push	r27
    22f6:	ef 93       	push	r30
    22f8:	ff 93       	push	r31
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
	if(g_SPI_callBackPtr != NULL)
    2302:	80 91 71 00 	lds	r24, 0x0071
    2306:	90 91 72 00 	lds	r25, 0x0072
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	29 f0       	breq	.+10     	; 0x2318 <__vector_12+0x40>
	{
		g_SPI_callBackPtr();
    230e:	e0 91 71 00 	lds	r30, 0x0071
    2312:	f0 91 72 00 	lds	r31, 0x0072
    2316:	09 95       	icall
	}
}
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	ff 91       	pop	r31
    231e:	ef 91       	pop	r30
    2320:	bf 91       	pop	r27
    2322:	af 91       	pop	r26
    2324:	9f 91       	pop	r25
    2326:	8f 91       	pop	r24
    2328:	7f 91       	pop	r23
    232a:	6f 91       	pop	r22
    232c:	5f 91       	pop	r21
    232e:	4f 91       	pop	r20
    2330:	3f 91       	pop	r19
    2332:	2f 91       	pop	r18
    2334:	0f 90       	pop	r0
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	0f 90       	pop	r0
    233a:	1f 90       	pop	r1
    233c:	18 95       	reti

0000233e <SPI_init>:

/*
 * Description : A Function to Initialize the SPI Driver.
 */
void SPI_init(const SPI_ConfigType* ConfigPtr)
{
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	00 d0       	rcall	.+0      	; 0x2344 <SPI_init+0x6>
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	9a 83       	std	Y+2, r25	; 0x02
    234a:	89 83       	std	Y+1, r24	; 0x01
	/* In case the MCU will be configured as a slave */
	if(ConfigPtr->MasterSlaveSelect == SPI_SLAVE)
    234c:	e9 81       	ldd	r30, Y+1	; 0x01
    234e:	fa 81       	ldd	r31, Y+2	; 0x02
    2350:	80 81       	ld	r24, Z
    2352:	88 23       	and	r24, r24
    2354:	91 f4       	brne	.+36     	; 0x237a <SPI_init+0x3c>
	{
		/* select the slave mode and set the pins accordingly */
		gpioPinDirection(SPI_GPIO, SS | MOSI | SCK, INPUT);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	60 eb       	ldi	r22, 0xB0	; 176
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		gpioPinDirection(SPI_GPIO, MISO, OUTPUT);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	60 e4       	ldi	r22, 0x40	; 64
    2364:	4f ef       	ldi	r20, 0xFF	; 255
    2366:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		CLEAR_BIT(SPCR, MSTR);
    236a:	ad e2       	ldi	r26, 0x2D	; 45
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	ed e2       	ldi	r30, 0x2D	; 45
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	8f 7e       	andi	r24, 0xEF	; 239
    2376:	8c 93       	st	X, r24
    2378:	16 c0       	rjmp	.+44     	; 0x23a6 <SPI_init+0x68>
	}
	/* In case the MCU will be configured as a master */
	else if(ConfigPtr->MasterSlaveSelect == SPI_MASTER)
    237a:	e9 81       	ldd	r30, Y+1	; 0x01
    237c:	fa 81       	ldd	r31, Y+2	; 0x02
    237e:	80 81       	ld	r24, Z
    2380:	81 30       	cpi	r24, 0x01	; 1
    2382:	89 f4       	brne	.+34     	; 0x23a6 <SPI_init+0x68>
	{
		/* select the master mode and set the pins accordingly */
		gpioPinDirection(SPI_GPIO, SS | MOSI | SCK, OUTPUT);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	60 eb       	ldi	r22, 0xB0	; 176
    2388:	4f ef       	ldi	r20, 0xFF	; 255
    238a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		gpioPinDirection(SPI_GPIO, MISO, INPUT);
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	60 e4       	ldi	r22, 0x40	; 64
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		SET_BIT(SPCR, MSTR);
    2398:	ad e2       	ldi	r26, 0x2D	; 45
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	ed e2       	ldi	r30, 0x2D	; 45
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	80 61       	ori	r24, 0x10	; 16
    23a4:	8c 93       	st	X, r24
	}

	/* Selecting the interrupt mode (enabled of disabled) */
	SPCR = (SPCR & 0x7F) | ConfigPtr->Mode;
    23a6:	ad e2       	ldi	r26, 0x2D	; 45
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	ed e2       	ldi	r30, 0x2D	; 45
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	98 2f       	mov	r25, r24
    23b2:	9f 77       	andi	r25, 0x7F	; 127
    23b4:	e9 81       	ldd	r30, Y+1	; 0x01
    23b6:	fa 81       	ldd	r31, Y+2	; 0x02
    23b8:	81 81       	ldd	r24, Z+1	; 0x01
    23ba:	89 2b       	or	r24, r25
    23bc:	8c 93       	st	X, r24
	/* Enable the SPI module */
	SET_BIT(SPCR, SPE);
    23be:	ad e2       	ldi	r26, 0x2D	; 45
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	ed e2       	ldi	r30, 0x2D	; 45
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	80 64       	ori	r24, 0x40	; 64
    23ca:	8c 93       	st	X, r24

	/* Selecting the clock rate */
	SPCR = (SPCR & 0xFC) | ((ConfigPtr->ClockRateSelect) & 0x03);
    23cc:	ad e2       	ldi	r26, 0x2D	; 45
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	ed e2       	ldi	r30, 0x2D	; 45
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	98 2f       	mov	r25, r24
    23d8:	9c 7f       	andi	r25, 0xFC	; 252
    23da:	e9 81       	ldd	r30, Y+1	; 0x01
    23dc:	fa 81       	ldd	r31, Y+2	; 0x02
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	83 70       	andi	r24, 0x03	; 3
    23e2:	89 2b       	or	r24, r25
    23e4:	8c 93       	st	X, r24
	SPSR = (SPSR & 0xFE) | ((ConfigPtr->ClockRateSelect) >> 2);
    23e6:	ae e2       	ldi	r26, 0x2E	; 46
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	ee e2       	ldi	r30, 0x2E	; 46
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	98 2f       	mov	r25, r24
    23f2:	9e 7f       	andi	r25, 0xFE	; 254
    23f4:	e9 81       	ldd	r30, Y+1	; 0x01
    23f6:	fa 81       	ldd	r31, Y+2	; 0x02
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	86 95       	lsr	r24
    23fc:	86 95       	lsr	r24
    23fe:	89 2b       	or	r24, r25
    2400:	8c 93       	st	X, r24
}
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <SPI_setCallBack>:

/*
 * Description : A Function to set the call back function.
 */
void SPI_setCallBack(void(*a_ptr)(void))
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	00 d0       	rcall	.+0      	; 0x2412 <SPI_setCallBack+0x6>
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
	g_SPI_callBackPtr = (volatile void (*)(void))a_ptr;
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	9a 81       	ldd	r25, Y+2	; 0x02
    241e:	90 93 72 00 	sts	0x0072, r25
    2422:	80 93 71 00 	sts	0x0071, r24
}
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <SPI_sendByte>:

/*
 * Description : A Function to send a byte.
 */
void SPI_sendByte(const uint8_t data)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	0f 92       	push	r0
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	89 83       	std	Y+1, r24	; 0x01
	/* send the data */
	SPDR = data;
    243c:	ef e2       	ldi	r30, 0x2F	; 47
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	80 83       	st	Z, r24
	/* busy-waiting the SPIE bit in the SPCR register in case interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
    2444:	ed e2       	ldi	r30, 0x2D	; 45
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	88 23       	and	r24, r24
    244c:	2c f0       	brlt	.+10     	; 0x2458 <SPI_sendByte+0x28>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
    244e:	ee e2       	ldi	r30, 0x2E	; 46
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	88 23       	and	r24, r24
    2456:	dc f7       	brge	.-10     	; 0x244e <SPI_sendByte+0x1e>
	}
}
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <SPI_receiveByte>:

/*
 * Description : A Function to receive a byte.
 */
uint8_t SPI_receiveByte(void)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the SPIE bit in case the interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
    2468:	ed e2       	ldi	r30, 0x2D	; 45
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	88 23       	and	r24, r24
    2470:	2c f0       	brlt	.+10     	; 0x247c <SPI_receiveByte+0x1c>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
    2472:	ee e2       	ldi	r30, 0x2E	; 46
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	88 23       	and	r24, r24
    247a:	dc f7       	brge	.-10     	; 0x2472 <SPI_receiveByte+0x12>
	}
	/* read the data */
	return SPDR;
    247c:	ef e2       	ldi	r30, 0x2F	; 47
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
}
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	08 95       	ret

00002488 <__vector_3>:


/*- ISR's --------------------------------------------------*/

ISR(INT2_vect)
{
    2488:	1f 92       	push	r1
    248a:	0f 92       	push	r0
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	0f 92       	push	r0
    2490:	11 24       	eor	r1, r1
    2492:	2f 93       	push	r18
    2494:	3f 93       	push	r19
    2496:	4f 93       	push	r20
    2498:	5f 93       	push	r21
    249a:	6f 93       	push	r22
    249c:	7f 93       	push	r23
    249e:	8f 93       	push	r24
    24a0:	9f 93       	push	r25
    24a2:	af 93       	push	r26
    24a4:	bf 93       	push	r27
    24a6:	ef 93       	push	r30
    24a8:	ff 93       	push	r31
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	/* In case of rising edge detection */
	if(BIT_IS_SET(MCUCSR, 6))
    24b2:	e4 e5       	ldi	r30, 0x54	; 84
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	80 74       	andi	r24, 0x40	; 64
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	31 f0       	breq	.+12     	; 0x24d0 <__vector_3+0x48>
	{
		/* Start timer counter */
		SwICU_Start();
    24c4:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <SwICU_Start>
		/* Change edge detection to falling edge detection */
		SwICU_SetCfgEdge(SwICU_EdgeFalling);
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	0e 94 ca 12 	call	0x2594	; 0x2594 <SwICU_SetCfgEdge>
    24ce:	15 c0       	rjmp	.+42     	; 0x24fa <__vector_3+0x72>
	}
	/* In case of falling edge detection */
	else if(BIT_IS_CLEAR(MCUCSR, 6))
    24d0:	e4 e5       	ldi	r30, 0x54	; 84
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	80 74       	andi	r24, 0x40	; 64
    24dc:	90 70       	andi	r25, 0x00	; 0
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	61 f4       	brne	.+24     	; 0x24fa <__vector_3+0x72>
	{
		/* Read the current timer counter value */
		SwICU_Read(&gu8_swIcuRead);
    24e2:	83 e7       	ldi	r24, 0x73	; 115
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 de 12 	call	0x25bc	; 0x25bc <SwICU_Read>
		/* Change edge detection to rising edge detection */
		SwICU_SetCfgEdge(SwICU_EdgeRising);
    24ea:	80 e4       	ldi	r24, 0x40	; 64
    24ec:	0e 94 ca 12 	call	0x2594	; 0x2594 <SwICU_SetCfgEdge>
		/* Stop the timer counter */
		SwICU_Stop();
    24f0:	0e 94 ef 12 	call	0x25de	; 0x25de <SwICU_Stop>
		/* Set a flag to represent that the current operation is done */
		gu8_swIcuFlag = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	80 93 74 00 	sts	0x0074, r24
	}
}
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	ff 91       	pop	r31
    2500:	ef 91       	pop	r30
    2502:	bf 91       	pop	r27
    2504:	af 91       	pop	r26
    2506:	9f 91       	pop	r25
    2508:	8f 91       	pop	r24
    250a:	7f 91       	pop	r23
    250c:	6f 91       	pop	r22
    250e:	5f 91       	pop	r21
    2510:	4f 91       	pop	r20
    2512:	3f 91       	pop	r19
    2514:	2f 91       	pop	r18
    2516:	0f 90       	pop	r0
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	0f 90       	pop	r0
    251c:	1f 90       	pop	r1
    251e:	18 95       	reti

00002520 <SwICU_Init>:

/*- APIs IMPLEMENTATION ------------------------------------*/

void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
    2520:	ef 92       	push	r14
    2522:	0f 93       	push	r16
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	0f 92       	push	r0
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	89 83       	std	Y+1, r24	; 0x01
	/* Initializes timer0 in polling mode */
	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_256, 0, 0, T0_POLLING);
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	44 e0       	ldi	r20, 0x04	; 4
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	00 e0       	ldi	r16, 0x00	; 0
    253a:	ee 24       	eor	r14, r14
    253c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <timer0Init>

	gpioPinDirection(GPIOB, BIT2, INPUT);
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	64 e0       	ldi	r22, 0x04	; 4
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
	gpioPinDirection(GPIOD, BIT0, OUTPUT);
    254a:	83 e0       	ldi	r24, 0x03	; 3
    254c:	61 e0       	ldi	r22, 0x01	; 1
    254e:	4f ef       	ldi	r20, 0xFF	; 255
    2550:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
	
	/* Enables external int2 */
	SET_BIT(GICR, INT2);
    2554:	ab e5       	ldi	r26, 0x5B	; 91
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	eb e5       	ldi	r30, 0x5B	; 91
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	80 62       	ori	r24, 0x20	; 32
    2560:	8c 93       	st	X, r24
	
	/* Sets the required edge detection type */
	MCUCSR = (MCUCSR & 0xBF) | a_en_inputCaptureEdge;
    2562:	a4 e5       	ldi	r26, 0x54	; 84
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e4 e5       	ldi	r30, 0x54	; 84
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	98 2f       	mov	r25, r24
    256e:	9f 7b       	andi	r25, 0xBF	; 191
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	89 2b       	or	r24, r25
    2574:	8c 93       	st	X, r24
	
	/* Enables Global Interrupt Enable bit */
	sei();
    2576:	78 94       	sei
}
    2578:	0f 90       	pop	r0
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	0f 91       	pop	r16
    2580:	ef 90       	pop	r14
    2582:	08 95       	ret

00002584 <SwICU_GetCfgEdge>:

EN_SwICU_Edge_t SwICU_GetCfgEdge(void)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
	return 0;
    258c:	80 e0       	ldi	r24, 0x00	; 0
}
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <SwICU_SetCfgEdge>:

/*choose the detecting edge*/
void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	89 83       	std	Y+1, r24	; 0x01
	/* Change the required edge detection type to the selected type */
	MCUCSR = (MCUCSR & 0xBF) | a_en_inputCaptureEdge;
    25a0:	a4 e5       	ldi	r26, 0x54	; 84
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e4 e5       	ldi	r30, 0x54	; 84
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	98 2f       	mov	r25, r24
    25ac:	9f 7b       	andi	r25, 0xBF	; 191
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	89 2b       	or	r24, r25
    25b2:	8c 93       	st	X, r24
}
    25b4:	0f 90       	pop	r0
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <SwICU_Read>:

void SwICU_Read(volatile uint8_t * a_pu8_capt)
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <SwICU_Read+0x6>
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	9a 83       	std	Y+2, r25	; 0x02
    25c8:	89 83       	std	Y+1, r24	; 0x01
	/* Reads the current value of the timer0 */
	*a_pu8_capt = timer0Read();
    25ca:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <timer0Read>
    25ce:	e9 81       	ldd	r30, Y+1	; 0x01
    25d0:	fa 81       	ldd	r31, Y+2	; 0x02
    25d2:	80 83       	st	Z, r24
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <SwICU_Stop>:

void SwICU_Stop(void)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
	/* Stops the timer0 */
	timer0Stop();
    25e6:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <timer0Stop>
}
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <SwICU_Start>:

void SwICU_Start(void)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
	/* Starts the timer0 */
	timer0Start();
    25f8:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <timer0Start>
}
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <SwICU_Enable>:

void SwICU_Enable(void)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
}
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <SwICU_Disable>:

void SwICU_Disable(void)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
}
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <__vector_13>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(USART_RXC_vect)
{
    261e:	1f 92       	push	r1
    2620:	0f 92       	push	r0
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	0f 92       	push	r0
    2626:	11 24       	eor	r1, r1
    2628:	2f 93       	push	r18
    262a:	3f 93       	push	r19
    262c:	4f 93       	push	r20
    262e:	5f 93       	push	r21
    2630:	6f 93       	push	r22
    2632:	7f 93       	push	r23
    2634:	8f 93       	push	r24
    2636:	9f 93       	push	r25
    2638:	af 93       	push	r26
    263a:	bf 93       	push	r27
    263c:	ef 93       	push	r30
    263e:	ff 93       	push	r31
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
	if(g_RXC_callBackPtr != NULL)
    2648:	80 91 77 00 	lds	r24, 0x0077
    264c:	90 91 78 00 	lds	r25, 0x0078
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	29 f0       	breq	.+10     	; 0x265e <__vector_13+0x40>
	{
		g_RXC_callBackPtr();
    2654:	e0 91 77 00 	lds	r30, 0x0077
    2658:	f0 91 78 00 	lds	r31, 0x0078
    265c:	09 95       	icall
	}
}
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	ff 91       	pop	r31
    2664:	ef 91       	pop	r30
    2666:	bf 91       	pop	r27
    2668:	af 91       	pop	r26
    266a:	9f 91       	pop	r25
    266c:	8f 91       	pop	r24
    266e:	7f 91       	pop	r23
    2670:	6f 91       	pop	r22
    2672:	5f 91       	pop	r21
    2674:	4f 91       	pop	r20
    2676:	3f 91       	pop	r19
    2678:	2f 91       	pop	r18
    267a:	0f 90       	pop	r0
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	0f 90       	pop	r0
    2680:	1f 90       	pop	r1
    2682:	18 95       	reti

00002684 <__vector_14>:

ISR(USART_UDRE_vect)
{
    2684:	1f 92       	push	r1
    2686:	0f 92       	push	r0
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	0f 92       	push	r0
    268c:	11 24       	eor	r1, r1
    268e:	2f 93       	push	r18
    2690:	3f 93       	push	r19
    2692:	4f 93       	push	r20
    2694:	5f 93       	push	r21
    2696:	6f 93       	push	r22
    2698:	7f 93       	push	r23
    269a:	8f 93       	push	r24
    269c:	9f 93       	push	r25
    269e:	af 93       	push	r26
    26a0:	bf 93       	push	r27
    26a2:	ef 93       	push	r30
    26a4:	ff 93       	push	r31
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
	if(g_UDRE_callBackPtr != NULL)
    26ae:	80 91 79 00 	lds	r24, 0x0079
    26b2:	90 91 7a 00 	lds	r25, 0x007A
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	29 f0       	breq	.+10     	; 0x26c4 <__vector_14+0x40>
	{
		g_UDRE_callBackPtr();
    26ba:	e0 91 79 00 	lds	r30, 0x0079
    26be:	f0 91 7a 00 	lds	r31, 0x007A
    26c2:	09 95       	icall
	}
}
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	ff 91       	pop	r31
    26ca:	ef 91       	pop	r30
    26cc:	bf 91       	pop	r27
    26ce:	af 91       	pop	r26
    26d0:	9f 91       	pop	r25
    26d2:	8f 91       	pop	r24
    26d4:	7f 91       	pop	r23
    26d6:	6f 91       	pop	r22
    26d8:	5f 91       	pop	r21
    26da:	4f 91       	pop	r20
    26dc:	3f 91       	pop	r19
    26de:	2f 91       	pop	r18
    26e0:	0f 90       	pop	r0
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	0f 90       	pop	r0
    26e6:	1f 90       	pop	r1
    26e8:	18 95       	reti

000026ea <__vector_15>:

ISR(USART_TXC_vect)
{
    26ea:	1f 92       	push	r1
    26ec:	0f 92       	push	r0
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	0f 92       	push	r0
    26f2:	11 24       	eor	r1, r1
    26f4:	2f 93       	push	r18
    26f6:	3f 93       	push	r19
    26f8:	4f 93       	push	r20
    26fa:	5f 93       	push	r21
    26fc:	6f 93       	push	r22
    26fe:	7f 93       	push	r23
    2700:	8f 93       	push	r24
    2702:	9f 93       	push	r25
    2704:	af 93       	push	r26
    2706:	bf 93       	push	r27
    2708:	ef 93       	push	r30
    270a:	ff 93       	push	r31
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	if(g_TXC_callBackPtr != NULL)
    2714:	80 91 75 00 	lds	r24, 0x0075
    2718:	90 91 76 00 	lds	r25, 0x0076
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	29 f0       	breq	.+10     	; 0x272a <__vector_15+0x40>
	{
		g_TXC_callBackPtr();
    2720:	e0 91 75 00 	lds	r30, 0x0075
    2724:	f0 91 76 00 	lds	r31, 0x0076
    2728:	09 95       	icall
	}
}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	ff 91       	pop	r31
    2730:	ef 91       	pop	r30
    2732:	bf 91       	pop	r27
    2734:	af 91       	pop	r26
    2736:	9f 91       	pop	r25
    2738:	8f 91       	pop	r24
    273a:	7f 91       	pop	r23
    273c:	6f 91       	pop	r22
    273e:	5f 91       	pop	r21
    2740:	4f 91       	pop	r20
    2742:	3f 91       	pop	r19
    2744:	2f 91       	pop	r18
    2746:	0f 90       	pop	r0
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	0f 90       	pop	r0
    274c:	1f 90       	pop	r1
    274e:	18 95       	reti

00002750 <UART_TXC_setCallBack>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void UART_TXC_setCallBack(void(*local_ptr)(void))
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <UART_TXC_setCallBack+0x6>
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
	g_TXC_callBackPtr = (volatile void(*)(void))local_ptr;
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	90 93 76 00 	sts	0x0076, r25
    2766:	80 93 75 00 	sts	0x0075, r24
}
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <UART_RXC_setCallBack>:

void UART_RXC_setCallBack(void(*local_ptr)(void))
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	00 d0       	rcall	.+0      	; 0x277a <UART_RXC_setCallBack+0x6>
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	89 83       	std	Y+1, r24	; 0x01
	g_RXC_callBackPtr = (volatile void(*)(void))local_ptr;
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	9a 81       	ldd	r25, Y+2	; 0x02
    2786:	90 93 78 00 	sts	0x0078, r25
    278a:	80 93 77 00 	sts	0x0077, r24
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <UART_UDRE_setCallBack>:

void UART_UDRE_setCallBack(void(*local_ptr)(void))
{
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	00 d0       	rcall	.+0      	; 0x279e <UART_UDRE_setCallBack+0x6>
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
	g_UDRE_callBackPtr = (volatile void(*)(void))local_ptr;
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	90 93 7a 00 	sts	0x007A, r25
    27ae:	80 93 79 00 	sts	0x0079, r24
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <UART_init>:

void UART_init(const UART_ConfigType* ConfigPtr)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <UART_init+0x6>
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <UART_init+0x8>
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
	/* Activating double speed mode */
	SET_BIT(UCSRA, U2X);
    27cc:	ab e2       	ldi	r26, 0x2B	; 43
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	eb e2       	ldi	r30, 0x2B	; 43
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	82 60       	ori	r24, 0x02	; 2
    27d8:	8c 93       	st	X, r24

	/* Deciding whether the MCU will operate as a sender/receiver/sender and receiver */
	switch(ConfigPtr->communicationMode)
    27da:	e9 81       	ldd	r30, Y+1	; 0x01
    27dc:	fa 81       	ldd	r31, Y+2	; 0x02
    27de:	81 81       	ldd	r24, Z+1	; 0x01
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	3c 83       	std	Y+4, r19	; 0x04
    27e6:	2b 83       	std	Y+3, r18	; 0x03
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	81 30       	cpi	r24, 0x01	; 1
    27ee:	91 05       	cpc	r25, r1
    27f0:	f1 f0       	breq	.+60     	; 0x282e <UART_init+0x72>
    27f2:	2b 81       	ldd	r18, Y+3	; 0x03
    27f4:	3c 81       	ldd	r19, Y+4	; 0x04
    27f6:	22 30       	cpi	r18, 0x02	; 2
    27f8:	31 05       	cpc	r19, r1
    27fa:	69 f1       	breq	.+90     	; 0x2856 <UART_init+0x9a>
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	09 f0       	breq	.+2      	; 0x2806 <UART_init+0x4a>
    2804:	49 c0       	rjmp	.+146    	; 0x2898 <UART_init+0xdc>
	{
	case UART_SENDER_MODE:
		SET_BIT(UCSRB, TXEN);
    2806:	aa e2       	ldi	r26, 0x2A	; 42
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	ea e2       	ldi	r30, 0x2A	; 42
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	88 60       	ori	r24, 0x08	; 8
    2812:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
    2814:	e9 81       	ldd	r30, Y+1	; 0x01
    2816:	fa 81       	ldd	r31, Y+2	; 0x02
    2818:	85 81       	ldd	r24, Z+5	; 0x05
    281a:	81 30       	cpi	r24, 0x01	; 1
    281c:	e9 f5       	brne	.+122    	; 0x2898 <UART_init+0xdc>
			SET_BIT(UCSRB, TXCIE);
    281e:	aa e2       	ldi	r26, 0x2A	; 42
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	ea e2       	ldi	r30, 0x2A	; 42
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	80 64       	ori	r24, 0x40	; 64
    282a:	8c 93       	st	X, r24
    282c:	35 c0       	rjmp	.+106    	; 0x2898 <UART_init+0xdc>
		break;
	case UART_RECEIVER_MODE:
		SET_BIT(UCSRB, RXEN);
    282e:	aa e2       	ldi	r26, 0x2A	; 42
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	ea e2       	ldi	r30, 0x2A	; 42
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	80 61       	ori	r24, 0x10	; 16
    283a:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
    283c:	e9 81       	ldd	r30, Y+1	; 0x01
    283e:	fa 81       	ldd	r31, Y+2	; 0x02
    2840:	85 81       	ldd	r24, Z+5	; 0x05
    2842:	81 30       	cpi	r24, 0x01	; 1
    2844:	49 f5       	brne	.+82     	; 0x2898 <UART_init+0xdc>
			SET_BIT(UCSRB, RXCIE);
    2846:	aa e2       	ldi	r26, 0x2A	; 42
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	ea e2       	ldi	r30, 0x2A	; 42
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	80 68       	ori	r24, 0x80	; 128
    2852:	8c 93       	st	X, r24
    2854:	21 c0       	rjmp	.+66     	; 0x2898 <UART_init+0xdc>
		break;
	case UART_SENDER_RECEIVER_MODE:
		SET_BIT(UCSRB, TXEN);
    2856:	aa e2       	ldi	r26, 0x2A	; 42
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	ea e2       	ldi	r30, 0x2A	; 42
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	88 60       	ori	r24, 0x08	; 8
    2862:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);
    2864:	aa e2       	ldi	r26, 0x2A	; 42
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	ea e2       	ldi	r30, 0x2A	; 42
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	80 61       	ori	r24, 0x10	; 16
    2870:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
    2872:	e9 81       	ldd	r30, Y+1	; 0x01
    2874:	fa 81       	ldd	r31, Y+2	; 0x02
    2876:	85 81       	ldd	r24, Z+5	; 0x05
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	71 f4       	brne	.+28     	; 0x2898 <UART_init+0xdc>
		{
			SET_BIT(UCSRB, TXCIE);
    287c:	aa e2       	ldi	r26, 0x2A	; 42
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	ea e2       	ldi	r30, 0x2A	; 42
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	80 64       	ori	r24, 0x40	; 64
    2888:	8c 93       	st	X, r24
			SET_BIT(UCSRB, RXCIE);
    288a:	aa e2       	ldi	r26, 0x2A	; 42
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ea e2       	ldi	r30, 0x2A	; 42
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	80 68       	ori	r24, 0x80	; 128
    2896:	8c 93       	st	X, r24
		}
		break;
	}

	/* Selecting the character size (for the bits in UCSRB register) */
	UCSRB = (UCSRB & 0xFB) | (ConfigPtr->charSize & 0x04);
    2898:	aa e2       	ldi	r26, 0x2A	; 42
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	ea e2       	ldi	r30, 0x2A	; 42
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	98 2f       	mov	r25, r24
    28a4:	9b 7f       	andi	r25, 0xFB	; 251
    28a6:	e9 81       	ldd	r30, Y+1	; 0x01
    28a8:	fa 81       	ldd	r31, Y+2	; 0x02
    28aa:	82 81       	ldd	r24, Z+2	; 0x02
    28ac:	84 70       	andi	r24, 0x04	; 4
    28ae:	89 2b       	or	r24, r25
    28b0:	8c 93       	st	X, r24

	/* Setting this bit enables the user to configure the register UCSRC */
	SET_BIT(UCSRC, URSEL);
    28b2:	a0 e4       	ldi	r26, 0x40	; 64
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e0 e4       	ldi	r30, 0x40	; 64
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	80 68       	ori	r24, 0x80	; 128
    28be:	8c 93       	st	X, r24

	/* Setting the mode of the uart */
	UCSRC |= ConfigPtr->mode;
    28c0:	a0 e4       	ldi	r26, 0x40	; 64
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e0 e4       	ldi	r30, 0x40	; 64
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	90 81       	ld	r25, Z
    28ca:	e9 81       	ldd	r30, Y+1	; 0x01
    28cc:	fa 81       	ldd	r31, Y+2	; 0x02
    28ce:	80 81       	ld	r24, Z
    28d0:	89 2b       	or	r24, r25
    28d2:	8c 93       	st	X, r24

	/* Selecting the character size (for the bits in UCSRC register) */
	UCSRC = (UCSRC & 0xF9) | ((ConfigPtr->charSize & 0x03) << UCSZ0);
    28d4:	a0 e4       	ldi	r26, 0x40	; 64
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e0 e4       	ldi	r30, 0x40	; 64
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	28 2f       	mov	r18, r24
    28e0:	29 7f       	andi	r18, 0xF9	; 249
    28e2:	e9 81       	ldd	r30, Y+1	; 0x01
    28e4:	fa 81       	ldd	r31, Y+2	; 0x02
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	88 2f       	mov	r24, r24
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	83 70       	andi	r24, 0x03	; 3
    28ee:	90 70       	andi	r25, 0x00	; 0
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	82 2b       	or	r24, r18
    28f6:	8c 93       	st	X, r24
	/* Selecting parity mode */
	UCSRC = (UCSRC & 0xCF) | ConfigPtr->parityMode;
    28f8:	a0 e4       	ldi	r26, 0x40	; 64
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e0 e4       	ldi	r30, 0x40	; 64
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	98 2f       	mov	r25, r24
    2904:	9f 7c       	andi	r25, 0xCF	; 207
    2906:	e9 81       	ldd	r30, Y+1	; 0x01
    2908:	fa 81       	ldd	r31, Y+2	; 0x02
    290a:	83 81       	ldd	r24, Z+3	; 0x03
    290c:	89 2b       	or	r24, r25
    290e:	8c 93       	st	X, r24
	/* Selecting the number of stop bits */
	UCSRC = (UCSRC & 0xF7) | ConfigPtr->stopBits;
    2910:	a0 e4       	ldi	r26, 0x40	; 64
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e0 e4       	ldi	r30, 0x40	; 64
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	98 2f       	mov	r25, r24
    291c:	97 7f       	andi	r25, 0xF7	; 247
    291e:	e9 81       	ldd	r30, Y+1	; 0x01
    2920:	fa 81       	ldd	r31, Y+2	; 0x02
    2922:	84 81       	ldd	r24, Z+4	; 0x04
    2924:	89 2b       	or	r24, r25
    2926:	8c 93       	st	X, r24

	/* Choosing the baud rate of the process */
	UBRRH = BAUDPRESCALE >> 8;
    2928:	e0 e4       	ldi	r30, 0x40	; 64
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	10 82       	st	Z, r1
	UBRRL = BAUDPRESCALE;
    292e:	e9 e2       	ldi	r30, 0x29	; 41
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	8f ec       	ldi	r24, 0xCF	; 207
    2934:	80 83       	st	Z, r24
}
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <UART_transmit>:

void UART_transmit(const uint8_t data)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	89 83       	std	Y+1, r24	; 0x01
	/* busy-waiting the UDRE bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB, TXCIE))
    2950:	ea e2       	ldi	r30, 0x2A	; 42
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	80 74       	andi	r24, 0x40	; 64
    295c:	90 70       	andi	r25, 0x00	; 0
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	49 f4       	brne	.+18     	; 0x2974 <UART_transmit+0x30>
		while(BIT_IS_CLEAR(UCSRA, UDRE));
    2962:	eb e2       	ldi	r30, 0x2B	; 43
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	80 72       	andi	r24, 0x20	; 32
    296e:	90 70       	andi	r25, 0x00	; 0
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	b9 f3       	breq	.-18     	; 0x2962 <UART_transmit+0x1e>
	/* sending the data */
	UDR = data;
    2974:	ec e2       	ldi	r30, 0x2C	; 44
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	80 83       	st	Z, r24
}
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <UART_receive>:

uint8_t UART_receive(void)
{
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the RXC bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB, RXCIE))
    298c:	ea e2       	ldi	r30, 0x2A	; 42
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	88 23       	and	r24, r24
    2994:	2c f0       	brlt	.+10     	; 0x29a0 <UART_receive+0x1c>
		while(BIT_IS_CLEAR(UCSRA, RXC));
    2996:	eb e2       	ldi	r30, 0x2B	; 43
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	88 23       	and	r24, r24
    299e:	dc f7       	brge	.-10     	; 0x2996 <UART_receive+0x12>
	/* read the received data */
	return UDR;
    29a0:	ec e2       	ldi	r30, 0x2C	; 44
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
}
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <MotorDC_Init>:
#define MOTOR_FREQUENCY 200

/*- APIs IMPLEMENTATION ------------------------------------*/

void MotorDC_Init(En_motorType_t en_motor_number)
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <MotorDC_Init+0x6>
    29b2:	0f 92       	push	r0
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	89 83       	std	Y+1, r24	; 0x01
	switch(en_motor_number)
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	3b 83       	std	Y+3, r19	; 0x03
    29c2:	2a 83       	std	Y+2, r18	; 0x02
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	9b 81       	ldd	r25, Y+3	; 0x03
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	31 f0       	breq	.+12     	; 0x29d8 <MotorDC_Init+0x2c>
    29cc:	2a 81       	ldd	r18, Y+2	; 0x02
    29ce:	3b 81       	ldd	r19, Y+3	; 0x03
    29d0:	21 30       	cpi	r18, 0x01	; 1
    29d2:	31 05       	cpc	r19, r1
    29d4:	b1 f0       	breq	.+44     	; 0x2a02 <MotorDC_Init+0x56>
    29d6:	29 c0       	rjmp	.+82     	; 0x2a2a <MotorDC_Init+0x7e>
	{
		case MOT_1:
			gpioPinDirection(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, OUTPUT);
    29d8:	83 e0       	ldi	r24, 0x03	; 3
    29da:	60 e1       	ldi	r22, 0x10	; 16
    29dc:	4f ef       	ldi	r20, 0xFF	; 255
    29de:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, OUTPUT);
    29e2:	83 e0       	ldi	r24, 0x03	; 3
    29e4:	64 e0       	ldi	r22, 0x04	; 4
    29e6:	4f ef       	ldi	r20, 0xFF	; 255
    29e8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, OUTPUT);
    29ec:	83 e0       	ldi	r24, 0x03	; 3
    29ee:	68 e0       	ldi	r22, 0x08	; 8
    29f0:	4f ef       	ldi	r20, 0xFF	; 255
    29f2:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, HIGH);
    29f6:	83 e0       	ldi	r24, 0x03	; 3
    29f8:	60 e1       	ldi	r22, 0x10	; 16
    29fa:	4f ef       	ldi	r20, 0xFF	; 255
    29fc:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    2a00:	14 c0       	rjmp	.+40     	; 0x2a2a <MotorDC_Init+0x7e>
			break;
		case MOT_2:
			gpioPinDirection(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, OUTPUT);
    2a02:	83 e0       	ldi	r24, 0x03	; 3
    2a04:	60 e2       	ldi	r22, 0x20	; 32
    2a06:	4f ef       	ldi	r20, 0xFF	; 255
    2a08:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, OUTPUT);
    2a0c:	83 e0       	ldi	r24, 0x03	; 3
    2a0e:	60 e4       	ldi	r22, 0x40	; 64
    2a10:	4f ef       	ldi	r20, 0xFF	; 255
    2a12:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, OUTPUT);
    2a16:	83 e0       	ldi	r24, 0x03	; 3
    2a18:	60 e8       	ldi	r22, 0x80	; 128
    2a1a:	4f ef       	ldi	r20, 0xFF	; 255
    2a1c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, HIGH);
    2a20:	83 e0       	ldi	r24, 0x03	; 3
    2a22:	60 e2       	ldi	r22, 0x20	; 32
    2a24:	4f ef       	ldi	r20, 0xFF	; 255
    2a26:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
			break;
	}
}
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <MotorDC_Dir>:

void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	2b 97       	sbiw	r28, 0x0b	; 11
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	8c 83       	std	Y+4, r24	; 0x04
    2a4c:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t motorGpio = 0;
    2a4e:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t motorBitA = 0;
    2a50:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t motorBitB = 0;
    2a52:	19 82       	std	Y+1, r1	; 0x01
	
	switch(en_motor_number)
    2a54:	8c 81       	ldd	r24, Y+4	; 0x04
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	3b 87       	std	Y+11, r19	; 0x0b
    2a5c:	2a 87       	std	Y+10, r18	; 0x0a
    2a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	31 f0       	breq	.+12     	; 0x2a72 <MotorDC_Dir+0x3c>
    2a66:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a68:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a6a:	21 30       	cpi	r18, 0x01	; 1
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	41 f0       	breq	.+16     	; 0x2a80 <MotorDC_Dir+0x4a>
    2a70:	0d c0       	rjmp	.+26     	; 0x2a8c <MotorDC_Dir+0x56>
	{
		case MOT_1:
			motorGpio = MOTOR_OUT_1A_GPIO;
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_1A_BIT;
    2a76:	84 e0       	ldi	r24, 0x04	; 4
    2a78:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_1B_BIT;
    2a7a:	88 e0       	ldi	r24, 0x08	; 8
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	06 c0       	rjmp	.+12     	; 0x2a8c <MotorDC_Dir+0x56>
			break;
		case MOT_2:
			motorGpio = MOTOR_OUT_2A_GPIO;
    2a80:	83 e0       	ldi	r24, 0x03	; 3
    2a82:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_2A_BIT;
    2a84:	80 e4       	ldi	r24, 0x40	; 64
    2a86:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_2B_BIT;
    2a88:	80 e8       	ldi	r24, 0x80	; 128
    2a8a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	
	switch(en_motor_dir)
    2a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	39 87       	std	Y+9, r19	; 0x09
    2a94:	28 87       	std	Y+8, r18	; 0x08
    2a96:	88 85       	ldd	r24, Y+8	; 0x08
    2a98:	99 85       	ldd	r25, Y+9	; 0x09
    2a9a:	81 30       	cpi	r24, 0x01	; 1
    2a9c:	91 05       	cpc	r25, r1
    2a9e:	71 f1       	breq	.+92     	; 0x2afc <MotorDC_Dir+0xc6>
    2aa0:	28 85       	ldd	r18, Y+8	; 0x08
    2aa2:	39 85       	ldd	r19, Y+9	; 0x09
    2aa4:	22 30       	cpi	r18, 0x02	; 2
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	a1 f1       	breq	.+104    	; 0x2b12 <MotorDC_Dir+0xdc>
    2aaa:	88 85       	ldd	r24, Y+8	; 0x08
    2aac:	99 85       	ldd	r25, Y+9	; 0x09
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	d1 f5       	brne	.+116    	; 0x2b26 <MotorDC_Dir+0xf0>
	{
		case STOP:
		gpioPinWrite(motorGpio, motorBitA, LOW);
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	6a 81       	ldd	r22, Y+2	; 0x02
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	69 81       	ldd	r22, Y+1	; 0x01
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		switch(en_motor_number)
    2ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	3f 83       	std	Y+7, r19	; 0x07
    2ace:	2e 83       	std	Y+6, r18	; 0x06
    2ad0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	31 f0       	breq	.+12     	; 0x2ae4 <MotorDC_Dir+0xae>
    2ad8:	2e 81       	ldd	r18, Y+6	; 0x06
    2ada:	3f 81       	ldd	r19, Y+7	; 0x07
    2adc:	21 30       	cpi	r18, 0x01	; 1
    2ade:	31 05       	cpc	r19, r1
    2ae0:	39 f0       	breq	.+14     	; 0x2af0 <MotorDC_Dir+0xba>
    2ae2:	21 c0       	rjmp	.+66     	; 0x2b26 <MotorDC_Dir+0xf0>
		{
			case MOT_1:
				gpioPinWrite(motorGpio, MOTOR_EN_1_BIT, LOW);
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	60 e1       	ldi	r22, 0x10	; 16
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    2aee:	1b c0       	rjmp	.+54     	; 0x2b26 <MotorDC_Dir+0xf0>
				break;
			case MOT_2:
				gpioPinWrite(motorGpio, MOTOR_EN_2_BIT, LOW);
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	60 e2       	ldi	r22, 0x20	; 32
    2af4:	40 e0       	ldi	r20, 0x00	; 0
    2af6:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    2afa:	15 c0       	rjmp	.+42     	; 0x2b26 <MotorDC_Dir+0xf0>
				break;
		}
		break;
		
		case FORWARD:
		gpioPinWrite(motorGpio, motorBitA, LOW);
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	6a 81       	ldd	r22, Y+2	; 0x02
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, HIGH);
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	69 81       	ldd	r22, Y+1	; 0x01
    2b0a:	4f ef       	ldi	r20, 0xFF	; 255
    2b0c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    2b10:	0a c0       	rjmp	.+20     	; 0x2b26 <MotorDC_Dir+0xf0>
		break;
		
		case BACKWARD:
		gpioPinWrite(motorGpio, motorBitA, HIGH);
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	6a 81       	ldd	r22, Y+2	; 0x02
    2b16:	4f ef       	ldi	r20, 0xFF	; 255
    2b18:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	69 81       	ldd	r22, Y+1	; 0x01
    2b20:	40 e0       	ldi	r20, 0x00	; 0
    2b22:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		break;
	}
}
    2b26:	2b 96       	adiw	r28, 0x0b	; 11
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	f8 94       	cli
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	0f be       	out	0x3f, r0	; 63
    2b30:	cd bf       	out	0x3d, r28	; 61
    2b32:	cf 91       	pop	r28
    2b34:	df 91       	pop	r29
    2b36:	08 95       	ret

00002b38 <MotorDC_Speed_PollingWithT0>:

void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	0f 92       	push	r0
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
    2b42:	89 83       	std	Y+1, r24	; 0x01
	timer0SwPWM(u8_motor_speed, MOTOR_FREQUENCY);
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	68 ec       	ldi	r22, 0xC8	; 200
    2b48:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <timer0SwPWM>
}
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <MotorDC_Speed_HwPWM>:

void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	0f 92       	push	r0
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	89 83       	std	Y+1, r24	; 0x01
	
    2b60:	0f 90       	pop	r0
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <gpioPortDirection>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <gpioPortDirection+0x6>
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <gpioPortDirection+0x8>
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to manipulate its direction */
	switch(u8_port)
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	3c 83       	std	Y+4, r19	; 0x04
    2b80:	2b 83       	std	Y+3, r18	; 0x03
    2b82:	8b 81       	ldd	r24, Y+3	; 0x03
    2b84:	9c 81       	ldd	r25, Y+4	; 0x04
    2b86:	81 30       	cpi	r24, 0x01	; 1
    2b88:	91 05       	cpc	r25, r1
    2b8a:	d1 f0       	breq	.+52     	; 0x2bc0 <gpioPortDirection+0x58>
    2b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b90:	22 30       	cpi	r18, 0x02	; 2
    2b92:	31 05       	cpc	r19, r1
    2b94:	2c f4       	brge	.+10     	; 0x2ba0 <gpioPortDirection+0x38>
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	61 f0       	breq	.+24     	; 0x2bb6 <gpioPortDirection+0x4e>
    2b9e:	1e c0       	rjmp	.+60     	; 0x2bdc <gpioPortDirection+0x74>
    2ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba4:	22 30       	cpi	r18, 0x02	; 2
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	81 f0       	breq	.+32     	; 0x2bca <gpioPortDirection+0x62>
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	9c 81       	ldd	r25, Y+4	; 0x04
    2bae:	83 30       	cpi	r24, 0x03	; 3
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	81 f0       	breq	.+32     	; 0x2bd4 <gpioPortDirection+0x6c>
    2bb4:	13 c0       	rjmp	.+38     	; 0x2bdc <gpioPortDirection+0x74>
	{
	case GPIOA:
		PORTA_DIR = u8_direction;
    2bb6:	ea e3       	ldi	r30, 0x3A	; 58
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	80 83       	st	Z, r24
    2bbe:	0e c0       	rjmp	.+28     	; 0x2bdc <gpioPortDirection+0x74>
		break;
	case GPIOB:
		PORTB_DIR = u8_direction;
    2bc0:	e7 e3       	ldi	r30, 0x37	; 55
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	80 83       	st	Z, r24
    2bc8:	09 c0       	rjmp	.+18     	; 0x2bdc <gpioPortDirection+0x74>
		break;
	case GPIOC:
		PORTC_DIR = u8_direction;
    2bca:	e4 e3       	ldi	r30, 0x34	; 52
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	80 83       	st	Z, r24
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <gpioPortDirection+0x74>
		break;
	case GPIOD:
		PORTD_DIR = u8_direction;
    2bd4:	e1 e3       	ldi	r30, 0x31	; 49
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <gpioPortWrite>:

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <gpioPortWrite+0x6>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <gpioPortWrite+0x8>
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	89 83       	std	Y+1, r24	; 0x01
    2bf8:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to assign the value to */
	switch(u8_port)
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	3c 83       	std	Y+4, r19	; 0x04
    2c02:	2b 83       	std	Y+3, r18	; 0x03
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	81 30       	cpi	r24, 0x01	; 1
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	d1 f0       	breq	.+52     	; 0x2c42 <gpioPortWrite+0x58>
    2c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c10:	3c 81       	ldd	r19, Y+4	; 0x04
    2c12:	22 30       	cpi	r18, 0x02	; 2
    2c14:	31 05       	cpc	r19, r1
    2c16:	2c f4       	brge	.+10     	; 0x2c22 <gpioPortWrite+0x38>
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	61 f0       	breq	.+24     	; 0x2c38 <gpioPortWrite+0x4e>
    2c20:	1e c0       	rjmp	.+60     	; 0x2c5e <gpioPortWrite+0x74>
    2c22:	2b 81       	ldd	r18, Y+3	; 0x03
    2c24:	3c 81       	ldd	r19, Y+4	; 0x04
    2c26:	22 30       	cpi	r18, 0x02	; 2
    2c28:	31 05       	cpc	r19, r1
    2c2a:	81 f0       	breq	.+32     	; 0x2c4c <gpioPortWrite+0x62>
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c30:	83 30       	cpi	r24, 0x03	; 3
    2c32:	91 05       	cpc	r25, r1
    2c34:	81 f0       	breq	.+32     	; 0x2c56 <gpioPortWrite+0x6c>
    2c36:	13 c0       	rjmp	.+38     	; 0x2c5e <gpioPortWrite+0x74>
	{
	case GPIOA:
		PORTA_DATA = u8_value;
    2c38:	eb e3       	ldi	r30, 0x3B	; 59
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	80 83       	st	Z, r24
    2c40:	0e c0       	rjmp	.+28     	; 0x2c5e <gpioPortWrite+0x74>
		break;
	case GPIOB:
		PORTB_DATA = u8_value;
    2c42:	e8 e3       	ldi	r30, 0x38	; 56
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	80 83       	st	Z, r24
    2c4a:	09 c0       	rjmp	.+18     	; 0x2c5e <gpioPortWrite+0x74>
		break;
	case GPIOC:
		PORTC_DATA = u8_value;
    2c4c:	e5 e3       	ldi	r30, 0x35	; 53
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	80 83       	st	Z, r24
    2c54:	04 c0       	rjmp	.+8      	; 0x2c5e <gpioPortWrite+0x74>
		break;
	case GPIOD:
		PORTD_DATA = u8_value;
    2c56:	e2 e3       	ldi	r30, 0x32	; 50
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <gpioPortToggle+0x6>
    2c72:	0f 92       	push	r0
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to toggle its value */
	switch(u8_port)
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	3b 83       	std	Y+3, r19	; 0x03
    2c82:	2a 83       	std	Y+2, r18	; 0x02
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	9b 81       	ldd	r25, Y+3	; 0x03
    2c88:	81 30       	cpi	r24, 0x01	; 1
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	e9 f0       	breq	.+58     	; 0x2cc8 <gpioPortToggle+0x5c>
    2c8e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c90:	3b 81       	ldd	r19, Y+3	; 0x03
    2c92:	22 30       	cpi	r18, 0x02	; 2
    2c94:	31 05       	cpc	r19, r1
    2c96:	2c f4       	brge	.+10     	; 0x2ca2 <gpioPortToggle+0x36>
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9c:	00 97       	sbiw	r24, 0x00	; 0
    2c9e:	61 f0       	breq	.+24     	; 0x2cb8 <gpioPortToggle+0x4c>
    2ca0:	2a c0       	rjmp	.+84     	; 0x2cf6 <gpioPortToggle+0x8a>
    2ca2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ca4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ca6:	22 30       	cpi	r18, 0x02	; 2
    2ca8:	31 05       	cpc	r19, r1
    2caa:	b1 f0       	breq	.+44     	; 0x2cd8 <gpioPortToggle+0x6c>
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb0:	83 30       	cpi	r24, 0x03	; 3
    2cb2:	91 05       	cpc	r25, r1
    2cb4:	c9 f0       	breq	.+50     	; 0x2ce8 <gpioPortToggle+0x7c>
    2cb6:	1f c0       	rjmp	.+62     	; 0x2cf6 <gpioPortToggle+0x8a>
	{
	case GPIOA:
		PORTA_DATA ^= HIGH;
    2cb8:	ab e3       	ldi	r26, 0x3B	; 59
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	eb e3       	ldi	r30, 0x3B	; 59
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	80 95       	com	r24
    2cc4:	8c 93       	st	X, r24
    2cc6:	17 c0       	rjmp	.+46     	; 0x2cf6 <gpioPortToggle+0x8a>
		break;
	case GPIOB:
		PORTB_DATA ^= HIGH;
    2cc8:	a8 e3       	ldi	r26, 0x38	; 56
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e8 e3       	ldi	r30, 0x38	; 56
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	80 95       	com	r24
    2cd4:	8c 93       	st	X, r24
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <gpioPortToggle+0x8a>
		break;
	case GPIOC:
		PORTC_DATA ^= HIGH;
    2cd8:	a5 e3       	ldi	r26, 0x35	; 53
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e5 e3       	ldi	r30, 0x35	; 53
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	80 95       	com	r24
    2ce4:	8c 93       	st	X, r24
    2ce6:	07 c0       	rjmp	.+14     	; 0x2cf6 <gpioPortToggle+0x8a>
		break;
	case GPIOD:
		PORTD_DATA ^= HIGH;
    2ce8:	a2 e3       	ldi	r26, 0x32	; 50
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e2 e3       	ldi	r30, 0x32	; 50
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	80 95       	com	r24
    2cf4:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <gpioPortRead+0x6>
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <gpioPortRead+0x8>
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to be read */
	switch(u8_port)
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	3c 83       	std	Y+4, r19	; 0x04
    2d18:	2b 83       	std	Y+3, r18	; 0x03
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1e:	81 30       	cpi	r24, 0x01	; 1
    2d20:	91 05       	cpc	r25, r1
    2d22:	d1 f0       	breq	.+52     	; 0x2d58 <gpioPortRead+0x56>
    2d24:	2b 81       	ldd	r18, Y+3	; 0x03
    2d26:	3c 81       	ldd	r19, Y+4	; 0x04
    2d28:	22 30       	cpi	r18, 0x02	; 2
    2d2a:	31 05       	cpc	r19, r1
    2d2c:	2c f4       	brge	.+10     	; 0x2d38 <gpioPortRead+0x36>
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	61 f0       	breq	.+24     	; 0x2d4e <gpioPortRead+0x4c>
    2d36:	1f c0       	rjmp	.+62     	; 0x2d76 <gpioPortRead+0x74>
    2d38:	2b 81       	ldd	r18, Y+3	; 0x03
    2d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d3c:	22 30       	cpi	r18, 0x02	; 2
    2d3e:	31 05       	cpc	r19, r1
    2d40:	81 f0       	breq	.+32     	; 0x2d62 <gpioPortRead+0x60>
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
    2d44:	9c 81       	ldd	r25, Y+4	; 0x04
    2d46:	83 30       	cpi	r24, 0x03	; 3
    2d48:	91 05       	cpc	r25, r1
    2d4a:	81 f0       	breq	.+32     	; 0x2d6c <gpioPortRead+0x6a>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <gpioPortRead+0x74>
	{
	case GPIOA:
		return PORTA_PIN;
    2d4e:	e9 e3       	ldi	r30, 0x39	; 57
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	90 81       	ld	r25, Z
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	11 c0       	rjmp	.+34     	; 0x2d7a <gpioPortRead+0x78>
		break;
	case GPIOB:
		return PORTB_PIN;
    2d58:	e6 e3       	ldi	r30, 0x36	; 54
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	20 81       	ld	r18, Z
    2d5e:	2a 83       	std	Y+2, r18	; 0x02
    2d60:	0c c0       	rjmp	.+24     	; 0x2d7a <gpioPortRead+0x78>
		break;
	case GPIOC:
		return PORTC_PIN;
    2d62:	e3 e3       	ldi	r30, 0x33	; 51
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	30 81       	ld	r19, Z
    2d68:	3a 83       	std	Y+2, r19	; 0x02
    2d6a:	07 c0       	rjmp	.+14     	; 0x2d7a <gpioPortRead+0x78>
		break;
	case GPIOD:
		return PORTD_PIN;
    2d6c:	e0 e3       	ldi	r30, 0x30	; 48
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	8a 83       	std	Y+2, r24	; 0x02
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <gpioPortRead+0x78>
		break;
	default:
		return ERROR;
    2d76:	9f ef       	ldi	r25, 0xFF	; 255
    2d78:	9a 83       	std	Y+2, r25	; 0x02
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	08 95       	ret

00002d8a <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
    2d8a:	df 93       	push	r29
    2d8c:	cf 93       	push	r28
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	29 97       	sbiw	r28, 0x09	; 9
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	8b 83       	std	Y+3, r24	; 0x03
    2da0:	6c 83       	std	Y+4, r22	; 0x04
    2da2:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which direction is to be manipulated */
	uint8_t* pu8_portDirectionPointer = NULL;
    2da4:	1a 82       	std	Y+2, r1	; 0x02
    2da6:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	39 87       	std	Y+9, r19	; 0x09
    2db0:	28 87       	std	Y+8, r18	; 0x08
    2db2:	88 85       	ldd	r24, Y+8	; 0x08
    2db4:	99 85       	ldd	r25, Y+9	; 0x09
    2db6:	81 30       	cpi	r24, 0x01	; 1
    2db8:	91 05       	cpc	r25, r1
    2dba:	d1 f0       	breq	.+52     	; 0x2df0 <gpioPinDirection+0x66>
    2dbc:	28 85       	ldd	r18, Y+8	; 0x08
    2dbe:	39 85       	ldd	r19, Y+9	; 0x09
    2dc0:	22 30       	cpi	r18, 0x02	; 2
    2dc2:	31 05       	cpc	r19, r1
    2dc4:	2c f4       	brge	.+10     	; 0x2dd0 <gpioPinDirection+0x46>
    2dc6:	88 85       	ldd	r24, Y+8	; 0x08
    2dc8:	99 85       	ldd	r25, Y+9	; 0x09
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	61 f0       	breq	.+24     	; 0x2de6 <gpioPinDirection+0x5c>
    2dce:	1e c0       	rjmp	.+60     	; 0x2e0c <gpioPinDirection+0x82>
    2dd0:	28 85       	ldd	r18, Y+8	; 0x08
    2dd2:	39 85       	ldd	r19, Y+9	; 0x09
    2dd4:	22 30       	cpi	r18, 0x02	; 2
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	81 f0       	breq	.+32     	; 0x2dfa <gpioPinDirection+0x70>
    2dda:	88 85       	ldd	r24, Y+8	; 0x08
    2ddc:	99 85       	ldd	r25, Y+9	; 0x09
    2dde:	83 30       	cpi	r24, 0x03	; 3
    2de0:	91 05       	cpc	r25, r1
    2de2:	81 f0       	breq	.+32     	; 0x2e04 <gpioPinDirection+0x7a>
    2de4:	13 c0       	rjmp	.+38     	; 0x2e0c <gpioPinDirection+0x82>
	{
	case GPIOA:
		pu8_portDirectionPointer = (uint8_t*)(&PORTA_DIR);
    2de6:	8a e3       	ldi	r24, 0x3A	; 58
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	9a 83       	std	Y+2, r25	; 0x02
    2dec:	89 83       	std	Y+1, r24	; 0x01
    2dee:	0e c0       	rjmp	.+28     	; 0x2e0c <gpioPinDirection+0x82>
		break;
	case GPIOB:
		pu8_portDirectionPointer = (uint8_t*)(&PORTB_DIR);
    2df0:	87 e3       	ldi	r24, 0x37	; 55
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	9a 83       	std	Y+2, r25	; 0x02
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	09 c0       	rjmp	.+18     	; 0x2e0c <gpioPinDirection+0x82>
		break;
	case GPIOC:
		pu8_portDirectionPointer = (uint8_t*)(&PORTC_DIR);
    2dfa:	84 e3       	ldi	r24, 0x34	; 52
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	9a 83       	std	Y+2, r25	; 0x02
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	04 c0       	rjmp	.+8      	; 0x2e0c <gpioPinDirection+0x82>
		break;
	case GPIOD:
		pu8_portDirectionPointer = (uint8_t*)(&PORTD_DIR);
    2e04:	81 e3       	ldi	r24, 0x31	; 49
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the pins are to be input or output */
	switch(u8_direction)
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	3f 83       	std	Y+7, r19	; 0x07
    2e14:	2e 83       	std	Y+6, r18	; 0x06
    2e16:	8e 81       	ldd	r24, Y+6	; 0x06
    2e18:	9f 81       	ldd	r25, Y+7	; 0x07
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	31 f0       	breq	.+12     	; 0x2e2a <gpioPinDirection+0xa0>
    2e1e:	2e 81       	ldd	r18, Y+6	; 0x06
    2e20:	3f 81       	ldd	r19, Y+7	; 0x07
    2e22:	2f 3f       	cpi	r18, 0xFF	; 255
    2e24:	31 05       	cpc	r19, r1
    2e26:	61 f0       	breq	.+24     	; 0x2e40 <gpioPinDirection+0xb6>
    2e28:	13 c0       	rjmp	.+38     	; 0x2e50 <gpioPinDirection+0xc6>
	{
	case INPUT:
		*pu8_portDirectionPointer &= ~u8_pins;
    2e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2e:	80 81       	ld	r24, Z
    2e30:	98 2f       	mov	r25, r24
    2e32:	8c 81       	ldd	r24, Y+4	; 0x04
    2e34:	80 95       	com	r24
    2e36:	89 23       	and	r24, r25
    2e38:	e9 81       	ldd	r30, Y+1	; 0x01
    2e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e3c:	80 83       	st	Z, r24
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <gpioPinDirection+0xc6>
		break;
	case OUTPUT:
		*pu8_portDirectionPointer |= u8_pins;
    2e40:	e9 81       	ldd	r30, Y+1	; 0x01
    2e42:	fa 81       	ldd	r31, Y+2	; 0x02
    2e44:	90 81       	ld	r25, Z
    2e46:	8c 81       	ldd	r24, Y+4	; 0x04
    2e48:	89 2b       	or	r24, r25
    2e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4e:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    2e50:	29 96       	adiw	r28, 0x09	; 9
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <gpioPinWrite>:

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	29 97       	sbiw	r28, 0x09	; 9
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	8b 83       	std	Y+3, r24	; 0x03
    2e78:	6c 83       	std	Y+4, r22	; 0x04
    2e7a:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which pins values are to be changed */
	uint8_t* pu8_portDataPointer = NULL;
    2e7c:	1a 82       	std	Y+2, r1	; 0x02
    2e7e:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	39 87       	std	Y+9, r19	; 0x09
    2e88:	28 87       	std	Y+8, r18	; 0x08
    2e8a:	88 85       	ldd	r24, Y+8	; 0x08
    2e8c:	99 85       	ldd	r25, Y+9	; 0x09
    2e8e:	81 30       	cpi	r24, 0x01	; 1
    2e90:	91 05       	cpc	r25, r1
    2e92:	d1 f0       	breq	.+52     	; 0x2ec8 <gpioPinWrite+0x66>
    2e94:	28 85       	ldd	r18, Y+8	; 0x08
    2e96:	39 85       	ldd	r19, Y+9	; 0x09
    2e98:	22 30       	cpi	r18, 0x02	; 2
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	2c f4       	brge	.+10     	; 0x2ea8 <gpioPinWrite+0x46>
    2e9e:	88 85       	ldd	r24, Y+8	; 0x08
    2ea0:	99 85       	ldd	r25, Y+9	; 0x09
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	61 f0       	breq	.+24     	; 0x2ebe <gpioPinWrite+0x5c>
    2ea6:	1e c0       	rjmp	.+60     	; 0x2ee4 <gpioPinWrite+0x82>
    2ea8:	28 85       	ldd	r18, Y+8	; 0x08
    2eaa:	39 85       	ldd	r19, Y+9	; 0x09
    2eac:	22 30       	cpi	r18, 0x02	; 2
    2eae:	31 05       	cpc	r19, r1
    2eb0:	81 f0       	breq	.+32     	; 0x2ed2 <gpioPinWrite+0x70>
    2eb2:	88 85       	ldd	r24, Y+8	; 0x08
    2eb4:	99 85       	ldd	r25, Y+9	; 0x09
    2eb6:	83 30       	cpi	r24, 0x03	; 3
    2eb8:	91 05       	cpc	r25, r1
    2eba:	81 f0       	breq	.+32     	; 0x2edc <gpioPinWrite+0x7a>
    2ebc:	13 c0       	rjmp	.+38     	; 0x2ee4 <gpioPinWrite+0x82>
	{
	case GPIOA:
		pu8_portDataPointer = (uint8_t*)(&PORTA_DATA);
    2ebe:	8b e3       	ldi	r24, 0x3B	; 59
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	0e c0       	rjmp	.+28     	; 0x2ee4 <gpioPinWrite+0x82>
		break;
	case GPIOB:
		pu8_portDataPointer = (uint8_t*)(&PORTB_DATA);
    2ec8:	88 e3       	ldi	r24, 0x38	; 56
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	09 c0       	rjmp	.+18     	; 0x2ee4 <gpioPinWrite+0x82>
		break;
	case GPIOC:
		pu8_portDataPointer = (uint8_t*)(&PORTC_DATA);
    2ed2:	85 e3       	ldi	r24, 0x35	; 53
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9a 83       	std	Y+2, r25	; 0x02
    2ed8:	89 83       	std	Y+1, r24	; 0x01
    2eda:	04 c0       	rjmp	.+8      	; 0x2ee4 <gpioPinWrite+0x82>
		break;
	case GPIOD:
		pu8_portDataPointer = (uint8_t*)(&PORTD_DATA);
    2edc:	82 e3       	ldi	r24, 0x32	; 50
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the bits values are to be high or low */
	switch(u8_value)
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	3f 83       	std	Y+7, r19	; 0x07
    2eec:	2e 83       	std	Y+6, r18	; 0x06
    2eee:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	31 f0       	breq	.+12     	; 0x2f02 <gpioPinWrite+0xa0>
    2ef6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ef8:	3f 81       	ldd	r19, Y+7	; 0x07
    2efa:	2f 3f       	cpi	r18, 0xFF	; 255
    2efc:	31 05       	cpc	r19, r1
    2efe:	61 f0       	breq	.+24     	; 0x2f18 <gpioPinWrite+0xb6>
    2f00:	13 c0       	rjmp	.+38     	; 0x2f28 <gpioPinWrite+0xc6>
	{
	case LOW:
		*pu8_portDataPointer &= ~u8_pins;
    2f02:	e9 81       	ldd	r30, Y+1	; 0x01
    2f04:	fa 81       	ldd	r31, Y+2	; 0x02
    2f06:	80 81       	ld	r24, Z
    2f08:	98 2f       	mov	r25, r24
    2f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0c:	80 95       	com	r24
    2f0e:	89 23       	and	r24, r25
    2f10:	e9 81       	ldd	r30, Y+1	; 0x01
    2f12:	fa 81       	ldd	r31, Y+2	; 0x02
    2f14:	80 83       	st	Z, r24
    2f16:	08 c0       	rjmp	.+16     	; 0x2f28 <gpioPinWrite+0xc6>
		break;
	case HIGH:
		*pu8_portDataPointer |= u8_pins;
    2f18:	e9 81       	ldd	r30, Y+1	; 0x01
    2f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1c:	90 81       	ld	r25, Z
    2f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f20:	89 2b       	or	r24, r25
    2f22:	e9 81       	ldd	r30, Y+1	; 0x01
    2f24:	fa 81       	ldd	r31, Y+2	; 0x02
    2f26:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    2f28:	29 96       	adiw	r28, 0x09	; 9
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <gpioPinToggle+0x6>
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <gpioPinToggle+0x8>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	89 83       	std	Y+1, r24	; 0x01
    2f48:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to toggle its pins */
	switch(u8_port)
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	3c 83       	std	Y+4, r19	; 0x04
    2f52:	2b 83       	std	Y+3, r18	; 0x03
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	f1 f0       	breq	.+60     	; 0x2f9a <gpioPinToggle+0x60>
    2f5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f60:	3c 81       	ldd	r19, Y+4	; 0x04
    2f62:	22 30       	cpi	r18, 0x02	; 2
    2f64:	31 05       	cpc	r19, r1
    2f66:	2c f4       	brge	.+10     	; 0x2f72 <gpioPinToggle+0x38>
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	61 f0       	breq	.+24     	; 0x2f88 <gpioPinToggle+0x4e>
    2f70:	2e c0       	rjmp	.+92     	; 0x2fce <gpioPinToggle+0x94>
    2f72:	2b 81       	ldd	r18, Y+3	; 0x03
    2f74:	3c 81       	ldd	r19, Y+4	; 0x04
    2f76:	22 30       	cpi	r18, 0x02	; 2
    2f78:	31 05       	cpc	r19, r1
    2f7a:	c1 f0       	breq	.+48     	; 0x2fac <gpioPinToggle+0x72>
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f80:	83 30       	cpi	r24, 0x03	; 3
    2f82:	91 05       	cpc	r25, r1
    2f84:	e1 f0       	breq	.+56     	; 0x2fbe <gpioPinToggle+0x84>
    2f86:	23 c0       	rjmp	.+70     	; 0x2fce <gpioPinToggle+0x94>
	{
	case GPIOA:
		PORTA_DATA ^= u8_pins;
    2f88:	ab e3       	ldi	r26, 0x3B	; 59
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	eb e3       	ldi	r30, 0x3B	; 59
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	90 81       	ld	r25, Z
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
    2f94:	89 27       	eor	r24, r25
    2f96:	8c 93       	st	X, r24
    2f98:	1a c0       	rjmp	.+52     	; 0x2fce <gpioPinToggle+0x94>
		break;
	case GPIOB:
		PORTB_DATA ^= u8_pins;
    2f9a:	a8 e3       	ldi	r26, 0x38	; 56
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	e8 e3       	ldi	r30, 0x38	; 56
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	90 81       	ld	r25, Z
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	89 27       	eor	r24, r25
    2fa8:	8c 93       	st	X, r24
    2faa:	11 c0       	rjmp	.+34     	; 0x2fce <gpioPinToggle+0x94>
		break;
	case GPIOC:
		PORTC_DATA ^= u8_pins;
    2fac:	a5 e3       	ldi	r26, 0x35	; 53
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e5 e3       	ldi	r30, 0x35	; 53
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	90 81       	ld	r25, Z
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	89 27       	eor	r24, r25
    2fba:	8c 93       	st	X, r24
    2fbc:	08 c0       	rjmp	.+16     	; 0x2fce <gpioPinToggle+0x94>
		break;
	case GPIOD:
		PORTD_DATA ^= u8_pins;
    2fbe:	a2 e3       	ldi	r26, 0x32	; 50
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e2 e3       	ldi	r30, 0x32	; 50
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	90 81       	ld	r25, Z
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	89 27       	eor	r24, r25
    2fcc:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	29 97       	sbiw	r28, 0x09	; 9
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	89 83       	std	Y+1, r24	; 0x01
    2ff2:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to read its pin */
	switch(u8_port)
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	28 2f       	mov	r18, r24
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	3d 83       	std	Y+5, r19	; 0x05
    2ffc:	2c 83       	std	Y+4, r18	; 0x04
    2ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    3000:	9d 81       	ldd	r25, Y+5	; 0x05
    3002:	81 30       	cpi	r24, 0x01	; 1
    3004:	91 05       	cpc	r25, r1
    3006:	19 f1       	breq	.+70     	; 0x304e <gpioPinRead+0x72>
    3008:	2c 81       	ldd	r18, Y+4	; 0x04
    300a:	3d 81       	ldd	r19, Y+5	; 0x05
    300c:	22 30       	cpi	r18, 0x02	; 2
    300e:	31 05       	cpc	r19, r1
    3010:	2c f4       	brge	.+10     	; 0x301c <gpioPinRead+0x40>
    3012:	8c 81       	ldd	r24, Y+4	; 0x04
    3014:	9d 81       	ldd	r25, Y+5	; 0x05
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	61 f0       	breq	.+24     	; 0x3032 <gpioPinRead+0x56>
    301a:	43 c0       	rjmp	.+134    	; 0x30a2 <gpioPinRead+0xc6>
    301c:	2c 81       	ldd	r18, Y+4	; 0x04
    301e:	3d 81       	ldd	r19, Y+5	; 0x05
    3020:	22 30       	cpi	r18, 0x02	; 2
    3022:	31 05       	cpc	r19, r1
    3024:	11 f1       	breq	.+68     	; 0x306a <gpioPinRead+0x8e>
    3026:	8c 81       	ldd	r24, Y+4	; 0x04
    3028:	9d 81       	ldd	r25, Y+5	; 0x05
    302a:	83 30       	cpi	r24, 0x03	; 3
    302c:	91 05       	cpc	r25, r1
    302e:	59 f1       	breq	.+86     	; 0x3086 <gpioPinRead+0xaa>
    3030:	38 c0       	rjmp	.+112    	; 0x30a2 <gpioPinRead+0xc6>
	{
	case GPIOA:
		return ((PORTA_PIN & u8_pin)? 1:0);
    3032:	e9 e3       	ldi	r30, 0x39	; 57
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	90 81       	ld	r25, Z
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	89 23       	and	r24, r25
    303c:	8e 83       	std	Y+6, r24	; 0x06
    303e:	9e 81       	ldd	r25, Y+6	; 0x06
    3040:	99 23       	and	r25, r25
    3042:	11 f0       	breq	.+4      	; 0x3048 <gpioPinRead+0x6c>
    3044:	21 e0       	ldi	r18, 0x01	; 1
    3046:	2e 83       	std	Y+6, r18	; 0x06
    3048:	3e 81       	ldd	r19, Y+6	; 0x06
    304a:	3b 83       	std	Y+3, r19	; 0x03
    304c:	2c c0       	rjmp	.+88     	; 0x30a6 <gpioPinRead+0xca>
		break;
	case GPIOB:
		return ((PORTB_PIN & u8_pin)? 1:0);
    304e:	e6 e3       	ldi	r30, 0x36	; 54
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	90 81       	ld	r25, Z
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	89 23       	and	r24, r25
    3058:	8f 83       	std	Y+7, r24	; 0x07
    305a:	8f 81       	ldd	r24, Y+7	; 0x07
    305c:	88 23       	and	r24, r24
    305e:	11 f0       	breq	.+4      	; 0x3064 <gpioPinRead+0x88>
    3060:	91 e0       	ldi	r25, 0x01	; 1
    3062:	9f 83       	std	Y+7, r25	; 0x07
    3064:	2f 81       	ldd	r18, Y+7	; 0x07
    3066:	2b 83       	std	Y+3, r18	; 0x03
    3068:	1e c0       	rjmp	.+60     	; 0x30a6 <gpioPinRead+0xca>
		break;
	case GPIOC:
		return ((PORTC_PIN & u8_pin)? 1:0);
    306a:	e3 e3       	ldi	r30, 0x33	; 51
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	90 81       	ld	r25, Z
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	89 23       	and	r24, r25
    3074:	88 87       	std	Y+8, r24	; 0x08
    3076:	38 85       	ldd	r19, Y+8	; 0x08
    3078:	33 23       	and	r19, r19
    307a:	11 f0       	breq	.+4      	; 0x3080 <gpioPinRead+0xa4>
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	88 87       	std	Y+8, r24	; 0x08
    3080:	98 85       	ldd	r25, Y+8	; 0x08
    3082:	9b 83       	std	Y+3, r25	; 0x03
    3084:	10 c0       	rjmp	.+32     	; 0x30a6 <gpioPinRead+0xca>
		break;
	case GPIOD:
		return ((PORTD_PIN & u8_pin)? 1:0);
    3086:	e0 e3       	ldi	r30, 0x30	; 48
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	90 81       	ld	r25, Z
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	89 23       	and	r24, r25
    3090:	89 87       	std	Y+9, r24	; 0x09
    3092:	29 85       	ldd	r18, Y+9	; 0x09
    3094:	22 23       	and	r18, r18
    3096:	11 f0       	breq	.+4      	; 0x309c <gpioPinRead+0xc0>
    3098:	31 e0       	ldi	r19, 0x01	; 1
    309a:	39 87       	std	Y+9, r19	; 0x09
    309c:	89 85       	ldd	r24, Y+9	; 0x09
    309e:	8b 83       	std	Y+3, r24	; 0x03
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <gpioPinRead+0xca>
		break;
	default:
		return ERROR;
    30a2:	9f ef       	ldi	r25, 0xFF	; 255
    30a4:	9b 83       	std	Y+3, r25	; 0x03
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
}
    30a8:	29 96       	adiw	r28, 0x09	; 9
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	08 95       	ret

000030ba <Led_Init>:
#include "ledConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void Led_Init(En_LedNumber_t en_led_id)
{
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <Led_Init+0x6>
    30c0:	0f 92       	push	r0
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be initialized */
	switch(en_led_id)
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	3b 83       	std	Y+3, r19	; 0x03
    30d0:	2a 83       	std	Y+2, r18	; 0x02
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	9b 81       	ldd	r25, Y+3	; 0x03
    30d6:	81 30       	cpi	r24, 0x01	; 1
    30d8:	91 05       	cpc	r25, r1
    30da:	d9 f0       	breq	.+54     	; 0x3112 <Led_Init+0x58>
    30dc:	2a 81       	ldd	r18, Y+2	; 0x02
    30de:	3b 81       	ldd	r19, Y+3	; 0x03
    30e0:	22 30       	cpi	r18, 0x02	; 2
    30e2:	31 05       	cpc	r19, r1
    30e4:	2c f4       	brge	.+10     	; 0x30f0 <Led_Init+0x36>
    30e6:	8a 81       	ldd	r24, Y+2	; 0x02
    30e8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	61 f0       	breq	.+24     	; 0x3106 <Led_Init+0x4c>
    30ee:	22 c0       	rjmp	.+68     	; 0x3134 <Led_Init+0x7a>
    30f0:	2a 81       	ldd	r18, Y+2	; 0x02
    30f2:	3b 81       	ldd	r19, Y+3	; 0x03
    30f4:	22 30       	cpi	r18, 0x02	; 2
    30f6:	31 05       	cpc	r19, r1
    30f8:	91 f0       	breq	.+36     	; 0x311e <Led_Init+0x64>
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	9b 81       	ldd	r25, Y+3	; 0x03
    30fe:	83 30       	cpi	r24, 0x03	; 3
    3100:	91 05       	cpc	r25, r1
    3102:	99 f0       	breq	.+38     	; 0x312a <Led_Init+0x70>
    3104:	17 c0       	rjmp	.+46     	; 0x3134 <Led_Init+0x7a>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	60 e1       	ldi	r22, 0x10	; 16
    310a:	4f ef       	ldi	r20, 0xFF	; 255
    310c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
    3110:	11 c0       	rjmp	.+34     	; 0x3134 <Led_Init+0x7a>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	60 e2       	ldi	r22, 0x20	; 32
    3116:	4f ef       	ldi	r20, 0xFF	; 255
    3118:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
    311c:	0b c0       	rjmp	.+22     	; 0x3134 <Led_Init+0x7a>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	60 e4       	ldi	r22, 0x40	; 64
    3122:	4f ef       	ldi	r20, 0xFF	; 255
    3124:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
    3128:	05 c0       	rjmp	.+10     	; 0x3134 <Led_Init+0x7a>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	60 e8       	ldi	r22, 0x80	; 128
    312e:	4f ef       	ldi	r20, 0xFF	; 255
    3130:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		break;
	default:

		break;
	}
}
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	0f 90       	pop	r0
    313a:	cf 91       	pop	r28
    313c:	df 91       	pop	r29
    313e:	08 95       	ret

00003140 <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	00 d0       	rcall	.+0      	; 0x3146 <Led_On+0x6>
    3146:	0f 92       	push	r0
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned on */
	switch(en_led_id)
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	28 2f       	mov	r18, r24
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	3b 83       	std	Y+3, r19	; 0x03
    3156:	2a 83       	std	Y+2, r18	; 0x02
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	9b 81       	ldd	r25, Y+3	; 0x03
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	91 05       	cpc	r25, r1
    3160:	d9 f0       	breq	.+54     	; 0x3198 <Led_On+0x58>
    3162:	2a 81       	ldd	r18, Y+2	; 0x02
    3164:	3b 81       	ldd	r19, Y+3	; 0x03
    3166:	22 30       	cpi	r18, 0x02	; 2
    3168:	31 05       	cpc	r19, r1
    316a:	2c f4       	brge	.+10     	; 0x3176 <Led_On+0x36>
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	9b 81       	ldd	r25, Y+3	; 0x03
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	61 f0       	breq	.+24     	; 0x318c <Led_On+0x4c>
    3174:	22 c0       	rjmp	.+68     	; 0x31ba <Led_On+0x7a>
    3176:	2a 81       	ldd	r18, Y+2	; 0x02
    3178:	3b 81       	ldd	r19, Y+3	; 0x03
    317a:	22 30       	cpi	r18, 0x02	; 2
    317c:	31 05       	cpc	r19, r1
    317e:	91 f0       	breq	.+36     	; 0x31a4 <Led_On+0x64>
    3180:	8a 81       	ldd	r24, Y+2	; 0x02
    3182:	9b 81       	ldd	r25, Y+3	; 0x03
    3184:	83 30       	cpi	r24, 0x03	; 3
    3186:	91 05       	cpc	r25, r1
    3188:	99 f0       	breq	.+38     	; 0x31b0 <Led_On+0x70>
    318a:	17 c0       	rjmp	.+46     	; 0x31ba <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, HIGH);
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	60 e1       	ldi	r22, 0x10	; 16
    3190:	4f ef       	ldi	r20, 0xFF	; 255
    3192:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    3196:	11 c0       	rjmp	.+34     	; 0x31ba <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, HIGH);
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	60 e2       	ldi	r22, 0x20	; 32
    319c:	4f ef       	ldi	r20, 0xFF	; 255
    319e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    31a2:	0b c0       	rjmp	.+22     	; 0x31ba <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, HIGH);
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	60 e4       	ldi	r22, 0x40	; 64
    31a8:	4f ef       	ldi	r20, 0xFF	; 255
    31aa:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    31ae:	05 c0       	rjmp	.+10     	; 0x31ba <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, HIGH);
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	60 e8       	ldi	r22, 0x80	; 128
    31b4:	4f ef       	ldi	r20, 0xFF	; 255
    31b6:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		break;
	default:

		break;
	}
}
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	00 d0       	rcall	.+0      	; 0x31cc <Led_Off+0x6>
    31cc:	0f 92       	push	r0
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned off */
	switch(en_led_id)
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	28 2f       	mov	r18, r24
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	3b 83       	std	Y+3, r19	; 0x03
    31dc:	2a 83       	std	Y+2, r18	; 0x02
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	9b 81       	ldd	r25, Y+3	; 0x03
    31e2:	81 30       	cpi	r24, 0x01	; 1
    31e4:	91 05       	cpc	r25, r1
    31e6:	d9 f0       	breq	.+54     	; 0x321e <Led_Off+0x58>
    31e8:	2a 81       	ldd	r18, Y+2	; 0x02
    31ea:	3b 81       	ldd	r19, Y+3	; 0x03
    31ec:	22 30       	cpi	r18, 0x02	; 2
    31ee:	31 05       	cpc	r19, r1
    31f0:	2c f4       	brge	.+10     	; 0x31fc <Led_Off+0x36>
    31f2:	8a 81       	ldd	r24, Y+2	; 0x02
    31f4:	9b 81       	ldd	r25, Y+3	; 0x03
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	61 f0       	breq	.+24     	; 0x3212 <Led_Off+0x4c>
    31fa:	22 c0       	rjmp	.+68     	; 0x3240 <Led_Off+0x7a>
    31fc:	2a 81       	ldd	r18, Y+2	; 0x02
    31fe:	3b 81       	ldd	r19, Y+3	; 0x03
    3200:	22 30       	cpi	r18, 0x02	; 2
    3202:	31 05       	cpc	r19, r1
    3204:	91 f0       	breq	.+36     	; 0x322a <Led_Off+0x64>
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	9b 81       	ldd	r25, Y+3	; 0x03
    320a:	83 30       	cpi	r24, 0x03	; 3
    320c:	91 05       	cpc	r25, r1
    320e:	99 f0       	breq	.+38     	; 0x3236 <Led_Off+0x70>
    3210:	17 c0       	rjmp	.+46     	; 0x3240 <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	60 e1       	ldi	r22, 0x10	; 16
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    321c:	11 c0       	rjmp	.+34     	; 0x3240 <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	60 e2       	ldi	r22, 0x20	; 32
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    3228:	0b c0       	rjmp	.+22     	; 0x3240 <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	60 e4       	ldi	r22, 0x40	; 64
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
    3234:	05 c0       	rjmp	.+10     	; 0x3240 <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	60 e8       	ldi	r22, 0x80	; 128
    323a:	40 e0       	ldi	r20, 0x00	; 0
    323c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		break;
	default:

		break;
	}
}
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	00 d0       	rcall	.+0      	; 0x3252 <Led_Toggle+0x6>
    3252:	0f 92       	push	r0
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be toggled */
	switch(en_led_id)
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	3b 83       	std	Y+3, r19	; 0x03
    3262:	2a 83       	std	Y+2, r18	; 0x02
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	81 30       	cpi	r24, 0x01	; 1
    326a:	91 05       	cpc	r25, r1
    326c:	d1 f0       	breq	.+52     	; 0x32a2 <Led_Toggle+0x56>
    326e:	2a 81       	ldd	r18, Y+2	; 0x02
    3270:	3b 81       	ldd	r19, Y+3	; 0x03
    3272:	22 30       	cpi	r18, 0x02	; 2
    3274:	31 05       	cpc	r19, r1
    3276:	2c f4       	brge	.+10     	; 0x3282 <Led_Toggle+0x36>
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	9b 81       	ldd	r25, Y+3	; 0x03
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	61 f0       	breq	.+24     	; 0x3298 <Led_Toggle+0x4c>
    3280:	1e c0       	rjmp	.+60     	; 0x32be <Led_Toggle+0x72>
    3282:	2a 81       	ldd	r18, Y+2	; 0x02
    3284:	3b 81       	ldd	r19, Y+3	; 0x03
    3286:	22 30       	cpi	r18, 0x02	; 2
    3288:	31 05       	cpc	r19, r1
    328a:	81 f0       	breq	.+32     	; 0x32ac <Led_Toggle+0x60>
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	9b 81       	ldd	r25, Y+3	; 0x03
    3290:	83 30       	cpi	r24, 0x03	; 3
    3292:	91 05       	cpc	r25, r1
    3294:	81 f0       	breq	.+32     	; 0x32b6 <Led_Toggle+0x6a>
    3296:	13 c0       	rjmp	.+38     	; 0x32be <Led_Toggle+0x72>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	60 e1       	ldi	r22, 0x10	; 16
    329c:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <gpioPinToggle>
    32a0:	0e c0       	rjmp	.+28     	; 0x32be <Led_Toggle+0x72>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	60 e2       	ldi	r22, 0x20	; 32
    32a6:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <gpioPinToggle>
    32aa:	09 c0       	rjmp	.+18     	; 0x32be <Led_Toggle+0x72>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	60 e4       	ldi	r22, 0x40	; 64
    32b0:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <gpioPinToggle>
    32b4:	04 c0       	rjmp	.+8      	; 0x32be <Led_Toggle+0x72>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	60 e8       	ldi	r22, 0x80	; 128
    32ba:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <gpioPinToggle>
		break;
	default:

		break;
	}
}
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <pushButtonInit>:
#include "pushButtonConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void pushButtonInit(En_buttonId_t en_button_id)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <pushButtonInit+0x6>
    32d0:	0f 92       	push	r0
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to be initialized */
	switch(en_button_id)
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	28 2f       	mov	r18, r24
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	3b 83       	std	Y+3, r19	; 0x03
    32e0:	2a 83       	std	Y+2, r18	; 0x02
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	9b 81       	ldd	r25, Y+3	; 0x03
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	31 f0       	breq	.+12     	; 0x32f6 <pushButtonInit+0x2c>
    32ea:	2a 81       	ldd	r18, Y+2	; 0x02
    32ec:	3b 81       	ldd	r19, Y+3	; 0x03
    32ee:	21 30       	cpi	r18, 0x01	; 1
    32f0:	31 05       	cpc	r19, r1
    32f2:	39 f0       	breq	.+14     	; 0x3302 <pushButtonInit+0x38>
    32f4:	0b c0       	rjmp	.+22     	; 0x330c <pushButtonInit+0x42>
	{
	case BTN_0:
		gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	60 e1       	ldi	r22, 0x10	; 16
    32fa:	40 e0       	ldi	r20, 0x00	; 0
    32fc:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
    3300:	05 c0       	rjmp	.+10     	; 0x330c <pushButtonInit+0x42>
		break;
	case BTN_1:
		gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	64 e0       	ldi	r22, 0x04	; 4
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		break;
	default:

		break;
	}
}
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <pushButtonUpdate>:

void pushButtonUpdate(void)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
	/* Postponed */
}
    3320:	cf 91       	pop	r28
    3322:	df 91       	pop	r29
    3324:	08 95       	ret

00003326 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_button_id)
{
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	00 d0       	rcall	.+0      	; 0x332c <pushButtonGetStatus+0x6>
    332c:	00 d0       	rcall	.+0      	; 0x332e <pushButtonGetStatus+0x8>
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to read its status (pressed or released) */
	switch(en_button_id)
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	28 2f       	mov	r18, r24
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	3c 83       	std	Y+4, r19	; 0x04
    333c:	2b 83       	std	Y+3, r18	; 0x03
    333e:	8b 81       	ldd	r24, Y+3	; 0x03
    3340:	9c 81       	ldd	r25, Y+4	; 0x04
    3342:	81 30       	cpi	r24, 0x01	; 1
    3344:	91 05       	cpc	r25, r1
    3346:	71 f1       	breq	.+92     	; 0x33a4 <pushButtonGetStatus+0x7e>
    3348:	2b 81       	ldd	r18, Y+3	; 0x03
    334a:	3c 81       	ldd	r19, Y+4	; 0x04
    334c:	22 30       	cpi	r18, 0x02	; 2
    334e:	31 05       	cpc	r19, r1
    3350:	2c f4       	brge	.+10     	; 0x335c <pushButtonGetStatus+0x36>
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	9c 81       	ldd	r25, Y+4	; 0x04
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	61 f0       	breq	.+24     	; 0x3372 <pushButtonGetStatus+0x4c>
    335a:	43 c0       	rjmp	.+134    	; 0x33e2 <pushButtonGetStatus+0xbc>
    335c:	2b 81       	ldd	r18, Y+3	; 0x03
    335e:	3c 81       	ldd	r19, Y+4	; 0x04
    3360:	22 30       	cpi	r18, 0x02	; 2
    3362:	31 05       	cpc	r19, r1
    3364:	c1 f1       	breq	.+112    	; 0x33d6 <pushButtonGetStatus+0xb0>
    3366:	8b 81       	ldd	r24, Y+3	; 0x03
    3368:	9c 81       	ldd	r25, Y+4	; 0x04
    336a:	83 30       	cpi	r24, 0x03	; 3
    336c:	91 05       	cpc	r25, r1
    336e:	b1 f1       	breq	.+108    	; 0x33dc <pushButtonGetStatus+0xb6>
    3370:	38 c0       	rjmp	.+112    	; 0x33e2 <pushButtonGetStatus+0xbc>
	{
	case BTN_0:
		if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    3372:	82 e0       	ldi	r24, 0x02	; 2
    3374:	60 e1       	ldi	r22, 0x10	; 16
    3376:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <gpioPinRead>
    337a:	88 23       	and	r24, r24
    337c:	89 f0       	breq	.+34     	; 0x33a0 <pushButtonGetStatus+0x7a>
		{
			softwareDelayMs(20);
    337e:	64 e1       	ldi	r22, 0x14	; 20
    3380:	70 e0       	ldi	r23, 0x00	; 0
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <softwareDelayMs>
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    338a:	82 e0       	ldi	r24, 0x02	; 2
    338c:	60 e1       	ldi	r22, 0x10	; 16
    338e:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <gpioPinRead>
    3392:	88 23       	and	r24, r24
    3394:	19 f0       	breq	.+6      	; 0x339c <pushButtonGetStatus+0x76>
			{
				return Pressed;
    3396:	92 e0       	ldi	r25, 0x02	; 2
    3398:	9a 83       	std	Y+2, r25	; 0x02
    339a:	25 c0       	rjmp	.+74     	; 0x33e6 <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    339c:	1a 82       	std	Y+2, r1	; 0x02
    339e:	23 c0       	rjmp	.+70     	; 0x33e6 <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    33a0:	1a 82       	std	Y+2, r1	; 0x02
    33a2:	21 c0       	rjmp	.+66     	; 0x33e6 <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_1:
		if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	64 e0       	ldi	r22, 0x04	; 4
    33a8:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <gpioPinRead>
    33ac:	88 23       	and	r24, r24
    33ae:	89 f0       	breq	.+34     	; 0x33d2 <pushButtonGetStatus+0xac>
		{
			softwareDelayMs(20);
    33b0:	64 e1       	ldi	r22, 0x14	; 20
    33b2:	70 e0       	ldi	r23, 0x00	; 0
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <softwareDelayMs>
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	64 e0       	ldi	r22, 0x04	; 4
    33c0:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <gpioPinRead>
    33c4:	88 23       	and	r24, r24
    33c6:	19 f0       	breq	.+6      	; 0x33ce <pushButtonGetStatus+0xa8>
			{
				return Pressed;
    33c8:	22 e0       	ldi	r18, 0x02	; 2
    33ca:	2a 83       	std	Y+2, r18	; 0x02
    33cc:	0c c0       	rjmp	.+24     	; 0x33e6 <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    33ce:	1a 82       	std	Y+2, r1	; 0x02
    33d0:	0a c0       	rjmp	.+20     	; 0x33e6 <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    33d2:	1a 82       	std	Y+2, r1	; 0x02
    33d4:	08 c0       	rjmp	.+16     	; 0x33e6 <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_2:
		return ERROR;
    33d6:	3f ef       	ldi	r19, 0xFF	; 255
    33d8:	3a 83       	std	Y+2, r19	; 0x02
    33da:	05 c0       	rjmp	.+10     	; 0x33e6 <pushButtonGetStatus+0xc0>
		break;
	case BTN_3:
		return ERROR;
    33dc:	8f ef       	ldi	r24, 0xFF	; 255
    33de:	8a 83       	std	Y+2, r24	; 0x02
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <pushButtonGetStatus+0xc0>
		break;
	default:
		return ERROR;
    33e2:	9f ef       	ldi	r25, 0xFF	; 255
    33e4:	9a 83       	std	Y+2, r25	; 0x02
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	08 95       	ret

000033f6 <sevenSegInit>:
static uint8_t gu8_sevenSeg1Status = HIGH;

/*- APIs IMPLEMENTATION ------------------------------------*/

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	00 d0       	rcall	.+0      	; 0x33fc <sevenSegInit+0x6>
    33fc:	0f 92       	push	r0
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be initialized */
	switch(a_segment_id)
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	3b 83       	std	Y+3, r19	; 0x03
    340c:	2a 83       	std	Y+2, r18	; 0x02
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	9b 81       	ldd	r25, Y+3	; 0x03
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	31 f0       	breq	.+12     	; 0x3422 <sevenSegInit+0x2c>
    3416:	2a 81       	ldd	r18, Y+2	; 0x02
    3418:	3b 81       	ldd	r19, Y+3	; 0x03
    341a:	21 30       	cpi	r18, 0x01	; 1
    341c:	31 05       	cpc	r19, r1
    341e:	c9 f0       	breq	.+50     	; 0x3452 <sevenSegInit+0x5c>
    3420:	2f c0       	rjmp	.+94     	; 0x3480 <sevenSegInit+0x8a>
	{
	case SEG_0:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	6f e0       	ldi	r22, 0x0F	; 15
    3426:	4f ef       	ldi	r20, 0xFF	; 255
    3428:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT2 | BIT4), OUTPUT);
    342c:	83 e0       	ldi	r24, 0x03	; 3
    342e:	64 e1       	ldi	r22, 0x14	; 20
    3430:	4f ef       	ldi	r20, 0xFF	; 255
    3432:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	6f e0       	ldi	r22, 0x0F	; 15
    343a:	40 e0       	ldi	r20, 0x00	; 0
    343c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    3440:	83 e0       	ldi	r24, 0x03	; 3
    3442:	60 e1       	ldi	r22, 0x10	; 16
    3444:	40 e0       	ldi	r20, 0x00	; 0
    3446:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		sevenSegDisable(SEG_0);
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <sevenSegDisable>
    3450:	17 c0       	rjmp	.+46     	; 0x3480 <sevenSegInit+0x8a>
		break;
	case SEG_1:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	6f e0       	ldi	r22, 0x0F	; 15
    3456:	4f ef       	ldi	r20, 0xFF	; 255
    3458:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT3 | BIT4), OUTPUT);
    345c:	83 e0       	ldi	r24, 0x03	; 3
    345e:	68 e1       	ldi	r22, 0x18	; 24
    3460:	4f ef       	ldi	r20, 0xFF	; 255
    3462:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	6f e0       	ldi	r22, 0x0F	; 15
    346a:	40 e0       	ldi	r20, 0x00	; 0
    346c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    3470:	83 e0       	ldi	r24, 0x03	; 3
    3472:	60 e1       	ldi	r22, 0x10	; 16
    3474:	40 e0       	ldi	r20, 0x00	; 0
    3476:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		sevenSegDisable(SEG_1);
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <sevenSegDisable>
		break;
	}
}
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	cf 91       	pop	r28
    3488:	df 91       	pop	r29
    348a:	08 95       	ret

0000348c <sevenSegEnable>:

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	00 d0       	rcall	.+0      	; 0x3492 <sevenSegEnable+0x6>
    3492:	0f 92       	push	r0
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be enabled */
	switch(en_segment_id)
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	28 2f       	mov	r18, r24
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	3b 83       	std	Y+3, r19	; 0x03
    34a2:	2a 83       	std	Y+2, r18	; 0x02
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	9b 81       	ldd	r25, Y+3	; 0x03
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	31 f0       	breq	.+12     	; 0x34b8 <sevenSegEnable+0x2c>
    34ac:	2a 81       	ldd	r18, Y+2	; 0x02
    34ae:	3b 81       	ldd	r19, Y+3	; 0x03
    34b0:	21 30       	cpi	r18, 0x01	; 1
    34b2:	31 05       	cpc	r19, r1
    34b4:	51 f0       	breq	.+20     	; 0x34ca <sevenSegEnable+0x3e>
    34b6:	11 c0       	rjmp	.+34     	; 0x34da <sevenSegEnable+0x4e>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, LOW);
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	64 e0       	ldi	r22, 0x04	; 4
    34bc:	40 e0       	ldi	r20, 0x00	; 0
    34be:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		gu8_sevenSeg0Status = HIGH;
    34c2:	8f ef       	ldi	r24, 0xFF	; 255
    34c4:	80 93 7b 00 	sts	0x007B, r24
    34c8:	08 c0       	rjmp	.+16     	; 0x34da <sevenSegEnable+0x4e>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, LOW);
    34ca:	83 e0       	ldi	r24, 0x03	; 3
    34cc:	68 e0       	ldi	r22, 0x08	; 8
    34ce:	40 e0       	ldi	r20, 0x00	; 0
    34d0:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		gu8_sevenSeg1Status = HIGH;
    34d4:	8f ef       	ldi	r24, 0xFF	; 255
    34d6:	80 93 68 00 	sts	0x0068, r24
		break;
	}
}
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	08 95       	ret

000034e6 <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	00 d0       	rcall	.+0      	; 0x34ec <sevenSegDisable+0x6>
    34ec:	0f 92       	push	r0
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be disabled */
	switch(en_segment_id)
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	28 2f       	mov	r18, r24
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	3b 83       	std	Y+3, r19	; 0x03
    34fc:	2a 83       	std	Y+2, r18	; 0x02
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	9b 81       	ldd	r25, Y+3	; 0x03
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	31 f0       	breq	.+12     	; 0x3512 <sevenSegDisable+0x2c>
    3506:	2a 81       	ldd	r18, Y+2	; 0x02
    3508:	3b 81       	ldd	r19, Y+3	; 0x03
    350a:	21 30       	cpi	r18, 0x01	; 1
    350c:	31 05       	cpc	r19, r1
    350e:	49 f0       	breq	.+18     	; 0x3522 <sevenSegDisable+0x3c>
    3510:	0f c0       	rjmp	.+30     	; 0x3530 <sevenSegDisable+0x4a>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, HIGH);
    3512:	83 e0       	ldi	r24, 0x03	; 3
    3514:	64 e0       	ldi	r22, 0x04	; 4
    3516:	4f ef       	ldi	r20, 0xFF	; 255
    3518:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		gu8_sevenSeg0Status = LOW;
    351c:	10 92 7b 00 	sts	0x007B, r1
    3520:	07 c0       	rjmp	.+14     	; 0x3530 <sevenSegDisable+0x4a>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, HIGH);
    3522:	83 e0       	ldi	r24, 0x03	; 3
    3524:	68 e0       	ldi	r22, 0x08	; 8
    3526:	4f ef       	ldi	r20, 0xFF	; 255
    3528:	0e 94 31 17 	call	0x2e62	; 0x2e62 <gpioPinWrite>
		gu8_sevenSeg1Status = LOW;
    352c:	10 92 68 00 	sts	0x0068, r1
		break;
	}
}
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	cf 91       	pop	r28
    3538:	df 91       	pop	r29
    353a:	08 95       	ret

0000353c <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    353c:	df 93       	push	r29
    353e:	cf 93       	push	r28
    3540:	00 d0       	rcall	.+0      	; 0x3542 <sevenSegWrite+0x6>
    3542:	00 d0       	rcall	.+0      	; 0x3544 <sevenSegWrite+0x8>
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
    3548:	89 83       	std	Y+1, r24	; 0x01
    354a:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which 7seg to be written */
	switch(en_segment_id)
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	28 2f       	mov	r18, r24
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	3c 83       	std	Y+4, r19	; 0x04
    3554:	2b 83       	std	Y+3, r18	; 0x03
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	9c 81       	ldd	r25, Y+4	; 0x04
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	31 f0       	breq	.+12     	; 0x356a <sevenSegWrite+0x2e>
    355e:	2b 81       	ldd	r18, Y+3	; 0x03
    3560:	3c 81       	ldd	r19, Y+4	; 0x04
    3562:	21 30       	cpi	r18, 0x01	; 1
    3564:	31 05       	cpc	r19, r1
    3566:	69 f0       	breq	.+26     	; 0x3582 <sevenSegWrite+0x46>
    3568:	17 c0       	rjmp	.+46     	; 0x3598 <sevenSegWrite+0x5c>
	{
	case SEG_0:
		if(gu8_sevenSeg0Status == HIGH)
    356a:	80 91 7b 00 	lds	r24, 0x007B
    356e:	8f 3f       	cpi	r24, 0xFF	; 255
    3570:	99 f4       	brne	.+38     	; 0x3598 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    3572:	8a 81       	ldd	r24, Y+2	; 0x02
    3574:	98 2f       	mov	r25, r24
    3576:	9f 70       	andi	r25, 0x0F	; 15
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	69 2f       	mov	r22, r25
    357c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <gpioPortWrite>
    3580:	0b c0       	rjmp	.+22     	; 0x3598 <sevenSegWrite+0x5c>
		}
		break;
	case SEG_1:
		if(gu8_sevenSeg1Status == HIGH)
    3582:	80 91 68 00 	lds	r24, 0x0068
    3586:	8f 3f       	cpi	r24, 0xFF	; 255
    3588:	39 f4       	brne	.+14     	; 0x3598 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    358a:	8a 81       	ldd	r24, Y+2	; 0x02
    358c:	98 2f       	mov	r25, r24
    358e:	9f 70       	andi	r25, 0x0F	; 15
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	69 2f       	mov	r22, r25
    3594:	0e 94 f5 15 	call	0x2bea	; 0x2bea <gpioPortWrite>
		}
		break;
	}
}
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <softwareDelayMs>:
#include "softwareDelay.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	60 97       	sbiw	r28, 0x10	; 16
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
    35ba:	6d 87       	std	Y+13, r22	; 0x0d
    35bc:	7e 87       	std	Y+14, r23	; 0x0e
    35be:	8f 87       	std	Y+15, r24	; 0x0f
    35c0:	98 8b       	std	Y+16, r25	; 0x10
	/* 16 MHz */
	uint32_t ticks=388, i, j;
    35c2:	84 e8       	ldi	r24, 0x84	; 132
    35c4:	91 e0       	ldi	r25, 0x01	; 1
    35c6:	a0 e0       	ldi	r26, 0x00	; 0
    35c8:	b0 e0       	ldi	r27, 0x00	; 0
    35ca:	89 87       	std	Y+9, r24	; 0x09
    35cc:	9a 87       	std	Y+10, r25	; 0x0a
    35ce:	ab 87       	std	Y+11, r26	; 0x0b
    35d0:	bc 87       	std	Y+12, r27	; 0x0c
	for(i=0 ; i<u32_delay_in_ms ; i++)
    35d2:	1d 82       	std	Y+5, r1	; 0x05
    35d4:	1e 82       	std	Y+6, r1	; 0x06
    35d6:	1f 82       	std	Y+7, r1	; 0x07
    35d8:	18 86       	std	Y+8, r1	; 0x08
    35da:	28 c0       	rjmp	.+80     	; 0x362c <softwareDelayMs+0x86>
	{
		for(j=0 ; j<ticks ; j++);
    35dc:	19 82       	std	Y+1, r1	; 0x01
    35de:	1a 82       	std	Y+2, r1	; 0x02
    35e0:	1b 82       	std	Y+3, r1	; 0x03
    35e2:	1c 82       	std	Y+4, r1	; 0x04
    35e4:	0b c0       	rjmp	.+22     	; 0x35fc <softwareDelayMs+0x56>
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ea:	ab 81       	ldd	r26, Y+3	; 0x03
    35ec:	bc 81       	ldd	r27, Y+4	; 0x04
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	a1 1d       	adc	r26, r1
    35f2:	b1 1d       	adc	r27, r1
    35f4:	89 83       	std	Y+1, r24	; 0x01
    35f6:	9a 83       	std	Y+2, r25	; 0x02
    35f8:	ab 83       	std	Y+3, r26	; 0x03
    35fa:	bc 83       	std	Y+4, r27	; 0x04
    35fc:	29 81       	ldd	r18, Y+1	; 0x01
    35fe:	3a 81       	ldd	r19, Y+2	; 0x02
    3600:	4b 81       	ldd	r20, Y+3	; 0x03
    3602:	5c 81       	ldd	r21, Y+4	; 0x04
    3604:	89 85       	ldd	r24, Y+9	; 0x09
    3606:	9a 85       	ldd	r25, Y+10	; 0x0a
    3608:	ab 85       	ldd	r26, Y+11	; 0x0b
    360a:	bc 85       	ldd	r27, Y+12	; 0x0c
    360c:	28 17       	cp	r18, r24
    360e:	39 07       	cpc	r19, r25
    3610:	4a 07       	cpc	r20, r26
    3612:	5b 07       	cpc	r21, r27
    3614:	40 f3       	brcs	.-48     	; 0x35e6 <softwareDelayMs+0x40>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	/* 16 MHz */
	uint32_t ticks=388, i, j;
	for(i=0 ; i<u32_delay_in_ms ; i++)
    3616:	8d 81       	ldd	r24, Y+5	; 0x05
    3618:	9e 81       	ldd	r25, Y+6	; 0x06
    361a:	af 81       	ldd	r26, Y+7	; 0x07
    361c:	b8 85       	ldd	r27, Y+8	; 0x08
    361e:	01 96       	adiw	r24, 0x01	; 1
    3620:	a1 1d       	adc	r26, r1
    3622:	b1 1d       	adc	r27, r1
    3624:	8d 83       	std	Y+5, r24	; 0x05
    3626:	9e 83       	std	Y+6, r25	; 0x06
    3628:	af 83       	std	Y+7, r26	; 0x07
    362a:	b8 87       	std	Y+8, r27	; 0x08
    362c:	2d 81       	ldd	r18, Y+5	; 0x05
    362e:	3e 81       	ldd	r19, Y+6	; 0x06
    3630:	4f 81       	ldd	r20, Y+7	; 0x07
    3632:	58 85       	ldd	r21, Y+8	; 0x08
    3634:	8d 85       	ldd	r24, Y+13	; 0x0d
    3636:	9e 85       	ldd	r25, Y+14	; 0x0e
    3638:	af 85       	ldd	r26, Y+15	; 0x0f
    363a:	b8 89       	ldd	r27, Y+16	; 0x10
    363c:	28 17       	cp	r18, r24
    363e:	39 07       	cpc	r19, r25
    3640:	4a 07       	cpc	r20, r26
    3642:	5b 07       	cpc	r21, r27
    3644:	58 f2       	brcs	.-106    	; 0x35dc <softwareDelayMs+0x36>
	{
		for(j=0 ; j<ticks ; j++);
	}
}
    3646:	60 96       	adiw	r28, 0x10	; 16
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	cd bf       	out	0x3d, r28	; 61
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <__vector_10>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(TIMER0_COMP_vect)
{
    3658:	1f 92       	push	r1
    365a:	0f 92       	push	r0
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	0f 92       	push	r0
    3660:	11 24       	eor	r1, r1
    3662:	2f 93       	push	r18
    3664:	3f 93       	push	r19
    3666:	4f 93       	push	r20
    3668:	5f 93       	push	r21
    366a:	6f 93       	push	r22
    366c:	7f 93       	push	r23
    366e:	8f 93       	push	r24
    3670:	9f 93       	push	r25
    3672:	af 93       	push	r26
    3674:	bf 93       	push	r27
    3676:	ef 93       	push	r30
    3678:	ff 93       	push	r31
    367a:	df 93       	push	r29
    367c:	cf 93       	push	r28
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_CTC_callBackPtr != NULL)
    3682:	80 91 7e 00 	lds	r24, 0x007E
    3686:	90 91 7f 00 	lds	r25, 0x007F
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	29 f0       	breq	.+10     	; 0x3698 <__vector_10+0x40>
	{
		g_T0_CTC_callBackPtr();
    368e:	e0 91 7e 00 	lds	r30, 0x007E
    3692:	f0 91 7f 00 	lds	r31, 0x007F
    3696:	09 95       	icall
	}
}
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	ff 91       	pop	r31
    369e:	ef 91       	pop	r30
    36a0:	bf 91       	pop	r27
    36a2:	af 91       	pop	r26
    36a4:	9f 91       	pop	r25
    36a6:	8f 91       	pop	r24
    36a8:	7f 91       	pop	r23
    36aa:	6f 91       	pop	r22
    36ac:	5f 91       	pop	r21
    36ae:	4f 91       	pop	r20
    36b0:	3f 91       	pop	r19
    36b2:	2f 91       	pop	r18
    36b4:	0f 90       	pop	r0
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	0f 90       	pop	r0
    36ba:	1f 90       	pop	r1
    36bc:	18 95       	reti

000036be <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    36be:	1f 92       	push	r1
    36c0:	0f 92       	push	r0
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	0f 92       	push	r0
    36c6:	11 24       	eor	r1, r1
    36c8:	2f 93       	push	r18
    36ca:	3f 93       	push	r19
    36cc:	4f 93       	push	r20
    36ce:	5f 93       	push	r21
    36d0:	6f 93       	push	r22
    36d2:	7f 93       	push	r23
    36d4:	8f 93       	push	r24
    36d6:	9f 93       	push	r25
    36d8:	af 93       	push	r26
    36da:	bf 93       	push	r27
    36dc:	ef 93       	push	r30
    36de:	ff 93       	push	r31
    36e0:	df 93       	push	r29
    36e2:	cf 93       	push	r28
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_OVF_callBackPtr != NULL)
    36e8:	80 91 80 00 	lds	r24, 0x0080
    36ec:	90 91 81 00 	lds	r25, 0x0081
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	29 f0       	breq	.+10     	; 0x36fe <__vector_11+0x40>
	{
		g_T0_OVF_callBackPtr();
    36f4:	e0 91 80 00 	lds	r30, 0x0080
    36f8:	f0 91 81 00 	lds	r31, 0x0081
    36fc:	09 95       	icall
	}
}
    36fe:	cf 91       	pop	r28
    3700:	df 91       	pop	r29
    3702:	ff 91       	pop	r31
    3704:	ef 91       	pop	r30
    3706:	bf 91       	pop	r27
    3708:	af 91       	pop	r26
    370a:	9f 91       	pop	r25
    370c:	8f 91       	pop	r24
    370e:	7f 91       	pop	r23
    3710:	6f 91       	pop	r22
    3712:	5f 91       	pop	r21
    3714:	4f 91       	pop	r20
    3716:	3f 91       	pop	r19
    3718:	2f 91       	pop	r18
    371a:	0f 90       	pop	r0
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	0f 90       	pop	r0
    3720:	1f 90       	pop	r1
    3722:	18 95       	reti

00003724 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    3724:	1f 92       	push	r1
    3726:	0f 92       	push	r0
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	0f 92       	push	r0
    372c:	11 24       	eor	r1, r1
    372e:	2f 93       	push	r18
    3730:	3f 93       	push	r19
    3732:	4f 93       	push	r20
    3734:	5f 93       	push	r21
    3736:	6f 93       	push	r22
    3738:	7f 93       	push	r23
    373a:	8f 93       	push	r24
    373c:	9f 93       	push	r25
    373e:	af 93       	push	r26
    3740:	bf 93       	push	r27
    3742:	ef 93       	push	r30
    3744:	ff 93       	push	r31
    3746:	df 93       	push	r29
    3748:	cf 93       	push	r28
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_ICU_callBackPtr != NULL)
    374e:	80 91 82 00 	lds	r24, 0x0082
    3752:	90 91 83 00 	lds	r25, 0x0083
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	29 f0       	breq	.+10     	; 0x3764 <__vector_6+0x40>
	{
		g_T1_ICU_callBackPtr();
    375a:	e0 91 82 00 	lds	r30, 0x0082
    375e:	f0 91 83 00 	lds	r31, 0x0083
    3762:	09 95       	icall
	}
}
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	ff 91       	pop	r31
    376a:	ef 91       	pop	r30
    376c:	bf 91       	pop	r27
    376e:	af 91       	pop	r26
    3770:	9f 91       	pop	r25
    3772:	8f 91       	pop	r24
    3774:	7f 91       	pop	r23
    3776:	6f 91       	pop	r22
    3778:	5f 91       	pop	r21
    377a:	4f 91       	pop	r20
    377c:	3f 91       	pop	r19
    377e:	2f 91       	pop	r18
    3780:	0f 90       	pop	r0
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	0f 90       	pop	r0
    3786:	1f 90       	pop	r1
    3788:	18 95       	reti

0000378a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    378a:	1f 92       	push	r1
    378c:	0f 92       	push	r0
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	0f 92       	push	r0
    3792:	11 24       	eor	r1, r1
    3794:	2f 93       	push	r18
    3796:	3f 93       	push	r19
    3798:	4f 93       	push	r20
    379a:	5f 93       	push	r21
    379c:	6f 93       	push	r22
    379e:	7f 93       	push	r23
    37a0:	8f 93       	push	r24
    37a2:	9f 93       	push	r25
    37a4:	af 93       	push	r26
    37a6:	bf 93       	push	r27
    37a8:	ef 93       	push	r30
    37aa:	ff 93       	push	r31
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_A_callBackPtr != NULL)
    37b4:	80 91 84 00 	lds	r24, 0x0084
    37b8:	90 91 85 00 	lds	r25, 0x0085
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	29 f0       	breq	.+10     	; 0x37ca <__vector_7+0x40>
	{
		g_T1_CTC_A_callBackPtr();
    37c0:	e0 91 84 00 	lds	r30, 0x0084
    37c4:	f0 91 85 00 	lds	r31, 0x0085
    37c8:	09 95       	icall
	}
}
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	ff 91       	pop	r31
    37d0:	ef 91       	pop	r30
    37d2:	bf 91       	pop	r27
    37d4:	af 91       	pop	r26
    37d6:	9f 91       	pop	r25
    37d8:	8f 91       	pop	r24
    37da:	7f 91       	pop	r23
    37dc:	6f 91       	pop	r22
    37de:	5f 91       	pop	r21
    37e0:	4f 91       	pop	r20
    37e2:	3f 91       	pop	r19
    37e4:	2f 91       	pop	r18
    37e6:	0f 90       	pop	r0
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	0f 90       	pop	r0
    37ec:	1f 90       	pop	r1
    37ee:	18 95       	reti

000037f0 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    37f0:	1f 92       	push	r1
    37f2:	0f 92       	push	r0
    37f4:	0f b6       	in	r0, 0x3f	; 63
    37f6:	0f 92       	push	r0
    37f8:	11 24       	eor	r1, r1
    37fa:	2f 93       	push	r18
    37fc:	3f 93       	push	r19
    37fe:	4f 93       	push	r20
    3800:	5f 93       	push	r21
    3802:	6f 93       	push	r22
    3804:	7f 93       	push	r23
    3806:	8f 93       	push	r24
    3808:	9f 93       	push	r25
    380a:	af 93       	push	r26
    380c:	bf 93       	push	r27
    380e:	ef 93       	push	r30
    3810:	ff 93       	push	r31
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_B_callBackPtr != NULL)
    381a:	80 91 86 00 	lds	r24, 0x0086
    381e:	90 91 87 00 	lds	r25, 0x0087
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	29 f0       	breq	.+10     	; 0x3830 <__vector_8+0x40>
	{
		g_T1_CTC_B_callBackPtr();
    3826:	e0 91 86 00 	lds	r30, 0x0086
    382a:	f0 91 87 00 	lds	r31, 0x0087
    382e:	09 95       	icall
	}
}
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	ff 91       	pop	r31
    3836:	ef 91       	pop	r30
    3838:	bf 91       	pop	r27
    383a:	af 91       	pop	r26
    383c:	9f 91       	pop	r25
    383e:	8f 91       	pop	r24
    3840:	7f 91       	pop	r23
    3842:	6f 91       	pop	r22
    3844:	5f 91       	pop	r21
    3846:	4f 91       	pop	r20
    3848:	3f 91       	pop	r19
    384a:	2f 91       	pop	r18
    384c:	0f 90       	pop	r0
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	0f 90       	pop	r0
    3852:	1f 90       	pop	r1
    3854:	18 95       	reti

00003856 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    3856:	1f 92       	push	r1
    3858:	0f 92       	push	r0
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	0f 92       	push	r0
    385e:	11 24       	eor	r1, r1
    3860:	2f 93       	push	r18
    3862:	3f 93       	push	r19
    3864:	4f 93       	push	r20
    3866:	5f 93       	push	r21
    3868:	6f 93       	push	r22
    386a:	7f 93       	push	r23
    386c:	8f 93       	push	r24
    386e:	9f 93       	push	r25
    3870:	af 93       	push	r26
    3872:	bf 93       	push	r27
    3874:	ef 93       	push	r30
    3876:	ff 93       	push	r31
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_OVF_callBackPtr != NULL)
    3880:	80 91 88 00 	lds	r24, 0x0088
    3884:	90 91 89 00 	lds	r25, 0x0089
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	29 f0       	breq	.+10     	; 0x3896 <__vector_9+0x40>
	{
		g_T1_OVF_callBackPtr();
    388c:	e0 91 88 00 	lds	r30, 0x0088
    3890:	f0 91 89 00 	lds	r31, 0x0089
    3894:	09 95       	icall
	}
}
    3896:	cf 91       	pop	r28
    3898:	df 91       	pop	r29
    389a:	ff 91       	pop	r31
    389c:	ef 91       	pop	r30
    389e:	bf 91       	pop	r27
    38a0:	af 91       	pop	r26
    38a2:	9f 91       	pop	r25
    38a4:	8f 91       	pop	r24
    38a6:	7f 91       	pop	r23
    38a8:	6f 91       	pop	r22
    38aa:	5f 91       	pop	r21
    38ac:	4f 91       	pop	r20
    38ae:	3f 91       	pop	r19
    38b0:	2f 91       	pop	r18
    38b2:	0f 90       	pop	r0
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	0f 90       	pop	r0
    38b8:	1f 90       	pop	r1
    38ba:	18 95       	reti

000038bc <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    38bc:	1f 92       	push	r1
    38be:	0f 92       	push	r0
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	0f 92       	push	r0
    38c4:	11 24       	eor	r1, r1
    38c6:	2f 93       	push	r18
    38c8:	3f 93       	push	r19
    38ca:	4f 93       	push	r20
    38cc:	5f 93       	push	r21
    38ce:	6f 93       	push	r22
    38d0:	7f 93       	push	r23
    38d2:	8f 93       	push	r24
    38d4:	9f 93       	push	r25
    38d6:	af 93       	push	r26
    38d8:	bf 93       	push	r27
    38da:	ef 93       	push	r30
    38dc:	ff 93       	push	r31
    38de:	df 93       	push	r29
    38e0:	cf 93       	push	r28
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_CTC_callBackPtr != NULL)
    38e6:	80 91 8a 00 	lds	r24, 0x008A
    38ea:	90 91 8b 00 	lds	r25, 0x008B
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	29 f0       	breq	.+10     	; 0x38fc <__vector_4+0x40>
	{
		g_T2_CTC_callBackPtr();
    38f2:	e0 91 8a 00 	lds	r30, 0x008A
    38f6:	f0 91 8b 00 	lds	r31, 0x008B
    38fa:	09 95       	icall
	}
}
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	ff 91       	pop	r31
    3902:	ef 91       	pop	r30
    3904:	bf 91       	pop	r27
    3906:	af 91       	pop	r26
    3908:	9f 91       	pop	r25
    390a:	8f 91       	pop	r24
    390c:	7f 91       	pop	r23
    390e:	6f 91       	pop	r22
    3910:	5f 91       	pop	r21
    3912:	4f 91       	pop	r20
    3914:	3f 91       	pop	r19
    3916:	2f 91       	pop	r18
    3918:	0f 90       	pop	r0
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	0f 90       	pop	r0
    391e:	1f 90       	pop	r1
    3920:	18 95       	reti

00003922 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    3922:	1f 92       	push	r1
    3924:	0f 92       	push	r0
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	0f 92       	push	r0
    392a:	11 24       	eor	r1, r1
    392c:	2f 93       	push	r18
    392e:	3f 93       	push	r19
    3930:	4f 93       	push	r20
    3932:	5f 93       	push	r21
    3934:	6f 93       	push	r22
    3936:	7f 93       	push	r23
    3938:	8f 93       	push	r24
    393a:	9f 93       	push	r25
    393c:	af 93       	push	r26
    393e:	bf 93       	push	r27
    3940:	ef 93       	push	r30
    3942:	ff 93       	push	r31
    3944:	df 93       	push	r29
    3946:	cf 93       	push	r28
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_OVF_callBackPtr != NULL)
    394c:	80 91 8c 00 	lds	r24, 0x008C
    3950:	90 91 8d 00 	lds	r25, 0x008D
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	29 f0       	breq	.+10     	; 0x3962 <__vector_5+0x40>
	{
		g_T2_OVF_callBackPtr();
    3958:	e0 91 8c 00 	lds	r30, 0x008C
    395c:	f0 91 8d 00 	lds	r31, 0x008D
    3960:	09 95       	icall
	}
}
    3962:	cf 91       	pop	r28
    3964:	df 91       	pop	r29
    3966:	ff 91       	pop	r31
    3968:	ef 91       	pop	r30
    396a:	bf 91       	pop	r27
    396c:	af 91       	pop	r26
    396e:	9f 91       	pop	r25
    3970:	8f 91       	pop	r24
    3972:	7f 91       	pop	r23
    3974:	6f 91       	pop	r22
    3976:	5f 91       	pop	r21
    3978:	4f 91       	pop	r20
    397a:	3f 91       	pop	r19
    397c:	2f 91       	pop	r18
    397e:	0f 90       	pop	r0
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	0f 90       	pop	r0
    3984:	1f 90       	pop	r1
    3986:	18 95       	reti

00003988 <timer0Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    3988:	ef 92       	push	r14
    398a:	0f 93       	push	r16
    398c:	df 93       	push	r29
    398e:	cf 93       	push	r28
    3990:	00 d0       	rcall	.+0      	; 0x3992 <timer0Init+0xa>
    3992:	00 d0       	rcall	.+0      	; 0x3994 <timer0Init+0xc>
    3994:	00 d0       	rcall	.+0      	; 0x3996 <timer0Init+0xe>
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
    399a:	89 83       	std	Y+1, r24	; 0x01
    399c:	6a 83       	std	Y+2, r22	; 0x02
    399e:	4b 83       	std	Y+3, r20	; 0x03
    39a0:	2c 83       	std	Y+4, r18	; 0x04
    39a2:	0d 83       	std	Y+5, r16	; 0x05
    39a4:	ee 82       	std	Y+6, r14	; 0x06
	/* Non-PWM mode */
	SET_BIT(TCCR0, FOC0);
    39a6:	a3 e5       	ldi	r26, 0x53	; 83
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	e3 e5       	ldi	r30, 0x53	; 83
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	80 68       	ori	r24, 0x80	; 128
    39b2:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR0 = (TCCR0 & 0xB7) | (en_mode);
    39b4:	a3 e5       	ldi	r26, 0x53	; 83
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e3 e5       	ldi	r30, 0x53	; 83
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	98 2f       	mov	r25, r24
    39c0:	97 7b       	andi	r25, 0xB7	; 183
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	89 2b       	or	r24, r25
    39c6:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR0 = (TCCR0 & 0xCF) | (en_OC0);
    39c8:	a3 e5       	ldi	r26, 0x53	; 83
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	e3 e5       	ldi	r30, 0x53	; 83
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	98 2f       	mov	r25, r24
    39d4:	9f 7c       	andi	r25, 0xCF	; 207
    39d6:	8a 81       	ldd	r24, Y+2	; 0x02
    39d8:	89 2b       	or	r24, r25
    39da:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    39dc:	8b 81       	ldd	r24, Y+3	; 0x03
    39de:	80 93 7c 00 	sts	0x007C, r24

	/* Set the timer/counter0 initial value */
	TCNT0 = u8_initialValue;
    39e2:	e2 e5       	ldi	r30, 0x52	; 82
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	8c 81       	ldd	r24, Y+4	; 0x04
    39e8:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR0 = u8_outputCompare;
    39ea:	ec e5       	ldi	r30, 0x5C	; 92
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	8d 81       	ldd	r24, Y+5	; 0x05
    39f0:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xFC) | (en_interruptMask);
    39f2:	a9 e5       	ldi	r26, 0x59	; 89
    39f4:	b0 e0       	ldi	r27, 0x00	; 0
    39f6:	e9 e5       	ldi	r30, 0x59	; 89
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	80 81       	ld	r24, Z
    39fc:	98 2f       	mov	r25, r24
    39fe:	9c 7f       	andi	r25, 0xFC	; 252
    3a00:	8e 81       	ldd	r24, Y+6	; 0x06
    3a02:	89 2b       	or	r24, r25
    3a04:	8c 93       	st	X, r24
}
    3a06:	26 96       	adiw	r28, 0x06	; 6
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
    3a12:	cf 91       	pop	r28
    3a14:	df 91       	pop	r29
    3a16:	0f 91       	pop	r16
    3a18:	ef 90       	pop	r14
    3a1a:	08 95       	ret

00003a1c <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	0f 92       	push	r0
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter0 custom value */
	TCNT0 = u8_value;
    3a28:	e2 e5       	ldi	r30, 0x52	; 82
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	80 83       	st	Z, r24
}
    3a30:	0f 90       	pop	r0
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <timer0Read>:

uint8_t timer0Read(void)
{
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT0;
    3a40:	e2 e5       	ldi	r30, 0x52	; 82
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
}
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	08 95       	ret

00003a4c <timer0Start>:

void timer0Start(void)
{
    3a4c:	df 93       	push	r29
    3a4e:	cf 93       	push	r28
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR0 = (TCCR0 & 0xF8) | (gu8_timer0Timer1PreScaler);
    3a54:	a3 e5       	ldi	r26, 0x53	; 83
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	e3 e5       	ldi	r30, 0x53	; 83
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	80 81       	ld	r24, Z
    3a5e:	98 2f       	mov	r25, r24
    3a60:	98 7f       	andi	r25, 0xF8	; 248
    3a62:	80 91 7c 00 	lds	r24, 0x007C
    3a66:	89 2b       	or	r24, r25
    3a68:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT0 = 0;
    3a6a:	e2 e5       	ldi	r30, 0x52	; 82
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	10 82       	st	Z, r1
}
    3a70:	cf 91       	pop	r28
    3a72:	df 91       	pop	r29
    3a74:	08 95       	ret

00003a76 <timer0Stop>:

void timer0Stop(void)
{
    3a76:	df 93       	push	r29
    3a78:	cf 93       	push	r28
    3a7a:	cd b7       	in	r28, 0x3d	; 61
    3a7c:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR0 &= ~((1 << CS00) | (1 << CS01) | (1 << CS02));
    3a7e:	a3 e5       	ldi	r26, 0x53	; 83
    3a80:	b0 e0       	ldi	r27, 0x00	; 0
    3a82:	e3 e5       	ldi	r30, 0x53	; 83
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	88 7f       	andi	r24, 0xF8	; 248
    3a8a:	8c 93       	st	X, r24
}
    3a8c:	cf 91       	pop	r28
    3a8e:	df 91       	pop	r29
    3a90:	08 95       	ret

00003a92 <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    3a92:	ef 92       	push	r14
    3a94:	0f 93       	push	r16
    3a96:	df 93       	push	r29
    3a98:	cf 93       	push	r28
    3a9a:	00 d0       	rcall	.+0      	; 0x3a9c <timer0DelayMs+0xa>
    3a9c:	00 d0       	rcall	.+0      	; 0x3a9e <timer0DelayMs+0xc>
    3a9e:	0f 92       	push	r0
    3aa0:	cd b7       	in	r28, 0x3d	; 61
    3aa2:	de b7       	in	r29, 0x3e	; 62
    3aa4:	9d 83       	std	Y+5, r25	; 0x05
    3aa6:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    3aa8:	1b 82       	std	Y+3, r1	; 0x03
    3aaa:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    3aac:	8a ef       	ldi	r24, 0xFA	; 250
    3aae:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	60 e0       	ldi	r22, 0x00	; 0
    3ab4:	43 e0       	ldi	r20, 0x03	; 3
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	00 e0       	ldi	r16, 0x00	; 0
    3aba:	ee 24       	eor	r14, r14
    3abc:	0e 94 c4 1c 	call	0x3988	; 0x3988 <timer0Init>
	timer0Start();
    3ac0:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <timer0Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    3ac4:	1b 82       	std	Y+3, r1	; 0x03
    3ac6:	1a 82       	std	Y+2, r1	; 0x02
    3ac8:	0e c0       	rjmp	.+28     	; 0x3ae6 <timer0DelayMs+0x54>
	{
		while(TCNT0 < u8_outputCompare);
    3aca:	e2 e5       	ldi	r30, 0x52	; 82
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	90 81       	ld	r25, Z
    3ad0:	89 81       	ldd	r24, Y+1	; 0x01
    3ad2:	98 17       	cp	r25, r24
    3ad4:	d0 f3       	brcs	.-12     	; 0x3aca <timer0DelayMs+0x38>
		TCNT0 = 0;
    3ad6:	e2 e5       	ldi	r30, 0x52	; 82
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
	timer0Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    3adc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ade:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae0:	01 96       	adiw	r24, 0x01	; 1
    3ae2:	9b 83       	std	Y+3, r25	; 0x03
    3ae4:	8a 83       	std	Y+2, r24	; 0x02
    3ae6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ae8:	3b 81       	ldd	r19, Y+3	; 0x03
    3aea:	8c 81       	ldd	r24, Y+4	; 0x04
    3aec:	9d 81       	ldd	r25, Y+5	; 0x05
    3aee:	28 17       	cp	r18, r24
    3af0:	39 07       	cpc	r19, r25
    3af2:	58 f3       	brcs	.-42     	; 0x3aca <timer0DelayMs+0x38>
	{
		while(TCNT0 < u8_outputCompare);
		TCNT0 = 0;
	}
}
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	0f 90       	pop	r0
    3afc:	0f 90       	pop	r0
    3afe:	cf 91       	pop	r28
    3b00:	df 91       	pop	r29
    3b02:	0f 91       	pop	r16
    3b04:	ef 90       	pop	r14
    3b06:	08 95       	ret

00003b08 <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    3b08:	ef 92       	push	r14
    3b0a:	0f 93       	push	r16
    3b0c:	df 93       	push	r29
    3b0e:	cf 93       	push	r28
    3b10:	cd b7       	in	r28, 0x3d	; 61
    3b12:	de b7       	in	r29, 0x3e	; 62
    3b14:	29 97       	sbiw	r28, 0x09	; 9
    3b16:	0f b6       	in	r0, 0x3f	; 63
    3b18:	f8 94       	cli
    3b1a:	de bf       	out	0x3e, r29	; 62
    3b1c:	0f be       	out	0x3f, r0	; 63
    3b1e:	cd bf       	out	0x3d, r28	; 61
    3b20:	6e 83       	std	Y+6, r22	; 0x06
    3b22:	7f 83       	std	Y+7, r23	; 0x07
    3b24:	88 87       	std	Y+8, r24	; 0x08
    3b26:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    3b28:	1a 82       	std	Y+2, r1	; 0x02
    3b2a:	1b 82       	std	Y+3, r1	; 0x03
    3b2c:	1c 82       	std	Y+4, r1	; 0x04
    3b2e:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    3b30:	80 e1       	ldi	r24, 0x10	; 16
    3b32:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
    3b34:	88 e0       	ldi	r24, 0x08	; 8
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	41 e0       	ldi	r20, 0x01	; 1
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	09 81       	ldd	r16, Y+1	; 0x01
    3b3e:	ee 24       	eor	r14, r14
    3b40:	0e 94 c4 1c 	call	0x3988	; 0x3988 <timer0Init>
	timer0Start();
    3b44:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <timer0Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    3b48:	1a 82       	std	Y+2, r1	; 0x02
    3b4a:	1b 82       	std	Y+3, r1	; 0x03
    3b4c:	1c 82       	std	Y+4, r1	; 0x04
    3b4e:	1d 82       	std	Y+5, r1	; 0x05
    3b50:	1e c0       	rjmp	.+60     	; 0x3b8e <timer0DelayUs+0x86>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
    3b52:	e8 e5       	ldi	r30, 0x58	; 88
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	80 81       	ld	r24, Z
    3b58:	88 2f       	mov	r24, r24
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	82 70       	andi	r24, 0x02	; 2
    3b5e:	90 70       	andi	r25, 0x00	; 0
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	b9 f3       	breq	.-18     	; 0x3b52 <timer0DelayUs+0x4a>
		SET_BIT(TIFR, OCF0);
    3b64:	a8 e5       	ldi	r26, 0x58	; 88
    3b66:	b0 e0       	ldi	r27, 0x00	; 0
    3b68:	e8 e5       	ldi	r30, 0x58	; 88
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	80 81       	ld	r24, Z
    3b6e:	82 60       	ori	r24, 0x02	; 2
    3b70:	8c 93       	st	X, r24
		TCNT0 = 0;
    3b72:	e2 e5       	ldi	r30, 0x52	; 82
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
	timer0Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    3b78:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7c:	ac 81       	ldd	r26, Y+4	; 0x04
    3b7e:	bd 81       	ldd	r27, Y+5	; 0x05
    3b80:	01 96       	adiw	r24, 0x01	; 1
    3b82:	a1 1d       	adc	r26, r1
    3b84:	b1 1d       	adc	r27, r1
    3b86:	8a 83       	std	Y+2, r24	; 0x02
    3b88:	9b 83       	std	Y+3, r25	; 0x03
    3b8a:	ac 83       	std	Y+4, r26	; 0x04
    3b8c:	bd 83       	std	Y+5, r27	; 0x05
    3b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    3b90:	3b 81       	ldd	r19, Y+3	; 0x03
    3b92:	4c 81       	ldd	r20, Y+4	; 0x04
    3b94:	5d 81       	ldd	r21, Y+5	; 0x05
    3b96:	8e 81       	ldd	r24, Y+6	; 0x06
    3b98:	9f 81       	ldd	r25, Y+7	; 0x07
    3b9a:	a8 85       	ldd	r26, Y+8	; 0x08
    3b9c:	b9 85       	ldd	r27, Y+9	; 0x09
    3b9e:	28 17       	cp	r18, r24
    3ba0:	39 07       	cpc	r19, r25
    3ba2:	4a 07       	cpc	r20, r26
    3ba4:	5b 07       	cpc	r21, r27
    3ba6:	a8 f2       	brcs	.-86     	; 0x3b52 <timer0DelayUs+0x4a>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
		SET_BIT(TIFR, OCF0);
		TCNT0 = 0;
	}
}
    3ba8:	29 96       	adiw	r28, 0x09	; 9
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	cf 91       	pop	r28
    3bb6:	df 91       	pop	r29
    3bb8:	0f 91       	pop	r16
    3bba:	ef 90       	pop	r14
    3bbc:	08 95       	ret

00003bbe <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    3bbe:	ef 92       	push	r14
    3bc0:	0f 93       	push	r16
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	00 d0       	rcall	.+0      	; 0x3bc8 <timer0SwPWM+0xa>
    3bc8:	00 d0       	rcall	.+0      	; 0x3bca <timer0SwPWM+0xc>
    3bca:	cd b7       	in	r28, 0x3d	; 61
    3bcc:	de b7       	in	r29, 0x3e	; 62
    3bce:	8b 83       	std	Y+3, r24	; 0x03
    3bd0:	6c 83       	std	Y+4, r22	; 0x04
	/* Two variables to hold the values of output compare and prescaler */
	uint8_t u8_outputCompare, u8_prescaler;

	/* Enable global interrupt */
	sei();
    3bd2:	78 94       	sei
	
	/* If condition to determine the right equation to calculate prescaler and output compare values */
	if(u8_frequency <= 80)
    3bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd6:	81 35       	cpi	r24, 0x51	; 81
    3bd8:	e8 f4       	brcc	.+58     	; 0x3c14 <timer0SwPWM+0x56>
	{
		u8_prescaler = T0_PRESCALER_64;
    3bda:	83 e0       	ldi	r24, 0x03	; 3
    3bdc:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    3bde:	8c 81       	ldd	r24, Y+4	; 0x04
    3be0:	88 2f       	mov	r24, r24
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	a0 e0       	ldi	r26, 0x00	; 0
    3be6:	b0 e0       	ldi	r27, 0x00	; 0
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	39 e1       	ldi	r19, 0x19	; 25
    3bec:	40 e0       	ldi	r20, 0x00	; 0
    3bee:	50 e0       	ldi	r21, 0x00	; 0
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	cd 01       	movw	r24, r26
    3bf4:	0e 94 2b 22 	call	0x4456	; 0x4456 <__mulsi3>
    3bf8:	9b 01       	movw	r18, r22
    3bfa:	ac 01       	movw	r20, r24
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	94 e2       	ldi	r25, 0x24	; 36
    3c00:	a4 ef       	ldi	r26, 0xF4	; 244
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__udivmodsi4>
    3c0c:	da 01       	movw	r26, r20
    3c0e:	c9 01       	movw	r24, r18
    3c10:	8a 83       	std	Y+2, r24	; 0x02
    3c12:	1c c0       	rjmp	.+56     	; 0x3c4c <timer0SwPWM+0x8e>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    3c14:	82 e0       	ldi	r24, 0x02	; 2
    3c16:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    3c18:	8c 81       	ldd	r24, Y+4	; 0x04
    3c1a:	88 2f       	mov	r24, r24
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	a0 e0       	ldi	r26, 0x00	; 0
    3c20:	b0 e0       	ldi	r27, 0x00	; 0
    3c22:	20 e2       	ldi	r18, 0x20	; 32
    3c24:	33 e0       	ldi	r19, 0x03	; 3
    3c26:	40 e0       	ldi	r20, 0x00	; 0
    3c28:	50 e0       	ldi	r21, 0x00	; 0
    3c2a:	bc 01       	movw	r22, r24
    3c2c:	cd 01       	movw	r24, r26
    3c2e:	0e 94 2b 22 	call	0x4456	; 0x4456 <__mulsi3>
    3c32:	9b 01       	movw	r18, r22
    3c34:	ac 01       	movw	r20, r24
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	94 e2       	ldi	r25, 0x24	; 36
    3c3a:	a4 ef       	ldi	r26, 0xF4	; 244
    3c3c:	b0 e0       	ldi	r27, 0x00	; 0
    3c3e:	bc 01       	movw	r22, r24
    3c40:	cd 01       	movw	r24, r26
    3c42:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__udivmodsi4>
    3c46:	da 01       	movw	r26, r20
    3c48:	c9 01       	movw	r24, r18
    3c4a:	8a 83       	std	Y+2, r24	; 0x02
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}
	
	/* Initialize the timer depending on the previously calculated values */
	timer0Init(T0_COMP_MODE, T0_OC0_DIS, u8_prescaler, 0, u8_outputCompare, T0_INTERRUPT_CMP);
    3c4c:	88 e0       	ldi	r24, 0x08	; 8
    3c4e:	60 e0       	ldi	r22, 0x00	; 0
    3c50:	49 81       	ldd	r20, Y+1	; 0x01
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	0a 81       	ldd	r16, Y+2	; 0x02
    3c56:	ee 24       	eor	r14, r14
    3c58:	68 94       	set
    3c5a:	e1 f8       	bld	r14, 1
    3c5c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <timer0Init>
	
	/* Provide the clock to the timer */
	timer0Start();
    3c60:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <timer0Start>
}
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	0f 90       	pop	r0
    3c6c:	cf 91       	pop	r28
    3c6e:	df 91       	pop	r29
    3c70:	0f 91       	pop	r16
    3c72:	ef 90       	pop	r14
    3c74:	08 95       	ret

00003c76 <Timer0_OVF_setCallBack>:

void Timer0_OVF_setCallBack(void(*local_ptr)(void))
{
    3c76:	df 93       	push	r29
    3c78:	cf 93       	push	r28
    3c7a:	00 d0       	rcall	.+0      	; 0x3c7c <Timer0_OVF_setCallBack+0x6>
    3c7c:	cd b7       	in	r28, 0x3d	; 61
    3c7e:	de b7       	in	r29, 0x3e	; 62
    3c80:	9a 83       	std	Y+2, r25	; 0x02
    3c82:	89 83       	std	Y+1, r24	; 0x01
	g_T0_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	9a 81       	ldd	r25, Y+2	; 0x02
    3c88:	90 93 81 00 	sts	0x0081, r25
    3c8c:	80 93 80 00 	sts	0x0080, r24
}
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	cf 91       	pop	r28
    3c96:	df 91       	pop	r29
    3c98:	08 95       	ret

00003c9a <Timer0_CTC_setCallBack>:

void Timer0_CTC_setCallBack(void(*local_ptr)(void))
{
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <Timer0_CTC_setCallBack+0x6>
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	9a 83       	std	Y+2, r25	; 0x02
    3ca6:	89 83       	std	Y+1, r24	; 0x01
	g_T0_CTC_callBackPtr = (volatile void(*)(void))local_ptr;
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cac:	90 93 7f 00 	sts	0x007F, r25
    3cb0:	80 93 7e 00 	sts	0x007E, r24
}
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	cf 91       	pop	r28
    3cba:	df 91       	pop	r29
    3cbc:	08 95       	ret

00003cbe <timer1Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC1,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    3cbe:	af 92       	push	r10
    3cc0:	cf 92       	push	r12
    3cc2:	df 92       	push	r13
    3cc4:	ef 92       	push	r14
    3cc6:	ff 92       	push	r15
    3cc8:	0f 93       	push	r16
    3cca:	1f 93       	push	r17
    3ccc:	df 93       	push	r29
    3cce:	cf 93       	push	r28
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	2d 97       	sbiw	r28, 0x0d	; 13
    3cd6:	0f b6       	in	r0, 0x3f	; 63
    3cd8:	f8 94       	cli
    3cda:	de bf       	out	0x3e, r29	; 62
    3cdc:	0f be       	out	0x3f, r0	; 63
    3cde:	cd bf       	out	0x3d, r28	; 61
    3ce0:	89 83       	std	Y+1, r24	; 0x01
    3ce2:	7b 83       	std	Y+3, r23	; 0x03
    3ce4:	6a 83       	std	Y+2, r22	; 0x02
    3ce6:	4c 83       	std	Y+4, r20	; 0x04
    3ce8:	3e 83       	std	Y+6, r19	; 0x06
    3cea:	2d 83       	std	Y+5, r18	; 0x05
    3cec:	18 87       	std	Y+8, r17	; 0x08
    3cee:	0f 83       	std	Y+7, r16	; 0x07
    3cf0:	fa 86       	std	Y+10, r15	; 0x0a
    3cf2:	e9 86       	std	Y+9, r14	; 0x09
    3cf4:	dc 86       	std	Y+12, r13	; 0x0c
    3cf6:	cb 86       	std	Y+11, r12	; 0x0b
    3cf8:	ad 86       	std	Y+13, r10	; 0x0d
	/* Non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    3cfa:	af e4       	ldi	r26, 0x4F	; 79
    3cfc:	b0 e0       	ldi	r27, 0x00	; 0
    3cfe:	ef e4       	ldi	r30, 0x4F	; 79
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	80 81       	ld	r24, Z
    3d04:	88 60       	ori	r24, 0x08	; 8
    3d06:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    3d08:	af e4       	ldi	r26, 0x4F	; 79
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	ef e4       	ldi	r30, 0x4F	; 79
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	80 81       	ld	r24, Z
    3d12:	84 60       	ori	r24, 0x04	; 4
    3d14:	8c 93       	st	X, r24

	TCCR1 = 0x0000;
    3d16:	ee e4       	ldi	r30, 0x4E	; 78
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	11 82       	std	Z+1, r1	; 0x01
    3d1c:	10 82       	st	Z, r1

	/* Set the required operating mode */
	TCCR1 = en_mode | en_OC1;
    3d1e:	ee e4       	ldi	r30, 0x4E	; 78
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	28 2f       	mov	r18, r24
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d2c:	82 2b       	or	r24, r18
    3d2e:	93 2b       	or	r25, r19
    3d30:	91 83       	std	Z+1, r25	; 0x01
    3d32:	80 83       	st	Z, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    3d34:	8c 81       	ldd	r24, Y+4	; 0x04
    3d36:	80 93 7c 00 	sts	0x007C, r24

	/* Set the timer/counter0 initial value */
	TCNT1 = u16_initialValue;
    3d3a:	ec e4       	ldi	r30, 0x4C	; 76
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d40:	9e 81       	ldd	r25, Y+6	; 0x06
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR1A = u16_outputCompareA;
    3d46:	ea e4       	ldi	r30, 0x4A	; 74
    3d48:	f0 e0       	ldi	r31, 0x00	; 0
    3d4a:	8f 81       	ldd	r24, Y+7	; 0x07
    3d4c:	98 85       	ldd	r25, Y+8	; 0x08
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	80 83       	st	Z, r24
	OCR1B = u16_outputCompareB;
    3d52:	e8 e4       	ldi	r30, 0x48	; 72
    3d54:	f0 e0       	ldi	r31, 0x00	; 0
    3d56:	89 85       	ldd	r24, Y+9	; 0x09
    3d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5a:	91 83       	std	Z+1, r25	; 0x01
    3d5c:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xC3) | (en_interruptMask);
    3d5e:	a9 e5       	ldi	r26, 0x59	; 89
    3d60:	b0 e0       	ldi	r27, 0x00	; 0
    3d62:	e9 e5       	ldi	r30, 0x59	; 89
    3d64:	f0 e0       	ldi	r31, 0x00	; 0
    3d66:	80 81       	ld	r24, Z
    3d68:	98 2f       	mov	r25, r24
    3d6a:	93 7c       	andi	r25, 0xC3	; 195
    3d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d6e:	89 2b       	or	r24, r25
    3d70:	8c 93       	st	X, r24
}
    3d72:	2d 96       	adiw	r28, 0x0d	; 13
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	f8 94       	cli
    3d78:	de bf       	out	0x3e, r29	; 62
    3d7a:	0f be       	out	0x3f, r0	; 63
    3d7c:	cd bf       	out	0x3d, r28	; 61
    3d7e:	cf 91       	pop	r28
    3d80:	df 91       	pop	r29
    3d82:	1f 91       	pop	r17
    3d84:	0f 91       	pop	r16
    3d86:	ff 90       	pop	r15
    3d88:	ef 90       	pop	r14
    3d8a:	df 90       	pop	r13
    3d8c:	cf 90       	pop	r12
    3d8e:	af 90       	pop	r10
    3d90:	08 95       	ret

00003d92 <timer1Set>:

void timer1Set(uint16_t u16_value)
{
    3d92:	df 93       	push	r29
    3d94:	cf 93       	push	r28
    3d96:	00 d0       	rcall	.+0      	; 0x3d98 <timer1Set+0x6>
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	9a 83       	std	Y+2, r25	; 0x02
    3d9e:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter1 custom value */
	TCNT1 = u16_value;
    3da0:	ec e4       	ldi	r30, 0x4C	; 76
    3da2:	f0 e0       	ldi	r31, 0x00	; 0
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	9a 81       	ldd	r25, Y+2	; 0x02
    3da8:	91 83       	std	Z+1, r25	; 0x01
    3daa:	80 83       	st	Z, r24
}
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	08 95       	ret

00003db6 <timer1Read>:

uint16_t timer1Read(void)
{
    3db6:	df 93       	push	r29
    3db8:	cf 93       	push	r28
    3dba:	cd b7       	in	r28, 0x3d	; 61
    3dbc:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT1;
    3dbe:	ec e4       	ldi	r30, 0x4C	; 76
    3dc0:	f0 e0       	ldi	r31, 0x00	; 0
    3dc2:	80 81       	ld	r24, Z
    3dc4:	91 81       	ldd	r25, Z+1	; 0x01
}
    3dc6:	cf 91       	pop	r28
    3dc8:	df 91       	pop	r29
    3dca:	08 95       	ret

00003dcc <timer1Start>:

void timer1Start(void)
{
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	cd b7       	in	r28, 0x3d	; 61
    3dd2:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (gu8_timer0Timer1PreScaler);
    3dd4:	ae e4       	ldi	r26, 0x4E	; 78
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	ee e4       	ldi	r30, 0x4E	; 78
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	80 81       	ld	r24, Z
    3dde:	98 2f       	mov	r25, r24
    3de0:	98 7f       	andi	r25, 0xF8	; 248
    3de2:	80 91 7c 00 	lds	r24, 0x007C
    3de6:	89 2b       	or	r24, r25
    3de8:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT1 = 0;
    3dea:	ec e4       	ldi	r30, 0x4C	; 76
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	11 82       	std	Z+1, r1	; 0x01
    3df0:	10 82       	st	Z, r1
}
    3df2:	cf 91       	pop	r28
    3df4:	df 91       	pop	r29
    3df6:	08 95       	ret

00003df8 <timer1Stop>:

void timer1Stop(void)
{
    3df8:	df 93       	push	r29
    3dfa:	cf 93       	push	r28
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
    3e00:	ae e4       	ldi	r26, 0x4E	; 78
    3e02:	b0 e0       	ldi	r27, 0x00	; 0
    3e04:	ee e4       	ldi	r30, 0x4E	; 78
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	80 81       	ld	r24, Z
    3e0a:	88 7f       	andi	r24, 0xF8	; 248
    3e0c:	8c 93       	st	X, r24
}
    3e0e:	cf 91       	pop	r28
    3e10:	df 91       	pop	r29
    3e12:	08 95       	ret

00003e14 <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    3e14:	af 92       	push	r10
    3e16:	cf 92       	push	r12
    3e18:	df 92       	push	r13
    3e1a:	ef 92       	push	r14
    3e1c:	ff 92       	push	r15
    3e1e:	0f 93       	push	r16
    3e20:	1f 93       	push	r17
    3e22:	df 93       	push	r29
    3e24:	cf 93       	push	r28
    3e26:	00 d0       	rcall	.+0      	; 0x3e28 <timer1DelayMs+0x14>
    3e28:	00 d0       	rcall	.+0      	; 0x3e2a <timer1DelayMs+0x16>
    3e2a:	00 d0       	rcall	.+0      	; 0x3e2c <timer1DelayMs+0x18>
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	9e 83       	std	Y+6, r25	; 0x06
    3e32:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u16_msCounter = 0;
    3e34:	1c 82       	std	Y+4, r1	; 0x04
    3e36:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    3e38:	8a ef       	ldi	r24, 0xFA	; 250
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	9a 83       	std	Y+2, r25	; 0x02
    3e3e:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	60 e0       	ldi	r22, 0x00	; 0
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	43 e0       	ldi	r20, 0x03	; 3
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	00 e0       	ldi	r16, 0x00	; 0
    3e4e:	10 e0       	ldi	r17, 0x00	; 0
    3e50:	ee 24       	eor	r14, r14
    3e52:	ff 24       	eor	r15, r15
    3e54:	cc 24       	eor	r12, r12
    3e56:	dd 24       	eor	r13, r13
    3e58:	aa 24       	eor	r10, r10
    3e5a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <timer1Init>
	timer1Start();
    3e5e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <timer1Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    3e62:	1c 82       	std	Y+4, r1	; 0x04
    3e64:	1b 82       	std	Y+3, r1	; 0x03
    3e66:	12 c0       	rjmp	.+36     	; 0x3e8c <timer1DelayMs+0x78>
	{
		while(TCNT1 < u16_outputCompare);
    3e68:	ec e4       	ldi	r30, 0x4C	; 76
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	20 81       	ld	r18, Z
    3e6e:	31 81       	ldd	r19, Z+1	; 0x01
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	9a 81       	ldd	r25, Y+2	; 0x02
    3e74:	28 17       	cp	r18, r24
    3e76:	39 07       	cpc	r19, r25
    3e78:	b8 f3       	brcs	.-18     	; 0x3e68 <timer1DelayMs+0x54>
		TCNT1 = 0;
    3e7a:	ec e4       	ldi	r30, 0x4C	; 76
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	11 82       	std	Z+1, r1	; 0x01
    3e80:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
	timer1Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    3e82:	8b 81       	ldd	r24, Y+3	; 0x03
    3e84:	9c 81       	ldd	r25, Y+4	; 0x04
    3e86:	01 96       	adiw	r24, 0x01	; 1
    3e88:	9c 83       	std	Y+4, r25	; 0x04
    3e8a:	8b 83       	std	Y+3, r24	; 0x03
    3e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    3e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    3e90:	8d 81       	ldd	r24, Y+5	; 0x05
    3e92:	9e 81       	ldd	r25, Y+6	; 0x06
    3e94:	28 17       	cp	r18, r24
    3e96:	39 07       	cpc	r19, r25
    3e98:	38 f3       	brcs	.-50     	; 0x3e68 <timer1DelayMs+0x54>
	{
		while(TCNT1 < u16_outputCompare);
		TCNT1 = 0;
	}
}
    3e9a:	26 96       	adiw	r28, 0x06	; 6
    3e9c:	0f b6       	in	r0, 0x3f	; 63
    3e9e:	f8 94       	cli
    3ea0:	de bf       	out	0x3e, r29	; 62
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	cd bf       	out	0x3d, r28	; 61
    3ea6:	cf 91       	pop	r28
    3ea8:	df 91       	pop	r29
    3eaa:	1f 91       	pop	r17
    3eac:	0f 91       	pop	r16
    3eae:	ff 90       	pop	r15
    3eb0:	ef 90       	pop	r14
    3eb2:	df 90       	pop	r13
    3eb4:	cf 90       	pop	r12
    3eb6:	af 90       	pop	r10
    3eb8:	08 95       	ret

00003eba <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    3eba:	af 92       	push	r10
    3ebc:	cf 92       	push	r12
    3ebe:	df 92       	push	r13
    3ec0:	ef 92       	push	r14
    3ec2:	ff 92       	push	r15
    3ec4:	0f 93       	push	r16
    3ec6:	1f 93       	push	r17
    3ec8:	df 93       	push	r29
    3eca:	cf 93       	push	r28
    3ecc:	cd b7       	in	r28, 0x3d	; 61
    3ece:	de b7       	in	r29, 0x3e	; 62
    3ed0:	2a 97       	sbiw	r28, 0x0a	; 10
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	cd bf       	out	0x3d, r28	; 61
    3edc:	6f 83       	std	Y+7, r22	; 0x07
    3ede:	78 87       	std	Y+8, r23	; 0x08
    3ee0:	89 87       	std	Y+9, r24	; 0x09
    3ee2:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t u32_usCounter = 0;
    3ee4:	1b 82       	std	Y+3, r1	; 0x03
    3ee6:	1c 82       	std	Y+4, r1	; 0x04
    3ee8:	1d 82       	std	Y+5, r1	; 0x05
    3eea:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    3eec:	80 e1       	ldi	r24, 0x10	; 16
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
    3ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ef8:	88 e0       	ldi	r24, 0x08	; 8
    3efa:	60 e0       	ldi	r22, 0x00	; 0
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	41 e0       	ldi	r20, 0x01	; 1
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	8f 01       	movw	r16, r30
    3f06:	ee 24       	eor	r14, r14
    3f08:	ff 24       	eor	r15, r15
    3f0a:	cc 24       	eor	r12, r12
    3f0c:	dd 24       	eor	r13, r13
    3f0e:	aa 24       	eor	r10, r10
    3f10:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <timer1Init>
	timer1Start();
    3f14:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <timer1Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    3f18:	1b 82       	std	Y+3, r1	; 0x03
    3f1a:	1c 82       	std	Y+4, r1	; 0x04
    3f1c:	1d 82       	std	Y+5, r1	; 0x05
    3f1e:	1e 82       	std	Y+6, r1	; 0x06
    3f20:	1f c0       	rjmp	.+62     	; 0x3f60 <timer1DelayUs+0xa6>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
    3f22:	e8 e5       	ldi	r30, 0x58	; 88
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	80 81       	ld	r24, Z
    3f28:	88 2f       	mov	r24, r24
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	80 71       	andi	r24, 0x10	; 16
    3f2e:	90 70       	andi	r25, 0x00	; 0
    3f30:	00 97       	sbiw	r24, 0x00	; 0
    3f32:	b9 f3       	breq	.-18     	; 0x3f22 <timer1DelayUs+0x68>
		SET_BIT(TIFR, OCF1A);
    3f34:	a8 e5       	ldi	r26, 0x58	; 88
    3f36:	b0 e0       	ldi	r27, 0x00	; 0
    3f38:	e8 e5       	ldi	r30, 0x58	; 88
    3f3a:	f0 e0       	ldi	r31, 0x00	; 0
    3f3c:	80 81       	ld	r24, Z
    3f3e:	80 61       	ori	r24, 0x10	; 16
    3f40:	8c 93       	st	X, r24
		TCNT1 = 0;
    3f42:	ec e4       	ldi	r30, 0x4C	; 76
    3f44:	f0 e0       	ldi	r31, 0x00	; 0
    3f46:	11 82       	std	Z+1, r1	; 0x01
    3f48:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
	timer1Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    3f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f4e:	ad 81       	ldd	r26, Y+5	; 0x05
    3f50:	be 81       	ldd	r27, Y+6	; 0x06
    3f52:	01 96       	adiw	r24, 0x01	; 1
    3f54:	a1 1d       	adc	r26, r1
    3f56:	b1 1d       	adc	r27, r1
    3f58:	8b 83       	std	Y+3, r24	; 0x03
    3f5a:	9c 83       	std	Y+4, r25	; 0x04
    3f5c:	ad 83       	std	Y+5, r26	; 0x05
    3f5e:	be 83       	std	Y+6, r27	; 0x06
    3f60:	2b 81       	ldd	r18, Y+3	; 0x03
    3f62:	3c 81       	ldd	r19, Y+4	; 0x04
    3f64:	4d 81       	ldd	r20, Y+5	; 0x05
    3f66:	5e 81       	ldd	r21, Y+6	; 0x06
    3f68:	8f 81       	ldd	r24, Y+7	; 0x07
    3f6a:	98 85       	ldd	r25, Y+8	; 0x08
    3f6c:	a9 85       	ldd	r26, Y+9	; 0x09
    3f6e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3f70:	28 17       	cp	r18, r24
    3f72:	39 07       	cpc	r19, r25
    3f74:	4a 07       	cpc	r20, r26
    3f76:	5b 07       	cpc	r21, r27
    3f78:	a0 f2       	brcs	.-88     	; 0x3f22 <timer1DelayUs+0x68>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
		SET_BIT(TIFR, OCF1A);
		TCNT1 = 0;
	}
}
    3f7a:	2a 96       	adiw	r28, 0x0a	; 10
    3f7c:	0f b6       	in	r0, 0x3f	; 63
    3f7e:	f8 94       	cli
    3f80:	de bf       	out	0x3e, r29	; 62
    3f82:	0f be       	out	0x3f, r0	; 63
    3f84:	cd bf       	out	0x3d, r28	; 61
    3f86:	cf 91       	pop	r28
    3f88:	df 91       	pop	r29
    3f8a:	1f 91       	pop	r17
    3f8c:	0f 91       	pop	r16
    3f8e:	ff 90       	pop	r15
    3f90:	ef 90       	pop	r14
    3f92:	df 90       	pop	r13
    3f94:	cf 90       	pop	r12
    3f96:	af 90       	pop	r10
    3f98:	08 95       	ret

00003f9a <timer1SwPWM>:

void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    3f9a:	af 92       	push	r10
    3f9c:	cf 92       	push	r12
    3f9e:	df 92       	push	r13
    3fa0:	ef 92       	push	r14
    3fa2:	ff 92       	push	r15
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	df 93       	push	r29
    3faa:	cf 93       	push	r28
    3fac:	00 d0       	rcall	.+0      	; 0x3fae <timer1SwPWM+0x14>
    3fae:	00 d0       	rcall	.+0      	; 0x3fb0 <timer1SwPWM+0x16>
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
    3fb4:	8b 83       	std	Y+3, r24	; 0x03
    3fb6:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    3fb8:	78 94       	sei

	if(u8_frequency <= 80)
    3fba:	8c 81       	ldd	r24, Y+4	; 0x04
    3fbc:	81 35       	cpi	r24, 0x51	; 81
    3fbe:	e8 f4       	brcc	.+58     	; 0x3ffa <timer1SwPWM+0x60>
	{
		u8_prescaler = T0_PRESCALER_64;
    3fc0:	83 e0       	ldi	r24, 0x03	; 3
    3fc2:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    3fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3fc6:	88 2f       	mov	r24, r24
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	a0 e0       	ldi	r26, 0x00	; 0
    3fcc:	b0 e0       	ldi	r27, 0x00	; 0
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	39 e1       	ldi	r19, 0x19	; 25
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	50 e0       	ldi	r21, 0x00	; 0
    3fd6:	bc 01       	movw	r22, r24
    3fd8:	cd 01       	movw	r24, r26
    3fda:	0e 94 2b 22 	call	0x4456	; 0x4456 <__mulsi3>
    3fde:	9b 01       	movw	r18, r22
    3fe0:	ac 01       	movw	r20, r24
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	94 e2       	ldi	r25, 0x24	; 36
    3fe6:	a4 ef       	ldi	r26, 0xF4	; 244
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	bc 01       	movw	r22, r24
    3fec:	cd 01       	movw	r24, r26
    3fee:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__udivmodsi4>
    3ff2:	da 01       	movw	r26, r20
    3ff4:	c9 01       	movw	r24, r18
    3ff6:	8a 83       	std	Y+2, r24	; 0x02
    3ff8:	1c c0       	rjmp	.+56     	; 0x4032 <timer1SwPWM+0x98>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    3ffa:	82 e0       	ldi	r24, 0x02	; 2
    3ffc:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    3ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    4000:	88 2f       	mov	r24, r24
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	a0 e0       	ldi	r26, 0x00	; 0
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	20 e2       	ldi	r18, 0x20	; 32
    400a:	33 e0       	ldi	r19, 0x03	; 3
    400c:	40 e0       	ldi	r20, 0x00	; 0
    400e:	50 e0       	ldi	r21, 0x00	; 0
    4010:	bc 01       	movw	r22, r24
    4012:	cd 01       	movw	r24, r26
    4014:	0e 94 2b 22 	call	0x4456	; 0x4456 <__mulsi3>
    4018:	9b 01       	movw	r18, r22
    401a:	ac 01       	movw	r20, r24
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	94 e2       	ldi	r25, 0x24	; 36
    4020:	a4 ef       	ldi	r26, 0xF4	; 244
    4022:	b0 e0       	ldi	r27, 0x00	; 0
    4024:	bc 01       	movw	r22, r24
    4026:	cd 01       	movw	r24, r26
    4028:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__udivmodsi4>
    402c:	da 01       	movw	r26, r20
    402e:	c9 01       	movw	r24, r18
    4030:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, u8_prescaler, 0, u8_outputCompare, 0, 0, T1_INTERRUPT_CMP_1A);
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
    4034:	e8 2f       	mov	r30, r24
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	88 e0       	ldi	r24, 0x08	; 8
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	70 e0       	ldi	r23, 0x00	; 0
    403e:	49 81       	ldd	r20, Y+1	; 0x01
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	8f 01       	movw	r16, r30
    4046:	ee 24       	eor	r14, r14
    4048:	ff 24       	eor	r15, r15
    404a:	cc 24       	eor	r12, r12
    404c:	dd 24       	eor	r13, r13
    404e:	aa 24       	eor	r10, r10
    4050:	68 94       	set
    4052:	a4 f8       	bld	r10, 4
    4054:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <timer1Init>
	timer1Start();
    4058:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <timer1Start>
}
    405c:	0f 90       	pop	r0
    405e:	0f 90       	pop	r0
    4060:	0f 90       	pop	r0
    4062:	0f 90       	pop	r0
    4064:	cf 91       	pop	r28
    4066:	df 91       	pop	r29
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    406c:	ff 90       	pop	r15
    406e:	ef 90       	pop	r14
    4070:	df 90       	pop	r13
    4072:	cf 90       	pop	r12
    4074:	af 90       	pop	r10
    4076:	08 95       	ret

00004078 <Timer1_OVF_setCallBack>:

void Timer1_OVF_setCallBack(void(*local_ptr)(void))
{
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	00 d0       	rcall	.+0      	; 0x407e <Timer1_OVF_setCallBack+0x6>
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	89 83       	std	Y+1, r24	; 0x01
	g_T1_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    4086:	89 81       	ldd	r24, Y+1	; 0x01
    4088:	9a 81       	ldd	r25, Y+2	; 0x02
    408a:	90 93 89 00 	sts	0x0089, r25
    408e:	80 93 88 00 	sts	0x0088, r24
}
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	cf 91       	pop	r28
    4098:	df 91       	pop	r29
    409a:	08 95       	ret

0000409c <Timer1_CTC_A_setCallBack>:

void Timer1_CTC_A_setCallBack(void(*local_ptr)(void))
{
    409c:	df 93       	push	r29
    409e:	cf 93       	push	r28
    40a0:	00 d0       	rcall	.+0      	; 0x40a2 <Timer1_CTC_A_setCallBack+0x6>
    40a2:	cd b7       	in	r28, 0x3d	; 61
    40a4:	de b7       	in	r29, 0x3e	; 62
    40a6:	9a 83       	std	Y+2, r25	; 0x02
    40a8:	89 83       	std	Y+1, r24	; 0x01
	g_T1_CTC_A_callBackPtr = (volatile void(*)(void))local_ptr;
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	9a 81       	ldd	r25, Y+2	; 0x02
    40ae:	90 93 85 00 	sts	0x0085, r25
    40b2:	80 93 84 00 	sts	0x0084, r24
}
    40b6:	0f 90       	pop	r0
    40b8:	0f 90       	pop	r0
    40ba:	cf 91       	pop	r28
    40bc:	df 91       	pop	r29
    40be:	08 95       	ret

000040c0 <Timer1_CTC_B_setCallBack>:

void Timer1_CTC_B_setCallBack(void(*local_ptr)(void))
{
    40c0:	df 93       	push	r29
    40c2:	cf 93       	push	r28
    40c4:	00 d0       	rcall	.+0      	; 0x40c6 <Timer1_CTC_B_setCallBack+0x6>
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
    40ca:	9a 83       	std	Y+2, r25	; 0x02
    40cc:	89 83       	std	Y+1, r24	; 0x01
	g_T1_CTC_B_callBackPtr = (volatile void(*)(void))local_ptr;
    40ce:	89 81       	ldd	r24, Y+1	; 0x01
    40d0:	9a 81       	ldd	r25, Y+2	; 0x02
    40d2:	90 93 87 00 	sts	0x0087, r25
    40d6:	80 93 86 00 	sts	0x0086, r24
}
    40da:	0f 90       	pop	r0
    40dc:	0f 90       	pop	r0
    40de:	cf 91       	pop	r28
    40e0:	df 91       	pop	r29
    40e2:	08 95       	ret

000040e4 <Timer1_ICU_setCallBack>:

void Timer1_ICU_setCallBack(void(*local_ptr)(void))
{
    40e4:	df 93       	push	r29
    40e6:	cf 93       	push	r28
    40e8:	00 d0       	rcall	.+0      	; 0x40ea <Timer1_ICU_setCallBack+0x6>
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
    40ee:	9a 83       	std	Y+2, r25	; 0x02
    40f0:	89 83       	std	Y+1, r24	; 0x01
	g_T1_ICU_callBackPtr = (volatile void(*)(void))local_ptr;
    40f2:	89 81       	ldd	r24, Y+1	; 0x01
    40f4:	9a 81       	ldd	r25, Y+2	; 0x02
    40f6:	90 93 83 00 	sts	0x0083, r25
    40fa:	80 93 82 00 	sts	0x0082, r24
}
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	cf 91       	pop	r28
    4104:	df 91       	pop	r29
    4106:	08 95       	ret

00004108 <timer2Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC2,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    4108:	cf 92       	push	r12
    410a:	ef 92       	push	r14
    410c:	0f 93       	push	r16
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
    4116:	27 97       	sbiw	r28, 0x07	; 7
    4118:	0f b6       	in	r0, 0x3f	; 63
    411a:	f8 94       	cli
    411c:	de bf       	out	0x3e, r29	; 62
    411e:	0f be       	out	0x3f, r0	; 63
    4120:	cd bf       	out	0x3d, r28	; 61
    4122:	89 83       	std	Y+1, r24	; 0x01
    4124:	6a 83       	std	Y+2, r22	; 0x02
    4126:	4b 83       	std	Y+3, r20	; 0x03
    4128:	2c 83       	std	Y+4, r18	; 0x04
    412a:	0d 83       	std	Y+5, r16	; 0x05
    412c:	ee 82       	std	Y+6, r14	; 0x06
    412e:	cf 82       	std	Y+7, r12	; 0x07
	/* Non-PWM mode */
	SET_BIT(TCCR2, FOC2);
    4130:	a5 e4       	ldi	r26, 0x45	; 69
    4132:	b0 e0       	ldi	r27, 0x00	; 0
    4134:	e5 e4       	ldi	r30, 0x45	; 69
    4136:	f0 e0       	ldi	r31, 0x00	; 0
    4138:	80 81       	ld	r24, Z
    413a:	80 68       	ori	r24, 0x80	; 128
    413c:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR2 = (TCCR2 & 0xB7) | (en_mode);
    413e:	a5 e4       	ldi	r26, 0x45	; 69
    4140:	b0 e0       	ldi	r27, 0x00	; 0
    4142:	e5 e4       	ldi	r30, 0x45	; 69
    4144:	f0 e0       	ldi	r31, 0x00	; 0
    4146:	80 81       	ld	r24, Z
    4148:	98 2f       	mov	r25, r24
    414a:	97 7b       	andi	r25, 0xB7	; 183
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	89 2b       	or	r24, r25
    4150:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR2 = (TCCR2 & 0xCF) | (en_OC2);
    4152:	a5 e4       	ldi	r26, 0x45	; 69
    4154:	b0 e0       	ldi	r27, 0x00	; 0
    4156:	e5 e4       	ldi	r30, 0x45	; 69
    4158:	f0 e0       	ldi	r31, 0x00	; 0
    415a:	80 81       	ld	r24, Z
    415c:	98 2f       	mov	r25, r24
    415e:	9f 7c       	andi	r25, 0xCF	; 207
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	89 2b       	or	r24, r25
    4164:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer2PreScaler = en_prescal;
    4166:	8b 81       	ldd	r24, Y+3	; 0x03
    4168:	80 93 7d 00 	sts	0x007D, r24

	/* Set the timer/counter0 initial value */
	TCNT2 = u8_initialValue;
    416c:	e4 e4       	ldi	r30, 0x44	; 68
    416e:	f0 e0       	ldi	r31, 0x00	; 0
    4170:	8c 81       	ldd	r24, Y+4	; 0x04
    4172:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR2 = u8_outputCompare;
    4174:	e3 e4       	ldi	r30, 0x43	; 67
    4176:	f0 e0       	ldi	r31, 0x00	; 0
    4178:	8d 81       	ldd	r24, Y+5	; 0x05
    417a:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0x3F) | (en_interruptMask);
    417c:	a9 e5       	ldi	r26, 0x59	; 89
    417e:	b0 e0       	ldi	r27, 0x00	; 0
    4180:	e9 e5       	ldi	r30, 0x59	; 89
    4182:	f0 e0       	ldi	r31, 0x00	; 0
    4184:	80 81       	ld	r24, Z
    4186:	98 2f       	mov	r25, r24
    4188:	9f 73       	andi	r25, 0x3F	; 63
    418a:	8f 81       	ldd	r24, Y+7	; 0x07
    418c:	89 2b       	or	r24, r25
    418e:	8c 93       	st	X, r24
}
    4190:	27 96       	adiw	r28, 0x07	; 7
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	cd bf       	out	0x3d, r28	; 61
    419c:	cf 91       	pop	r28
    419e:	df 91       	pop	r29
    41a0:	0f 91       	pop	r16
    41a2:	ef 90       	pop	r14
    41a4:	cf 90       	pop	r12
    41a6:	08 95       	ret

000041a8 <timer2Set>:

void timer2Set(uint8_t u8_value)
{
    41a8:	df 93       	push	r29
    41aa:	cf 93       	push	r28
    41ac:	0f 92       	push	r0
    41ae:	cd b7       	in	r28, 0x3d	; 61
    41b0:	de b7       	in	r29, 0x3e	; 62
    41b2:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter2 custom value */
	TCNT2 = u8_value;
    41b4:	e4 e4       	ldi	r30, 0x44	; 68
    41b6:	f0 e0       	ldi	r31, 0x00	; 0
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
    41ba:	80 83       	st	Z, r24
}
    41bc:	0f 90       	pop	r0
    41be:	cf 91       	pop	r28
    41c0:	df 91       	pop	r29
    41c2:	08 95       	ret

000041c4 <timer2Read>:

uint8_t timer2Read(void)
{
    41c4:	df 93       	push	r29
    41c6:	cf 93       	push	r28
    41c8:	cd b7       	in	r28, 0x3d	; 61
    41ca:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT2;
    41cc:	e4 e4       	ldi	r30, 0x44	; 68
    41ce:	f0 e0       	ldi	r31, 0x00	; 0
    41d0:	80 81       	ld	r24, Z
}
    41d2:	cf 91       	pop	r28
    41d4:	df 91       	pop	r29
    41d6:	08 95       	ret

000041d8 <timer2Start>:

void timer2Start(void)
{
    41d8:	df 93       	push	r29
    41da:	cf 93       	push	r28
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR2 = (TCCR2 & 0xF8) | (gu8_timer2PreScaler);
    41e0:	a5 e4       	ldi	r26, 0x45	; 69
    41e2:	b0 e0       	ldi	r27, 0x00	; 0
    41e4:	e5 e4       	ldi	r30, 0x45	; 69
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	80 81       	ld	r24, Z
    41ea:	98 2f       	mov	r25, r24
    41ec:	98 7f       	andi	r25, 0xF8	; 248
    41ee:	80 91 7d 00 	lds	r24, 0x007D
    41f2:	89 2b       	or	r24, r25
    41f4:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT2 = 0;
    41f6:	e4 e4       	ldi	r30, 0x44	; 68
    41f8:	f0 e0       	ldi	r31, 0x00	; 0
    41fa:	10 82       	st	Z, r1
}
    41fc:	cf 91       	pop	r28
    41fe:	df 91       	pop	r29
    4200:	08 95       	ret

00004202 <timer2Stop>:

void timer2Stop(void)
{
    4202:	df 93       	push	r29
    4204:	cf 93       	push	r28
    4206:	cd b7       	in	r28, 0x3d	; 61
    4208:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR2 &= ~((1 << CS20) | (1 << CS21) | (1 << CS22));
    420a:	a5 e4       	ldi	r26, 0x45	; 69
    420c:	b0 e0       	ldi	r27, 0x00	; 0
    420e:	e5 e4       	ldi	r30, 0x45	; 69
    4210:	f0 e0       	ldi	r31, 0x00	; 0
    4212:	80 81       	ld	r24, Z
    4214:	88 7f       	andi	r24, 0xF8	; 248
    4216:	8c 93       	st	X, r24
}
    4218:	cf 91       	pop	r28
    421a:	df 91       	pop	r29
    421c:	08 95       	ret

0000421e <timer2DelayMs>:

void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    421e:	cf 92       	push	r12
    4220:	ef 92       	push	r14
    4222:	0f 93       	push	r16
    4224:	df 93       	push	r29
    4226:	cf 93       	push	r28
    4228:	00 d0       	rcall	.+0      	; 0x422a <timer2DelayMs+0xc>
    422a:	00 d0       	rcall	.+0      	; 0x422c <timer2DelayMs+0xe>
    422c:	0f 92       	push	r0
    422e:	cd b7       	in	r28, 0x3d	; 61
    4230:	de b7       	in	r29, 0x3e	; 62
    4232:	9d 83       	std	Y+5, r25	; 0x05
    4234:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    4236:	1b 82       	std	Y+3, r1	; 0x03
    4238:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    423a:	8a ef       	ldi	r24, 0xFA	; 250
    423c:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	60 e0       	ldi	r22, 0x00	; 0
    4242:	44 e0       	ldi	r20, 0x04	; 4
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	00 e0       	ldi	r16, 0x00	; 0
    4248:	ee 24       	eor	r14, r14
    424a:	cc 24       	eor	r12, r12
    424c:	0e 94 84 20 	call	0x4108	; 0x4108 <timer2Init>
	timer2Start();
    4250:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <timer2Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    4254:	1b 82       	std	Y+3, r1	; 0x03
    4256:	1a 82       	std	Y+2, r1	; 0x02
    4258:	0e c0       	rjmp	.+28     	; 0x4276 <timer2DelayMs+0x58>
	{
		while(TCNT2 < u8_outputCompare);
    425a:	e4 e4       	ldi	r30, 0x44	; 68
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	90 81       	ld	r25, Z
    4260:	89 81       	ldd	r24, Y+1	; 0x01
    4262:	98 17       	cp	r25, r24
    4264:	d0 f3       	brcs	.-12     	; 0x425a <timer2DelayMs+0x3c>
		TCNT2 = 0;
    4266:	e4 e4       	ldi	r30, 0x44	; 68
    4268:	f0 e0       	ldi	r31, 0x00	; 0
    426a:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
	timer2Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    426c:	8a 81       	ldd	r24, Y+2	; 0x02
    426e:	9b 81       	ldd	r25, Y+3	; 0x03
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	9b 83       	std	Y+3, r25	; 0x03
    4274:	8a 83       	std	Y+2, r24	; 0x02
    4276:	2a 81       	ldd	r18, Y+2	; 0x02
    4278:	3b 81       	ldd	r19, Y+3	; 0x03
    427a:	8c 81       	ldd	r24, Y+4	; 0x04
    427c:	9d 81       	ldd	r25, Y+5	; 0x05
    427e:	28 17       	cp	r18, r24
    4280:	39 07       	cpc	r19, r25
    4282:	58 f3       	brcs	.-42     	; 0x425a <timer2DelayMs+0x3c>
	{
		while(TCNT2 < u8_outputCompare);
		TCNT2 = 0;
	}
}
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	0f 90       	pop	r0
    428c:	0f 90       	pop	r0
    428e:	cf 91       	pop	r28
    4290:	df 91       	pop	r29
    4292:	0f 91       	pop	r16
    4294:	ef 90       	pop	r14
    4296:	cf 90       	pop	r12
    4298:	08 95       	ret

0000429a <timer2DelayUs>:

void timer2DelayUs(uint32_t u32_delay_in_us)
{
    429a:	cf 92       	push	r12
    429c:	ef 92       	push	r14
    429e:	0f 93       	push	r16
    42a0:	df 93       	push	r29
    42a2:	cf 93       	push	r28
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	29 97       	sbiw	r28, 0x09	; 9
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	f8 94       	cli
    42ae:	de bf       	out	0x3e, r29	; 62
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	cd bf       	out	0x3d, r28	; 61
    42b4:	6e 83       	std	Y+6, r22	; 0x06
    42b6:	7f 83       	std	Y+7, r23	; 0x07
    42b8:	88 87       	std	Y+8, r24	; 0x08
    42ba:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    42bc:	1a 82       	std	Y+2, r1	; 0x02
    42be:	1b 82       	std	Y+3, r1	; 0x03
    42c0:	1c 82       	std	Y+4, r1	; 0x04
    42c2:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    42c4:	80 e1       	ldi	r24, 0x10	; 16
    42c6:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
    42c8:	88 e0       	ldi	r24, 0x08	; 8
    42ca:	60 e0       	ldi	r22, 0x00	; 0
    42cc:	41 e0       	ldi	r20, 0x01	; 1
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	09 81       	ldd	r16, Y+1	; 0x01
    42d2:	ee 24       	eor	r14, r14
    42d4:	cc 24       	eor	r12, r12
    42d6:	0e 94 84 20 	call	0x4108	; 0x4108 <timer2Init>
	timer2Start();
    42da:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <timer2Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    42de:	1a 82       	std	Y+2, r1	; 0x02
    42e0:	1b 82       	std	Y+3, r1	; 0x03
    42e2:	1c 82       	std	Y+4, r1	; 0x04
    42e4:	1d 82       	std	Y+5, r1	; 0x05
    42e6:	1a c0       	rjmp	.+52     	; 0x431c <timer2DelayUs+0x82>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
    42e8:	e8 e5       	ldi	r30, 0x58	; 88
    42ea:	f0 e0       	ldi	r31, 0x00	; 0
    42ec:	80 81       	ld	r24, Z
    42ee:	88 23       	and	r24, r24
    42f0:	dc f7       	brge	.-10     	; 0x42e8 <timer2DelayUs+0x4e>
		SET_BIT(TIFR, OCF2);
    42f2:	a8 e5       	ldi	r26, 0x58	; 88
    42f4:	b0 e0       	ldi	r27, 0x00	; 0
    42f6:	e8 e5       	ldi	r30, 0x58	; 88
    42f8:	f0 e0       	ldi	r31, 0x00	; 0
    42fa:	80 81       	ld	r24, Z
    42fc:	80 68       	ori	r24, 0x80	; 128
    42fe:	8c 93       	st	X, r24
		TCNT2 = 0;
    4300:	e4 e4       	ldi	r30, 0x44	; 68
    4302:	f0 e0       	ldi	r31, 0x00	; 0
    4304:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
	timer2Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    4306:	8a 81       	ldd	r24, Y+2	; 0x02
    4308:	9b 81       	ldd	r25, Y+3	; 0x03
    430a:	ac 81       	ldd	r26, Y+4	; 0x04
    430c:	bd 81       	ldd	r27, Y+5	; 0x05
    430e:	01 96       	adiw	r24, 0x01	; 1
    4310:	a1 1d       	adc	r26, r1
    4312:	b1 1d       	adc	r27, r1
    4314:	8a 83       	std	Y+2, r24	; 0x02
    4316:	9b 83       	std	Y+3, r25	; 0x03
    4318:	ac 83       	std	Y+4, r26	; 0x04
    431a:	bd 83       	std	Y+5, r27	; 0x05
    431c:	2a 81       	ldd	r18, Y+2	; 0x02
    431e:	3b 81       	ldd	r19, Y+3	; 0x03
    4320:	4c 81       	ldd	r20, Y+4	; 0x04
    4322:	5d 81       	ldd	r21, Y+5	; 0x05
    4324:	8e 81       	ldd	r24, Y+6	; 0x06
    4326:	9f 81       	ldd	r25, Y+7	; 0x07
    4328:	a8 85       	ldd	r26, Y+8	; 0x08
    432a:	b9 85       	ldd	r27, Y+9	; 0x09
    432c:	28 17       	cp	r18, r24
    432e:	39 07       	cpc	r19, r25
    4330:	4a 07       	cpc	r20, r26
    4332:	5b 07       	cpc	r21, r27
    4334:	c8 f2       	brcs	.-78     	; 0x42e8 <timer2DelayUs+0x4e>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
		SET_BIT(TIFR, OCF2);
		TCNT2 = 0;
	}
}
    4336:	29 96       	adiw	r28, 0x09	; 9
    4338:	0f b6       	in	r0, 0x3f	; 63
    433a:	f8 94       	cli
    433c:	de bf       	out	0x3e, r29	; 62
    433e:	0f be       	out	0x3f, r0	; 63
    4340:	cd bf       	out	0x3d, r28	; 61
    4342:	cf 91       	pop	r28
    4344:	df 91       	pop	r29
    4346:	0f 91       	pop	r16
    4348:	ef 90       	pop	r14
    434a:	cf 90       	pop	r12
    434c:	08 95       	ret

0000434e <timer2SwPWM>:

void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    434e:	cf 92       	push	r12
    4350:	ef 92       	push	r14
    4352:	0f 93       	push	r16
    4354:	df 93       	push	r29
    4356:	cf 93       	push	r28
    4358:	00 d0       	rcall	.+0      	; 0x435a <timer2SwPWM+0xc>
    435a:	00 d0       	rcall	.+0      	; 0x435c <timer2SwPWM+0xe>
    435c:	cd b7       	in	r28, 0x3d	; 61
    435e:	de b7       	in	r29, 0x3e	; 62
    4360:	8b 83       	std	Y+3, r24	; 0x03
    4362:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    4364:	78 94       	sei

	if(u8_frequency <= 80)
    4366:	8c 81       	ldd	r24, Y+4	; 0x04
    4368:	81 35       	cpi	r24, 0x51	; 81
    436a:	e8 f4       	brcc	.+58     	; 0x43a6 <timer2SwPWM+0x58>
	{
		u8_prescaler = T0_PRESCALER_64;
    436c:	83 e0       	ldi	r24, 0x03	; 3
    436e:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    4370:	8c 81       	ldd	r24, Y+4	; 0x04
    4372:	88 2f       	mov	r24, r24
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	a0 e0       	ldi	r26, 0x00	; 0
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	39 e1       	ldi	r19, 0x19	; 25
    437e:	40 e0       	ldi	r20, 0x00	; 0
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	bc 01       	movw	r22, r24
    4384:	cd 01       	movw	r24, r26
    4386:	0e 94 2b 22 	call	0x4456	; 0x4456 <__mulsi3>
    438a:	9b 01       	movw	r18, r22
    438c:	ac 01       	movw	r20, r24
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	94 e2       	ldi	r25, 0x24	; 36
    4392:	a4 ef       	ldi	r26, 0xF4	; 244
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	bc 01       	movw	r22, r24
    4398:	cd 01       	movw	r24, r26
    439a:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__udivmodsi4>
    439e:	da 01       	movw	r26, r20
    43a0:	c9 01       	movw	r24, r18
    43a2:	8a 83       	std	Y+2, r24	; 0x02
    43a4:	1c c0       	rjmp	.+56     	; 0x43de <timer2SwPWM+0x90>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    43a6:	82 e0       	ldi	r24, 0x02	; 2
    43a8:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    43aa:	8c 81       	ldd	r24, Y+4	; 0x04
    43ac:	88 2f       	mov	r24, r24
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	a0 e0       	ldi	r26, 0x00	; 0
    43b2:	b0 e0       	ldi	r27, 0x00	; 0
    43b4:	20 e2       	ldi	r18, 0x20	; 32
    43b6:	33 e0       	ldi	r19, 0x03	; 3
    43b8:	40 e0       	ldi	r20, 0x00	; 0
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	bc 01       	movw	r22, r24
    43be:	cd 01       	movw	r24, r26
    43c0:	0e 94 2b 22 	call	0x4456	; 0x4456 <__mulsi3>
    43c4:	9b 01       	movw	r18, r22
    43c6:	ac 01       	movw	r20, r24
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	94 e2       	ldi	r25, 0x24	; 36
    43cc:	a4 ef       	ldi	r26, 0xF4	; 244
    43ce:	b0 e0       	ldi	r27, 0x00	; 0
    43d0:	bc 01       	movw	r22, r24
    43d2:	cd 01       	movw	r24, r26
    43d4:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__udivmodsi4>
    43d8:	da 01       	movw	r26, r20
    43da:	c9 01       	movw	r24, r18
    43dc:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, u8_prescaler, 0, u8_outputCompare, 0, T2_INTERRUPT_CMP);
    43de:	88 e0       	ldi	r24, 0x08	; 8
    43e0:	60 e0       	ldi	r22, 0x00	; 0
    43e2:	49 81       	ldd	r20, Y+1	; 0x01
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	0a 81       	ldd	r16, Y+2	; 0x02
    43e8:	ee 24       	eor	r14, r14
    43ea:	0f 2e       	mov	r0, r31
    43ec:	f0 e8       	ldi	r31, 0x80	; 128
    43ee:	cf 2e       	mov	r12, r31
    43f0:	f0 2d       	mov	r31, r0
    43f2:	0e 94 84 20 	call	0x4108	; 0x4108 <timer2Init>
	timer2Start();
    43f6:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <timer2Start>
}
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	0f 90       	pop	r0
    4400:	0f 90       	pop	r0
    4402:	cf 91       	pop	r28
    4404:	df 91       	pop	r29
    4406:	0f 91       	pop	r16
    4408:	ef 90       	pop	r14
    440a:	cf 90       	pop	r12
    440c:	08 95       	ret

0000440e <Timer2_OVF_setCallBack>:

void Timer2_OVF_setCallBack(void(*local_ptr)(void))
{
    440e:	df 93       	push	r29
    4410:	cf 93       	push	r28
    4412:	00 d0       	rcall	.+0      	; 0x4414 <Timer2_OVF_setCallBack+0x6>
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
    4418:	9a 83       	std	Y+2, r25	; 0x02
    441a:	89 83       	std	Y+1, r24	; 0x01
	g_T2_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    441c:	89 81       	ldd	r24, Y+1	; 0x01
    441e:	9a 81       	ldd	r25, Y+2	; 0x02
    4420:	90 93 8d 00 	sts	0x008D, r25
    4424:	80 93 8c 00 	sts	0x008C, r24
}
    4428:	0f 90       	pop	r0
    442a:	0f 90       	pop	r0
    442c:	cf 91       	pop	r28
    442e:	df 91       	pop	r29
    4430:	08 95       	ret

00004432 <Timer2_CTC_setCallBack>:

void Timer2_CTC_setCallBack(void(*local_ptr)(void))
{
    4432:	df 93       	push	r29
    4434:	cf 93       	push	r28
    4436:	00 d0       	rcall	.+0      	; 0x4438 <Timer2_CTC_setCallBack+0x6>
    4438:	cd b7       	in	r28, 0x3d	; 61
    443a:	de b7       	in	r29, 0x3e	; 62
    443c:	9a 83       	std	Y+2, r25	; 0x02
    443e:	89 83       	std	Y+1, r24	; 0x01
	g_T2_CTC_callBackPtr = (volatile void(*)(void))local_ptr;
    4440:	89 81       	ldd	r24, Y+1	; 0x01
    4442:	9a 81       	ldd	r25, Y+2	; 0x02
    4444:	90 93 8b 00 	sts	0x008B, r25
    4448:	80 93 8a 00 	sts	0x008A, r24
}
    444c:	0f 90       	pop	r0
    444e:	0f 90       	pop	r0
    4450:	cf 91       	pop	r28
    4452:	df 91       	pop	r29
    4454:	08 95       	ret

00004456 <__mulsi3>:
    4456:	62 9f       	mul	r22, r18
    4458:	d0 01       	movw	r26, r0
    445a:	73 9f       	mul	r23, r19
    445c:	f0 01       	movw	r30, r0
    445e:	82 9f       	mul	r24, r18
    4460:	e0 0d       	add	r30, r0
    4462:	f1 1d       	adc	r31, r1
    4464:	64 9f       	mul	r22, r20
    4466:	e0 0d       	add	r30, r0
    4468:	f1 1d       	adc	r31, r1
    446a:	92 9f       	mul	r25, r18
    446c:	f0 0d       	add	r31, r0
    446e:	83 9f       	mul	r24, r19
    4470:	f0 0d       	add	r31, r0
    4472:	74 9f       	mul	r23, r20
    4474:	f0 0d       	add	r31, r0
    4476:	65 9f       	mul	r22, r21
    4478:	f0 0d       	add	r31, r0
    447a:	99 27       	eor	r25, r25
    447c:	72 9f       	mul	r23, r18
    447e:	b0 0d       	add	r27, r0
    4480:	e1 1d       	adc	r30, r1
    4482:	f9 1f       	adc	r31, r25
    4484:	63 9f       	mul	r22, r19
    4486:	b0 0d       	add	r27, r0
    4488:	e1 1d       	adc	r30, r1
    448a:	f9 1f       	adc	r31, r25
    448c:	bd 01       	movw	r22, r26
    448e:	cf 01       	movw	r24, r30
    4490:	11 24       	eor	r1, r1
    4492:	08 95       	ret

00004494 <__udivmodqi4>:
    4494:	99 1b       	sub	r25, r25
    4496:	79 e0       	ldi	r23, 0x09	; 9
    4498:	04 c0       	rjmp	.+8      	; 0x44a2 <__udivmodqi4_ep>

0000449a <__udivmodqi4_loop>:
    449a:	99 1f       	adc	r25, r25
    449c:	96 17       	cp	r25, r22
    449e:	08 f0       	brcs	.+2      	; 0x44a2 <__udivmodqi4_ep>
    44a0:	96 1b       	sub	r25, r22

000044a2 <__udivmodqi4_ep>:
    44a2:	88 1f       	adc	r24, r24
    44a4:	7a 95       	dec	r23
    44a6:	c9 f7       	brne	.-14     	; 0x449a <__udivmodqi4_loop>
    44a8:	80 95       	com	r24
    44aa:	08 95       	ret

000044ac <__udivmodhi4>:
    44ac:	aa 1b       	sub	r26, r26
    44ae:	bb 1b       	sub	r27, r27
    44b0:	51 e1       	ldi	r21, 0x11	; 17
    44b2:	07 c0       	rjmp	.+14     	; 0x44c2 <__udivmodhi4_ep>

000044b4 <__udivmodhi4_loop>:
    44b4:	aa 1f       	adc	r26, r26
    44b6:	bb 1f       	adc	r27, r27
    44b8:	a6 17       	cp	r26, r22
    44ba:	b7 07       	cpc	r27, r23
    44bc:	10 f0       	brcs	.+4      	; 0x44c2 <__udivmodhi4_ep>
    44be:	a6 1b       	sub	r26, r22
    44c0:	b7 0b       	sbc	r27, r23

000044c2 <__udivmodhi4_ep>:
    44c2:	88 1f       	adc	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	5a 95       	dec	r21
    44c8:	a9 f7       	brne	.-22     	; 0x44b4 <__udivmodhi4_loop>
    44ca:	80 95       	com	r24
    44cc:	90 95       	com	r25
    44ce:	bc 01       	movw	r22, r24
    44d0:	cd 01       	movw	r24, r26
    44d2:	08 95       	ret

000044d4 <__udivmodsi4>:
    44d4:	a1 e2       	ldi	r26, 0x21	; 33
    44d6:	1a 2e       	mov	r1, r26
    44d8:	aa 1b       	sub	r26, r26
    44da:	bb 1b       	sub	r27, r27
    44dc:	fd 01       	movw	r30, r26
    44de:	0d c0       	rjmp	.+26     	; 0x44fa <__udivmodsi4_ep>

000044e0 <__udivmodsi4_loop>:
    44e0:	aa 1f       	adc	r26, r26
    44e2:	bb 1f       	adc	r27, r27
    44e4:	ee 1f       	adc	r30, r30
    44e6:	ff 1f       	adc	r31, r31
    44e8:	a2 17       	cp	r26, r18
    44ea:	b3 07       	cpc	r27, r19
    44ec:	e4 07       	cpc	r30, r20
    44ee:	f5 07       	cpc	r31, r21
    44f0:	20 f0       	brcs	.+8      	; 0x44fa <__udivmodsi4_ep>
    44f2:	a2 1b       	sub	r26, r18
    44f4:	b3 0b       	sbc	r27, r19
    44f6:	e4 0b       	sbc	r30, r20
    44f8:	f5 0b       	sbc	r31, r21

000044fa <__udivmodsi4_ep>:
    44fa:	66 1f       	adc	r22, r22
    44fc:	77 1f       	adc	r23, r23
    44fe:	88 1f       	adc	r24, r24
    4500:	99 1f       	adc	r25, r25
    4502:	1a 94       	dec	r1
    4504:	69 f7       	brne	.-38     	; 0x44e0 <__udivmodsi4_loop>
    4506:	60 95       	com	r22
    4508:	70 95       	com	r23
    450a:	80 95       	com	r24
    450c:	90 95       	com	r25
    450e:	9b 01       	movw	r18, r22
    4510:	ac 01       	movw	r20, r24
    4512:	bd 01       	movw	r22, r26
    4514:	cf 01       	movw	r24, r30
    4516:	08 95       	ret

00004518 <__divmodsi4>:
    4518:	97 fb       	bst	r25, 7
    451a:	09 2e       	mov	r0, r25
    451c:	05 26       	eor	r0, r21
    451e:	0e d0       	rcall	.+28     	; 0x453c <__divmodsi4_neg1>
    4520:	57 fd       	sbrc	r21, 7
    4522:	04 d0       	rcall	.+8      	; 0x452c <__divmodsi4_neg2>
    4524:	d7 df       	rcall	.-82     	; 0x44d4 <__udivmodsi4>
    4526:	0a d0       	rcall	.+20     	; 0x453c <__divmodsi4_neg1>
    4528:	00 1c       	adc	r0, r0
    452a:	38 f4       	brcc	.+14     	; 0x453a <__divmodsi4_exit>

0000452c <__divmodsi4_neg2>:
    452c:	50 95       	com	r21
    452e:	40 95       	com	r20
    4530:	30 95       	com	r19
    4532:	21 95       	neg	r18
    4534:	3f 4f       	sbci	r19, 0xFF	; 255
    4536:	4f 4f       	sbci	r20, 0xFF	; 255
    4538:	5f 4f       	sbci	r21, 0xFF	; 255

0000453a <__divmodsi4_exit>:
    453a:	08 95       	ret

0000453c <__divmodsi4_neg1>:
    453c:	f6 f7       	brtc	.-4      	; 0x453a <__divmodsi4_exit>
    453e:	90 95       	com	r25
    4540:	80 95       	com	r24
    4542:	70 95       	com	r23
    4544:	61 95       	neg	r22
    4546:	7f 4f       	sbci	r23, 0xFF	; 255
    4548:	8f 4f       	sbci	r24, 0xFF	; 255
    454a:	9f 4f       	sbci	r25, 0xFF	; 255
    454c:	08 95       	ret

0000454e <__prologue_saves__>:
    454e:	2f 92       	push	r2
    4550:	3f 92       	push	r3
    4552:	4f 92       	push	r4
    4554:	5f 92       	push	r5
    4556:	6f 92       	push	r6
    4558:	7f 92       	push	r7
    455a:	8f 92       	push	r8
    455c:	9f 92       	push	r9
    455e:	af 92       	push	r10
    4560:	bf 92       	push	r11
    4562:	cf 92       	push	r12
    4564:	df 92       	push	r13
    4566:	ef 92       	push	r14
    4568:	ff 92       	push	r15
    456a:	0f 93       	push	r16
    456c:	1f 93       	push	r17
    456e:	cf 93       	push	r28
    4570:	df 93       	push	r29
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
    4576:	ca 1b       	sub	r28, r26
    4578:	db 0b       	sbc	r29, r27
    457a:	0f b6       	in	r0, 0x3f	; 63
    457c:	f8 94       	cli
    457e:	de bf       	out	0x3e, r29	; 62
    4580:	0f be       	out	0x3f, r0	; 63
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	09 94       	ijmp

00004586 <__epilogue_restores__>:
    4586:	2a 88       	ldd	r2, Y+18	; 0x12
    4588:	39 88       	ldd	r3, Y+17	; 0x11
    458a:	48 88       	ldd	r4, Y+16	; 0x10
    458c:	5f 84       	ldd	r5, Y+15	; 0x0f
    458e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4590:	7d 84       	ldd	r7, Y+13	; 0x0d
    4592:	8c 84       	ldd	r8, Y+12	; 0x0c
    4594:	9b 84       	ldd	r9, Y+11	; 0x0b
    4596:	aa 84       	ldd	r10, Y+10	; 0x0a
    4598:	b9 84       	ldd	r11, Y+9	; 0x09
    459a:	c8 84       	ldd	r12, Y+8	; 0x08
    459c:	df 80       	ldd	r13, Y+7	; 0x07
    459e:	ee 80       	ldd	r14, Y+6	; 0x06
    45a0:	fd 80       	ldd	r15, Y+5	; 0x05
    45a2:	0c 81       	ldd	r16, Y+4	; 0x04
    45a4:	1b 81       	ldd	r17, Y+3	; 0x03
    45a6:	aa 81       	ldd	r26, Y+2	; 0x02
    45a8:	b9 81       	ldd	r27, Y+1	; 0x01
    45aa:	ce 0f       	add	r28, r30
    45ac:	d1 1d       	adc	r29, r1
    45ae:	0f b6       	in	r0, 0x3f	; 63
    45b0:	f8 94       	cli
    45b2:	de bf       	out	0x3e, r29	; 62
    45b4:	0f be       	out	0x3f, r0	; 63
    45b6:	cd bf       	out	0x3d, r28	; 61
    45b8:	ed 01       	movw	r28, r26
    45ba:	08 95       	ret

000045bc <_exit>:
    45bc:	f8 94       	cli

000045be <__stop_program>:
    45be:	ff cf       	rjmp	.-2      	; 0x45be <__stop_program>
