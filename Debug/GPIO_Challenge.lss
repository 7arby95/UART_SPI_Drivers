
GPIO_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000027b8  0000284c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800064  00800064  00002850  2**0
                  ALLOC
  3 .stab         00003e58  00000000  00000000  00002850  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000273e  00000000  00000000  000066a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 92 03 	jmp	0x724	; 0x724 <__vector_3>
      10:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__vector_4>
      14:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_5>
      18:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__vector_6>
      1c:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_7>
      20:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_8>
      24:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__vector_9>
      28:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__vector_10>
      2c:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__vector_11>
      30:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_12>
      34:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_13>
      38:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_14>
      3c:	0c 94 c3 04 	jmp	0x986	; 0x986 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void app_rx(void);

uint8_t flag = 0;

int main(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	SPI_ConfigType configType =
	{
			SPI_MASTER,
			SPI_INTERRUPT_DISABLED,
			SPI_F_OSC_4
	};
      a6:	ce 01       	movw	r24, r28
      a8:	01 96       	adiw	r24, 0x01	; 1
      aa:	9d 83       	std	Y+5, r25	; 0x05
      ac:	8c 83       	std	Y+4, r24	; 0x04
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	ff 83       	std	Y+7, r31	; 0x07
      b4:	ee 83       	std	Y+6, r30	; 0x06
      b6:	f3 e0       	ldi	r31, 0x03	; 3
      b8:	f8 87       	std	Y+8, r31	; 0x08
      ba:	ee 81       	ldd	r30, Y+6	; 0x06
      bc:	ff 81       	ldd	r31, Y+7	; 0x07
      be:	00 80       	ld	r0, Z
      c0:	8e 81       	ldd	r24, Y+6	; 0x06
      c2:	9f 81       	ldd	r25, Y+7	; 0x07
      c4:	01 96       	adiw	r24, 0x01	; 1
      c6:	9f 83       	std	Y+7, r25	; 0x07
      c8:	8e 83       	std	Y+6, r24	; 0x06
      ca:	ec 81       	ldd	r30, Y+4	; 0x04
      cc:	fd 81       	ldd	r31, Y+5	; 0x05
      ce:	00 82       	st	Z, r0
      d0:	8c 81       	ldd	r24, Y+4	; 0x04
      d2:	9d 81       	ldd	r25, Y+5	; 0x05
      d4:	01 96       	adiw	r24, 0x01	; 1
      d6:	9d 83       	std	Y+5, r25	; 0x05
      d8:	8c 83       	std	Y+4, r24	; 0x04
      da:	98 85       	ldd	r25, Y+8	; 0x08
      dc:	91 50       	subi	r25, 0x01	; 1
      de:	98 87       	std	Y+8, r25	; 0x08
      e0:	e8 85       	ldd	r30, Y+8	; 0x08
      e2:	ee 23       	and	r30, r30
      e4:	51 f7       	brne	.-44     	; 0xba <main+0x28>

	gpioPinDirection(GPIOA, BIT0, INPUT);
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	61 e0       	ldi	r22, 0x01	; 1
      ea:	40 e0       	ldi	r20, 0x00	; 0
      ec:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>

//	softwareDelayMs(200);

	SPI_init(&configType);
      f0:	ce 01       	movw	r24, r28
      f2:	01 96       	adiw	r24, 0x01	; 1
      f4:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_init>

	while(1)
	{
		softwareDelayMs(10);
      f8:	6a e0       	ldi	r22, 0x0A	; 10
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 21 0c 	call	0x1842	; 0x1842 <softwareDelayMs>
		if(PORTA_PIN & (1 << 0))
     104:	e9 e3       	ldi	r30, 0x39	; 57
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	88 2f       	mov	r24, r24
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	81 70       	andi	r24, 0x01	; 1
     110:	90 70       	andi	r25, 0x00	; 0
     112:	88 23       	and	r24, r24
     114:	21 f0       	breq	.+8      	; 0x11e <main+0x8c>
		{
			SPI_sendByte(1);
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 66 03 	call	0x6cc	; 0x6cc <SPI_sendByte>
     11c:	ed cf       	rjmp	.-38     	; 0xf8 <main+0x66>
		}else
		{
			SPI_sendByte(0);
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	0e 94 66 03 	call	0x6cc	; 0x6cc <SPI_sendByte>
     124:	e9 cf       	rjmp	.-46     	; 0xf8 <main+0x66>

00000126 <app_tx>:
}

/*- APIs IMPLEMENTATION ------------------------------------*/

void app_tx(void)
{
     126:	df 93       	push	r29
     128:	cf 93       	push	r28
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62

}
     12e:	cf 91       	pop	r28
     130:	df 91       	pop	r29
     132:	08 95       	ret

00000134 <app_rx>:

void app_rx(void)
{
     134:	df 93       	push	r29
     136:	cf 93       	push	r28
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
	flag = 1;
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	80 93 64 00 	sts	0x0064, r24
}
     142:	cf 91       	pop	r28
     144:	df 91       	pop	r29
     146:	08 95       	ret

00000148 <app_spi>:

void app_spi(void)
{
     148:	df 93       	push	r29
     14a:	cf 93       	push	r28
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62

}
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <GPIO_REQ7>:


void GPIO_REQ7(void)
{
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	00 d0       	rcall	.+0      	; 0x15c <GPIO_REQ7+0x6>
     15c:	00 d0       	rcall	.+0      	; 0x15e <GPIO_REQ7+0x8>
     15e:	0f 92       	push	r0
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_countUpCounter = 0;
     164:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_delayCounter = 0;
     166:	19 82       	std	Y+1, r1	; 0x01
     168:	1a 82       	std	Y+2, r1	; 0x02
     16a:	1b 82       	std	Y+3, r1	; 0x03
     16c:	1c 82       	std	Y+4, r1	; 0x04

	sevenSegInit(SEG_0);
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	0e 94 49 0b 	call	0x1692	; 0x1692 <sevenSegInit>
	sevenSegInit(SEG_1);
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 49 0b 	call	0x1692	; 0x1692 <sevenSegInit>
     17a:	52 c0       	rjmp	.+164    	; 0x220 <GPIO_REQ7+0xca>

	while(1)
	{
		while(u8_countUpCounter <= 99)
		{
			sevenSegEnable(SEG_0);
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0e 94 94 0b 	call	0x1728	; 0x1728 <sevenSegEnable>
			sevenSegWrite(SEG_0, ((u8_countUpCounter / 10) % 10));
     182:	8d 81       	ldd	r24, Y+5	; 0x05
     184:	9a e0       	ldi	r25, 0x0A	; 10
     186:	69 2f       	mov	r22, r25
     188:	0e 94 98 13 	call	0x2730	; 0x2730 <__udivmodqi4>
     18c:	9a e0       	ldi	r25, 0x0A	; 10
     18e:	69 2f       	mov	r22, r25
     190:	0e 94 98 13 	call	0x2730	; 0x2730 <__udivmodqi4>
     194:	89 2f       	mov	r24, r25
     196:	98 2f       	mov	r25, r24
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	69 2f       	mov	r22, r25
     19c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <sevenSegWrite>
			softwareDelayMs(1);
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 21 0c 	call	0x1842	; 0x1842 <softwareDelayMs>
			sevenSegDisable(SEG_0);
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	0e 94 c1 0b 	call	0x1782	; 0x1782 <sevenSegDisable>

			sevenSegEnable(SEG_1);
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	0e 94 94 0b 	call	0x1728	; 0x1728 <sevenSegEnable>
			sevenSegWrite(SEG_1, (u8_countUpCounter % 10));
     1b8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ba:	9a e0       	ldi	r25, 0x0A	; 10
     1bc:	69 2f       	mov	r22, r25
     1be:	0e 94 98 13 	call	0x2730	; 0x2730 <__udivmodqi4>
     1c2:	89 2f       	mov	r24, r25
     1c4:	98 2f       	mov	r25, r24
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	69 2f       	mov	r22, r25
     1ca:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <sevenSegWrite>
			softwareDelayMs(1);
     1ce:	61 e0       	ldi	r22, 0x01	; 1
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 21 0c 	call	0x1842	; 0x1842 <softwareDelayMs>
			sevenSegDisable(SEG_1);
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 c1 0b 	call	0x1782	; 0x1782 <sevenSegDisable>

			u32_delayCounter++;
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	9a 81       	ldd	r25, Y+2	; 0x02
     1e4:	ab 81       	ldd	r26, Y+3	; 0x03
     1e6:	bc 81       	ldd	r27, Y+4	; 0x04
     1e8:	01 96       	adiw	r24, 0x01	; 1
     1ea:	a1 1d       	adc	r26, r1
     1ec:	b1 1d       	adc	r27, r1
     1ee:	89 83       	std	Y+1, r24	; 0x01
     1f0:	9a 83       	std	Y+2, r25	; 0x02
     1f2:	ab 83       	std	Y+3, r26	; 0x03
     1f4:	bc 83       	std	Y+4, r27	; 0x04

			if(u32_delayCounter % 469 == 0)
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	9a 81       	ldd	r25, Y+2	; 0x02
     1fa:	ab 81       	ldd	r26, Y+3	; 0x03
     1fc:	bc 81       	ldd	r27, Y+4	; 0x04
     1fe:	25 ed       	ldi	r18, 0xD5	; 213
     200:	31 e0       	ldi	r19, 0x01	; 1
     202:	40 e0       	ldi	r20, 0x00	; 0
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	bc 01       	movw	r22, r24
     208:	cd 01       	movw	r24, r26
     20a:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
     20e:	dc 01       	movw	r26, r24
     210:	cb 01       	movw	r24, r22
     212:	00 97       	sbiw	r24, 0x00	; 0
     214:	a1 05       	cpc	r26, r1
     216:	b1 05       	cpc	r27, r1
     218:	19 f4       	brne	.+6      	; 0x220 <GPIO_REQ7+0xca>
				u8_countUpCounter++;
     21a:	8d 81       	ldd	r24, Y+5	; 0x05
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	8d 83       	std	Y+5, r24	; 0x05
	sevenSegInit(SEG_0);
	sevenSegInit(SEG_1);

	while(1)
	{
		while(u8_countUpCounter <= 99)
     220:	8d 81       	ldd	r24, Y+5	; 0x05
     222:	84 36       	cpi	r24, 0x64	; 100
     224:	08 f4       	brcc	.+2      	; 0x228 <GPIO_REQ7+0xd2>
     226:	aa cf       	rjmp	.-172    	; 0x17c <GPIO_REQ7+0x26>
     228:	fb cf       	rjmp	.-10     	; 0x220 <GPIO_REQ7+0xca>

0000022a <GPIO_REQ8>:
	}
}


void GPIO_REQ8(void)
{
     22a:	df 93       	push	r29
     22c:	cf 93       	push	r28
     22e:	00 d0       	rcall	.+0      	; 0x230 <GPIO_REQ8+0x6>
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_appCounter = 0, u8_delayDivider = 20;
     234:	1a 82       	std	Y+2, r1	; 0x02
     236:	84 e1       	ldi	r24, 0x14	; 20
     238:	89 83       	std	Y+1, r24	; 0x01

	Led_Init(LED_1);
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 ab 09 	call	0x1356	; 0x1356 <Led_Init>
	pushButtonInit(BTN_1);
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 b3 0a 	call	0x1566	; 0x1566 <pushButtonInit>

	while(1)
	{
		u8_delayDivider = 20;
     246:	84 e1       	ldi	r24, 0x14	; 20
     248:	89 83       	std	Y+1, r24	; 0x01
		if(pushButtonGetStatus(BTN_1) == Pressed)
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pushButtonGetStatus>
     250:	82 30       	cpi	r24, 0x02	; 2
     252:	c9 f7       	brne	.-14     	; 0x246 <GPIO_REQ8+0x1c>
		{
			while(pushButtonGetStatus(BTN_1) != Released);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pushButtonGetStatus>
     25a:	88 23       	and	r24, r24
     25c:	d9 f7       	brne	.-10     	; 0x254 <GPIO_REQ8+0x2a>
			u8_appCounter++;
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	8f 5f       	subi	r24, 0xFF	; 255
     262:	8a 83       	std	Y+2, r24	; 0x02
     264:	24 c0       	rjmp	.+72     	; 0x2ae <GPIO_REQ8+0x84>
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	0e 94 ee 09 	call	0x13dc	; 0x13dc <Led_On>
     26c:	17 c0       	rjmp	.+46     	; 0x29c <GPIO_REQ8+0x72>
				while(u8_delayDivider > 0)
				{
					softwareDelayMs(49);
     26e:	61 e3       	ldi	r22, 0x31	; 49
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 21 0c 	call	0x1842	; 0x1842 <softwareDelayMs>
					if(pushButtonGetStatus(BTN_1) == Pressed)
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pushButtonGetStatus>
     280:	82 30       	cpi	r24, 0x02	; 2
     282:	49 f4       	brne	.+18     	; 0x296 <GPIO_REQ8+0x6c>
					{
						softwareDelayMs(300);
     284:	6c e2       	ldi	r22, 0x2C	; 44
     286:	71 e0       	ldi	r23, 0x01	; 1
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 21 0c 	call	0x1842	; 0x1842 <softwareDelayMs>
						u8_delayDivider += 14;
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	82 5f       	subi	r24, 0xF2	; 242
     294:	89 83       	std	Y+1, r24	; 0x01
					}
					u8_delayDivider--;
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	81 50       	subi	r24, 0x01	; 1
     29a:	89 83       	std	Y+1, r24	; 0x01
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
				while(u8_delayDivider > 0)
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	88 23       	and	r24, r24
     2a0:	31 f7       	brne	.-52     	; 0x26e <GPIO_REQ8+0x44>
						softwareDelayMs(300);
						u8_delayDivider += 14;
					}
					u8_delayDivider--;
				}
				Led_Off(LED_1);
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0e 94 31 0a 	call	0x1462	; 0x1462 <Led_Off>
				u8_appCounter--;
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	81 50       	subi	r24, 0x01	; 1
     2ac:	8a 83       	std	Y+2, r24	; 0x02
		u8_delayDivider = 20;
		if(pushButtonGetStatus(BTN_1) == Pressed)
		{
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
     2ae:	8a 81       	ldd	r24, Y+2	; 0x02
     2b0:	88 23       	and	r24, r24
     2b2:	c9 f6       	brne	.-78     	; 0x266 <GPIO_REQ8+0x3c>
				Led_Off(LED_1);
				u8_appCounter--;
			}
			break;
		}
	}
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	cf 91       	pop	r28
     2ba:	df 91       	pop	r29
     2bc:	08 95       	ret

000002be <GPIO_REQ9>:
}



void GPIO_REQ9(void)
{
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <GPIO_REQ9+0x6>
     2c4:	0f 92       	push	r0
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentState = GO;
     2ca:	19 82       	std	Y+1, r1	; 0x01

	Led_Init(LED_1);
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0e 94 ab 09 	call	0x1356	; 0x1356 <Led_Init>
	Led_Init(LED_2);
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0e 94 ab 09 	call	0x1356	; 0x1356 <Led_Init>
	Led_Init(LED_3);
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	0e 94 ab 09 	call	0x1356	; 0x1356 <Led_Init>

	while(1)
	{
		switch(u8_currentState)
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	28 2f       	mov	r18, r24
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	3b 83       	std	Y+3, r19	; 0x03
     2e6:	2a 83       	std	Y+2, r18	; 0x02
     2e8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ea:	9b 81       	ldd	r25, Y+3	; 0x03
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	91 05       	cpc	r25, r1
     2f0:	a9 f0       	breq	.+42     	; 0x31c <GPIO_REQ9+0x5e>
     2f2:	2a 81       	ldd	r18, Y+2	; 0x02
     2f4:	3b 81       	ldd	r19, Y+3	; 0x03
     2f6:	22 30       	cpi	r18, 0x02	; 2
     2f8:	31 05       	cpc	r19, r1
     2fa:	e1 f0       	breq	.+56     	; 0x334 <GPIO_REQ9+0x76>
     2fc:	8a 81       	ldd	r24, Y+2	; 0x02
     2fe:	9b 81       	ldd	r25, Y+3	; 0x03
     300:	00 97       	sbiw	r24, 0x00	; 0
     302:	11 f5       	brne	.+68     	; 0x348 <GPIO_REQ9+0x8a>
		{
		case GO:
			Led_On(LED_1);
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 ee 09 	call	0x13dc	; 0x13dc <Led_On>
			Led_Off(LED_2);
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	0e 94 31 0a 	call	0x1462	; 0x1462 <Led_Off>
			Led_Off(LED_3);
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 31 0a 	call	0x1462	; 0x1462 <Led_Off>
			u8_currentState = STOP1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	89 83       	std	Y+1, r24	; 0x01
     31a:	16 c0       	rjmp	.+44     	; 0x348 <GPIO_REQ9+0x8a>
			break;
		case STOP1:
			Led_Off(LED_1);
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	0e 94 31 0a 	call	0x1462	; 0x1462 <Led_Off>
			Led_On(LED_2);
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	0e 94 ee 09 	call	0x13dc	; 0x13dc <Led_On>
			Led_Off(LED_3);
     328:	83 e0       	ldi	r24, 0x03	; 3
     32a:	0e 94 31 0a 	call	0x1462	; 0x1462 <Led_Off>
			u8_currentState = GET_READY;
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	0a c0       	rjmp	.+20     	; 0x348 <GPIO_REQ9+0x8a>
			break;
		case GET_READY:
			Led_Off(LED_1);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 31 0a 	call	0x1462	; 0x1462 <Led_Off>
			Led_Off(LED_2);
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	0e 94 31 0a 	call	0x1462	; 0x1462 <Led_Off>
			Led_On(LED_3);
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	0e 94 ee 09 	call	0x13dc	; 0x13dc <Led_On>
			u8_currentState = GO;
     346:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		softwareDelayMs(1000);
     348:	68 ee       	ldi	r22, 0xE8	; 232
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 21 0c 	call	0x1842	; 0x1842 <softwareDelayMs>
     354:	c4 cf       	rjmp	.-120    	; 0x2de <GPIO_REQ9+0x20>

00000356 <HwPWMInit>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void HwPWMInit(void)
{
     356:	df 93       	push	r29
     358:	cf 93       	push	r28
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
	/* set OC1A and OC1B pins as output pins */
	gpioPinDirection(GPIOD, (BIT4 | BIT5), OUTPUT);
     35e:	83 e0       	ldi	r24, 0x03	; 3
     360:	60 e3       	ldi	r22, 0x30	; 48
     362:	4f ef       	ldi	r20, 0xFF	; 255
     364:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>

	/* PWM mode */
	CLEAR_BIT(TCCR1A, FOC1B);
     368:	af e4       	ldi	r26, 0x4F	; 79
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	ef e4       	ldi	r30, 0x4F	; 79
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8b 7f       	andi	r24, 0xFB	; 251
     374:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, FOC1A);
     376:	af e4       	ldi	r26, 0x4F	; 79
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	ef e4       	ldi	r30, 0x4F	; 79
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	87 7f       	andi	r24, 0xF7	; 247
     382:	8c 93       	st	X, r24

	/* fast PWM mode using OCR1A */
	CLEAR_BIT(TCCR1A, WGM10);
     384:	af e4       	ldi	r26, 0x4F	; 79
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	ef e4       	ldi	r30, 0x4F	; 79
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	8e 7f       	andi	r24, 0xFE	; 254
     390:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
     392:	af e4       	ldi	r26, 0x4F	; 79
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	ef e4       	ldi	r30, 0x4F	; 79
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
     3a0:	ae e4       	ldi	r26, 0x4E	; 78
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	ee e4       	ldi	r30, 0x4E	; 78
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	88 60       	ori	r24, 0x08	; 8
     3ac:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
     3ae:	ae e4       	ldi	r26, 0x4E	; 78
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	ee e4       	ldi	r30, 0x4E	; 78
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	80 61       	ori	r24, 0x10	; 16
     3ba:	8c 93       	st	X, r24

	/* use OCR1A and OCR1B */
	CLEAR_BIT(TCCR1A, COM1A0);
     3bc:	af e4       	ldi	r26, 0x4F	; 79
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	ef e4       	ldi	r30, 0x4F	; 79
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	8f 7b       	andi	r24, 0xBF	; 191
     3c8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
     3ca:	af e4       	ldi	r26, 0x4F	; 79
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	ef e4       	ldi	r30, 0x4F	; 79
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B0);
     3d8:	af e4       	ldi	r26, 0x4F	; 79
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	ef e4       	ldi	r30, 0x4F	; 79
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	8f 7e       	andi	r24, 0xEF	; 239
     3e4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1);
     3e6:	af e4       	ldi	r26, 0x4F	; 79
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	ef e4       	ldi	r30, 0x4F	; 79
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	80 62       	ori	r24, 0x20	; 32
     3f2:	8c 93       	st	X, r24

	/* clear input capture bits */
	CLEAR_BIT(TCCR1B, ICES1);
     3f4:	ae e4       	ldi	r26, 0x4E	; 78
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	ee e4       	ldi	r30, 0x4E	; 78
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	8f 7b       	andi	r24, 0xBF	; 191
     400:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, ICNC1);
     402:	ae e4       	ldi	r26, 0x4E	; 78
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	ee e4       	ldi	r30, 0x4E	; 78
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	8f 77       	andi	r24, 0x7F	; 127
     40e:	8c 93       	st	X, r24

	/* start counting from 0 */
	TCNT1 = 0;
     410:	ec e4       	ldi	r30, 0x4C	; 76
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	11 82       	std	Z+1, r1	; 0x01
     416:	10 82       	st	Z, r1
}
     418:	cf 91       	pop	r28
     41a:	df 91       	pop	r29
     41c:	08 95       	ret

0000041e <HwPWMSetDuty>:

void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency)
{
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	00 d0       	rcall	.+0      	; 0x42c <HwPWMSetDuty+0xe>
     42c:	00 d0       	rcall	.+0      	; 0x42e <HwPWMSetDuty+0x10>
     42e:	0f 92       	push	r0
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	4a 83       	std	Y+2, r20	; 0x02
     438:	5b 83       	std	Y+3, r21	; 0x03
     43a:	6c 83       	std	Y+4, r22	; 0x04
     43c:	7d 83       	std	Y+5, r23	; 0x05
	/* if condition to decide the prescaler and the ICR1 register content according to it */
	if(a_u32_frequency >= 245)
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	9b 81       	ldd	r25, Y+3	; 0x03
     442:	ac 81       	ldd	r26, Y+4	; 0x04
     444:	bd 81       	ldd	r27, Y+5	; 0x05
     446:	85 3f       	cpi	r24, 0xF5	; 245
     448:	91 05       	cpc	r25, r1
     44a:	a1 05       	cpc	r26, r1
     44c:	b1 05       	cpc	r27, r1
     44e:	d8 f0       	brcs	.+54     	; 0x486 <HwPWMSetDuty+0x68>
	{
		ICR1 = F_CPU / (1UL * a_u32_frequency);
     450:	06 e4       	ldi	r16, 0x46	; 70
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	94 e2       	ldi	r25, 0x24	; 36
     458:	a4 ef       	ldi	r26, 0xF4	; 244
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	2a 81       	ldd	r18, Y+2	; 0x02
     45e:	3b 81       	ldd	r19, Y+3	; 0x03
     460:	4c 81       	ldd	r20, Y+4	; 0x04
     462:	5d 81       	ldd	r21, Y+5	; 0x05
     464:	bc 01       	movw	r22, r24
     466:	cd 01       	movw	r24, r26
     468:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
     46c:	da 01       	movw	r26, r20
     46e:	c9 01       	movw	r24, r18
     470:	f8 01       	movw	r30, r16
     472:	91 83       	std	Z+1, r25	; 0x01
     474:	80 83       	st	Z, r24

		/* set clock for the timer */
		TCCR1B |= T1_PRESCALER_NO;
     476:	ae e4       	ldi	r26, 0x4E	; 78
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	ee e4       	ldi	r30, 0x4E	; 78
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	81 60       	ori	r24, 0x01	; 1
     482:	8c 93       	st	X, r24
     484:	31 c0       	rjmp	.+98     	; 0x4e8 <HwPWMSetDuty+0xca>
	}else if(a_u32_frequency >= 31)
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	9b 81       	ldd	r25, Y+3	; 0x03
     48a:	ac 81       	ldd	r26, Y+4	; 0x04
     48c:	bd 81       	ldd	r27, Y+5	; 0x05
     48e:	8f 31       	cpi	r24, 0x1F	; 31
     490:	91 05       	cpc	r25, r1
     492:	a1 05       	cpc	r26, r1
     494:	b1 05       	cpc	r27, r1
     496:	40 f1       	brcs	.+80     	; 0x4e8 <HwPWMSetDuty+0xca>
	{
		ICR1 = F_CPU / (8UL * a_u32_frequency);
     498:	06 e4       	ldi	r16, 0x46	; 70
     49a:	10 e0       	ldi	r17, 0x00	; 0
     49c:	8a 81       	ldd	r24, Y+2	; 0x02
     49e:	9b 81       	ldd	r25, Y+3	; 0x03
     4a0:	ac 81       	ldd	r26, Y+4	; 0x04
     4a2:	bd 81       	ldd	r27, Y+5	; 0x05
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	aa 1f       	adc	r26, r26
     4aa:	bb 1f       	adc	r27, r27
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	aa 1f       	adc	r26, r26
     4b2:	bb 1f       	adc	r27, r27
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	aa 1f       	adc	r26, r26
     4ba:	bb 1f       	adc	r27, r27
     4bc:	9c 01       	movw	r18, r24
     4be:	ad 01       	movw	r20, r26
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	94 e2       	ldi	r25, 0x24	; 36
     4c4:	a4 ef       	ldi	r26, 0xF4	; 244
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	bc 01       	movw	r22, r24
     4ca:	cd 01       	movw	r24, r26
     4cc:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
     4d0:	da 01       	movw	r26, r20
     4d2:	c9 01       	movw	r24, r18
     4d4:	f8 01       	movw	r30, r16
     4d6:	91 83       	std	Z+1, r25	; 0x01
     4d8:	80 83       	st	Z, r24

		/* set clock for the timer */
		TCCR1B |= T1_PRESCALER_8;
     4da:	ae e4       	ldi	r26, 0x4E	; 78
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	ee e4       	ldi	r30, 0x4E	; 78
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	8c 93       	st	X, r24
	}
	
	/* set the value of OCR1A:B which decides the duty cycle of the motor */
	OCR1A = a_u8_duty * (ICR1 / 100);
     4e8:	0f 2e       	mov	r0, r31
     4ea:	fa e4       	ldi	r31, 0x4A	; 74
     4ec:	ef 2e       	mov	r14, r31
     4ee:	ff 24       	eor	r15, r15
     4f0:	f0 2d       	mov	r31, r0
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	08 2f       	mov	r16, r24
     4f6:	10 e0       	ldi	r17, 0x00	; 0
     4f8:	e6 e4       	ldi	r30, 0x46	; 70
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	91 81       	ldd	r25, Z+1	; 0x01
     500:	24 e6       	ldi	r18, 0x64	; 100
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	b9 01       	movw	r22, r18
     506:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
     50a:	cb 01       	movw	r24, r22
     50c:	9c 01       	movw	r18, r24
     50e:	02 9f       	mul	r16, r18
     510:	c0 01       	movw	r24, r0
     512:	03 9f       	mul	r16, r19
     514:	90 0d       	add	r25, r0
     516:	12 9f       	mul	r17, r18
     518:	90 0d       	add	r25, r0
     51a:	11 24       	eor	r1, r1
     51c:	f7 01       	movw	r30, r14
     51e:	91 83       	std	Z+1, r25	; 0x01
     520:	80 83       	st	Z, r24
	OCR1B = a_u8_duty * (ICR1 / 100);
     522:	0f 2e       	mov	r0, r31
     524:	f8 e4       	ldi	r31, 0x48	; 72
     526:	ef 2e       	mov	r14, r31
     528:	ff 24       	eor	r15, r15
     52a:	f0 2d       	mov	r31, r0
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	08 2f       	mov	r16, r24
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	e6 e4       	ldi	r30, 0x46	; 70
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	24 e6       	ldi	r18, 0x64	; 100
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	b9 01       	movw	r22, r18
     540:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
     544:	cb 01       	movw	r24, r22
     546:	9c 01       	movw	r18, r24
     548:	02 9f       	mul	r16, r18
     54a:	c0 01       	movw	r24, r0
     54c:	03 9f       	mul	r16, r19
     54e:	90 0d       	add	r25, r0
     550:	12 9f       	mul	r17, r18
     552:	90 0d       	add	r25, r0
     554:	11 24       	eor	r1, r1
     556:	f7 01       	movw	r30, r14
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	80 83       	st	Z, r24
}
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	cf 91       	pop	r28
     568:	df 91       	pop	r29
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	08 95       	ret

00000574 <__vector_12>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(SPI_STC_vect)
{
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	2f 93       	push	r18
     580:	3f 93       	push	r19
     582:	4f 93       	push	r20
     584:	5f 93       	push	r21
     586:	6f 93       	push	r22
     588:	7f 93       	push	r23
     58a:	8f 93       	push	r24
     58c:	9f 93       	push	r25
     58e:	af 93       	push	r26
     590:	bf 93       	push	r27
     592:	ef 93       	push	r30
     594:	ff 93       	push	r31
     596:	df 93       	push	r29
     598:	cf 93       	push	r28
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
	if(g_SPI_callBackPtr != NULL)
     59e:	80 91 65 00 	lds	r24, 0x0065
     5a2:	90 91 66 00 	lds	r25, 0x0066
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	29 f0       	breq	.+10     	; 0x5b4 <__vector_12+0x40>
	{
		g_SPI_callBackPtr();
     5aa:	e0 91 65 00 	lds	r30, 0x0065
     5ae:	f0 91 66 00 	lds	r31, 0x0066
     5b2:	09 95       	icall
	}
}
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <SPI_init>:

/*
 * Description : A Function to Initialize the SPI Driver.
 */
void SPI_init(const SPI_ConfigType* ConfigPtr)
{
     5da:	df 93       	push	r29
     5dc:	cf 93       	push	r28
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <SPI_init+0x6>
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	9a 83       	std	Y+2, r25	; 0x02
     5e6:	89 83       	std	Y+1, r24	; 0x01
	/* In case the MCU will be configured as a slave */
	if(ConfigPtr->MasterSlaveSelect == SPI_SLAVE)
     5e8:	e9 81       	ldd	r30, Y+1	; 0x01
     5ea:	fa 81       	ldd	r31, Y+2	; 0x02
     5ec:	80 81       	ld	r24, Z
     5ee:	88 23       	and	r24, r24
     5f0:	91 f4       	brne	.+36     	; 0x616 <SPI_init+0x3c>
	{
		/* select the slave mode and set the pins accordingly */
		gpioPinDirection(SPI_GPIO, SS | MOSI | SCK, INPUT);
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	60 eb       	ldi	r22, 0xB0	; 176
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		gpioPinDirection(SPI_GPIO, MISO, OUTPUT);
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	60 e4       	ldi	r22, 0x40	; 64
     600:	4f ef       	ldi	r20, 0xFF	; 255
     602:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		CLEAR_BIT(SPCR, MSTR);
     606:	ad e2       	ldi	r26, 0x2D	; 45
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	ed e2       	ldi	r30, 0x2D	; 45
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	8f 7e       	andi	r24, 0xEF	; 239
     612:	8c 93       	st	X, r24
     614:	16 c0       	rjmp	.+44     	; 0x642 <SPI_init+0x68>
	}
	/* In case the MCU will be configured as a master */
	else if(ConfigPtr->MasterSlaveSelect == SPI_MASTER)
     616:	e9 81       	ldd	r30, Y+1	; 0x01
     618:	fa 81       	ldd	r31, Y+2	; 0x02
     61a:	80 81       	ld	r24, Z
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	89 f4       	brne	.+34     	; 0x642 <SPI_init+0x68>
	{
		/* select the master mode and set the pins accordingly */
		gpioPinDirection(SPI_GPIO, SS | MOSI | SCK, OUTPUT);
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	60 eb       	ldi	r22, 0xB0	; 176
     624:	4f ef       	ldi	r20, 0xFF	; 255
     626:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		gpioPinDirection(SPI_GPIO, MISO, INPUT);
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	60 e4       	ldi	r22, 0x40	; 64
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		SET_BIT(SPCR, MSTR);
     634:	ad e2       	ldi	r26, 0x2D	; 45
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	ed e2       	ldi	r30, 0x2D	; 45
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	80 61       	ori	r24, 0x10	; 16
     640:	8c 93       	st	X, r24
	}

	/* Selecting the interrupt mode (enabled of disabled) */
	SPCR = (SPCR & 0x7F) | ConfigPtr->Mode;
     642:	ad e2       	ldi	r26, 0x2D	; 45
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	ed e2       	ldi	r30, 0x2D	; 45
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	98 2f       	mov	r25, r24
     64e:	9f 77       	andi	r25, 0x7F	; 127
     650:	e9 81       	ldd	r30, Y+1	; 0x01
     652:	fa 81       	ldd	r31, Y+2	; 0x02
     654:	81 81       	ldd	r24, Z+1	; 0x01
     656:	89 2b       	or	r24, r25
     658:	8c 93       	st	X, r24
	/* Enable the SPI module */
	SET_BIT(SPCR, SPE);
     65a:	ad e2       	ldi	r26, 0x2D	; 45
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	ed e2       	ldi	r30, 0x2D	; 45
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	80 64       	ori	r24, 0x40	; 64
     666:	8c 93       	st	X, r24

	/* Selecting the clock rate */
	SPCR = (SPCR & 0xFC) | ((ConfigPtr->ClockRateSelect) & 0x03);
     668:	ad e2       	ldi	r26, 0x2D	; 45
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	ed e2       	ldi	r30, 0x2D	; 45
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	98 2f       	mov	r25, r24
     674:	9c 7f       	andi	r25, 0xFC	; 252
     676:	e9 81       	ldd	r30, Y+1	; 0x01
     678:	fa 81       	ldd	r31, Y+2	; 0x02
     67a:	82 81       	ldd	r24, Z+2	; 0x02
     67c:	83 70       	andi	r24, 0x03	; 3
     67e:	89 2b       	or	r24, r25
     680:	8c 93       	st	X, r24
	SPSR = (SPSR & 0xFE) | ((ConfigPtr->ClockRateSelect) >> 2);
     682:	ae e2       	ldi	r26, 0x2E	; 46
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	ee e2       	ldi	r30, 0x2E	; 46
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	98 2f       	mov	r25, r24
     68e:	9e 7f       	andi	r25, 0xFE	; 254
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	82 81       	ldd	r24, Z+2	; 0x02
     696:	86 95       	lsr	r24
     698:	86 95       	lsr	r24
     69a:	89 2b       	or	r24, r25
     69c:	8c 93       	st	X, r24
}
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	08 95       	ret

000006a8 <SPI_setCallBack>:

/*
 * Description : A Function to set the call back function.
 */
void SPI_setCallBack(void(*a_ptr)(void))
{
     6a8:	df 93       	push	r29
     6aa:	cf 93       	push	r28
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <SPI_setCallBack+0x6>
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	9a 83       	std	Y+2, r25	; 0x02
     6b4:	89 83       	std	Y+1, r24	; 0x01
	g_SPI_callBackPtr = (volatile void (*)(void))a_ptr;
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	90 93 66 00 	sts	0x0066, r25
     6be:	80 93 65 00 	sts	0x0065, r24
}
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	cf 91       	pop	r28
     6c8:	df 91       	pop	r29
     6ca:	08 95       	ret

000006cc <SPI_sendByte>:

/*
 * Description : A Function to send a byte.
 */
void SPI_sendByte(const uint8_t data)
{
     6cc:	df 93       	push	r29
     6ce:	cf 93       	push	r28
     6d0:	0f 92       	push	r0
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	89 83       	std	Y+1, r24	; 0x01
	/* send the data */
	SPDR = data;
     6d8:	ef e2       	ldi	r30, 0x2F	; 47
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	80 83       	st	Z, r24
	/* busy-waiting the SPIE bit in the SPCR register in case interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
     6e0:	ed e2       	ldi	r30, 0x2D	; 45
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	88 23       	and	r24, r24
     6e8:	2c f0       	brlt	.+10     	; 0x6f4 <SPI_sendByte+0x28>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
     6ea:	ee e2       	ldi	r30, 0x2E	; 46
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	88 23       	and	r24, r24
     6f2:	dc f7       	brge	.-10     	; 0x6ea <SPI_sendByte+0x1e>
	}
}
     6f4:	0f 90       	pop	r0
     6f6:	cf 91       	pop	r28
     6f8:	df 91       	pop	r29
     6fa:	08 95       	ret

000006fc <SPI_receiveByte>:

/*
 * Description : A Function to receive a byte.
 */
uint8_t SPI_receiveByte(void)
{
     6fc:	df 93       	push	r29
     6fe:	cf 93       	push	r28
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the SPIE bit in case the interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
     704:	ed e2       	ldi	r30, 0x2D	; 45
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	88 23       	and	r24, r24
     70c:	2c f0       	brlt	.+10     	; 0x718 <SPI_receiveByte+0x1c>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
     70e:	ee e2       	ldi	r30, 0x2E	; 46
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	88 23       	and	r24, r24
     716:	dc f7       	brge	.-10     	; 0x70e <SPI_receiveByte+0x12>
	}
	/* read the data */
	return SPDR;
     718:	ef e2       	ldi	r30, 0x2F	; 47
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
}
     71e:	cf 91       	pop	r28
     720:	df 91       	pop	r29
     722:	08 95       	ret

00000724 <__vector_3>:


/*- ISR's --------------------------------------------------*/

ISR(INT2_vect)
{
     724:	1f 92       	push	r1
     726:	0f 92       	push	r0
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	0f 92       	push	r0
     72c:	11 24       	eor	r1, r1
     72e:	2f 93       	push	r18
     730:	3f 93       	push	r19
     732:	4f 93       	push	r20
     734:	5f 93       	push	r21
     736:	6f 93       	push	r22
     738:	7f 93       	push	r23
     73a:	8f 93       	push	r24
     73c:	9f 93       	push	r25
     73e:	af 93       	push	r26
     740:	bf 93       	push	r27
     742:	ef 93       	push	r30
     744:	ff 93       	push	r31
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
	/* In case of rising edge detection */
	if(BIT_IS_SET(MCUCSR, 6))
     74e:	e4 e5       	ldi	r30, 0x54	; 84
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	80 74       	andi	r24, 0x40	; 64
     75a:	90 70       	andi	r25, 0x00	; 0
     75c:	00 97       	sbiw	r24, 0x00	; 0
     75e:	31 f0       	breq	.+12     	; 0x76c <__vector_3+0x48>
	{
		/* Start timer counter */
		SwICU_Start();
     760:	0e 94 46 04 	call	0x88c	; 0x88c <SwICU_Start>
		/* Change edge detection to falling edge detection */
		SwICU_SetCfgEdge(SwICU_EdgeFalling);
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0e 94 18 04 	call	0x830	; 0x830 <SwICU_SetCfgEdge>
     76a:	15 c0       	rjmp	.+42     	; 0x796 <__vector_3+0x72>
	}
	/* In case of falling edge detection */
	else if(BIT_IS_CLEAR(MCUCSR, 6))
     76c:	e4 e5       	ldi	r30, 0x54	; 84
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	80 74       	andi	r24, 0x40	; 64
     778:	90 70       	andi	r25, 0x00	; 0
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	61 f4       	brne	.+24     	; 0x796 <__vector_3+0x72>
	{
		/* Read the current timer counter value */
		SwICU_Read(&gu8_swIcuRead);
     77e:	87 e6       	ldi	r24, 0x67	; 103
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 2c 04 	call	0x858	; 0x858 <SwICU_Read>
		/* Change edge detection to rising edge detection */
		SwICU_SetCfgEdge(SwICU_EdgeRising);
     786:	80 e4       	ldi	r24, 0x40	; 64
     788:	0e 94 18 04 	call	0x830	; 0x830 <SwICU_SetCfgEdge>
		/* Stop the timer counter */
		SwICU_Stop();
     78c:	0e 94 3d 04 	call	0x87a	; 0x87a <SwICU_Stop>
		/* Set a flag to represent that the current operation is done */
		gu8_swIcuFlag = 1;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	80 93 68 00 	sts	0x0068, r24
	}
}
     796:	cf 91       	pop	r28
     798:	df 91       	pop	r29
     79a:	ff 91       	pop	r31
     79c:	ef 91       	pop	r30
     79e:	bf 91       	pop	r27
     7a0:	af 91       	pop	r26
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	7f 91       	pop	r23
     7a8:	6f 91       	pop	r22
     7aa:	5f 91       	pop	r21
     7ac:	4f 91       	pop	r20
     7ae:	3f 91       	pop	r19
     7b0:	2f 91       	pop	r18
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f 90       	pop	r0
     7b8:	1f 90       	pop	r1
     7ba:	18 95       	reti

000007bc <SwICU_Init>:

/*- APIs IMPLEMENTATION ------------------------------------*/

void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
     7bc:	ef 92       	push	r14
     7be:	0f 93       	push	r16
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	0f 92       	push	r0
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	89 83       	std	Y+1, r24	; 0x01
	/* Initializes timer0 in polling mode */
	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_256, 0, 0, T0_POLLING);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	44 e0       	ldi	r20, 0x04	; 4
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	00 e0       	ldi	r16, 0x00	; 0
     7d6:	ee 24       	eor	r14, r14
     7d8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <timer0Init>

	gpioPinDirection(GPIOB, BIT2, INPUT);
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	64 e0       	ldi	r22, 0x04	; 4
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
	gpioPinDirection(GPIOD, BIT0, OUTPUT);
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	4f ef       	ldi	r20, 0xFF	; 255
     7ec:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
	
	/* Enables external int2 */
	SET_BIT(GICR, INT2);
     7f0:	ab e5       	ldi	r26, 0x5B	; 91
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	eb e5       	ldi	r30, 0x5B	; 91
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	80 62       	ori	r24, 0x20	; 32
     7fc:	8c 93       	st	X, r24
	
	/* Sets the required edge detection type */
	MCUCSR = (MCUCSR & 0xBF) | a_en_inputCaptureEdge;
     7fe:	a4 e5       	ldi	r26, 0x54	; 84
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e4 e5       	ldi	r30, 0x54	; 84
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	98 2f       	mov	r25, r24
     80a:	9f 7b       	andi	r25, 0xBF	; 191
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	89 2b       	or	r24, r25
     810:	8c 93       	st	X, r24
	
	/* Enables Global Interrupt Enable bit */
	sei();
     812:	78 94       	sei
}
     814:	0f 90       	pop	r0
     816:	cf 91       	pop	r28
     818:	df 91       	pop	r29
     81a:	0f 91       	pop	r16
     81c:	ef 90       	pop	r14
     81e:	08 95       	ret

00000820 <SwICU_GetCfgEdge>:

EN_SwICU_Edge_t SwICU_GetCfgEdge(void)
{
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
	return 0;
     828:	80 e0       	ldi	r24, 0x00	; 0
}
     82a:	cf 91       	pop	r28
     82c:	df 91       	pop	r29
     82e:	08 95       	ret

00000830 <SwICU_SetCfgEdge>:

/*choose the detecting edge*/
void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
     830:	df 93       	push	r29
     832:	cf 93       	push	r28
     834:	0f 92       	push	r0
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	89 83       	std	Y+1, r24	; 0x01
	/* Change the required edge detection type to the selected type */
	MCUCSR = (MCUCSR & 0xBF) | a_en_inputCaptureEdge;
     83c:	a4 e5       	ldi	r26, 0x54	; 84
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	e4 e5       	ldi	r30, 0x54	; 84
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	98 2f       	mov	r25, r24
     848:	9f 7b       	andi	r25, 0xBF	; 191
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	89 2b       	or	r24, r25
     84e:	8c 93       	st	X, r24
}
     850:	0f 90       	pop	r0
     852:	cf 91       	pop	r28
     854:	df 91       	pop	r29
     856:	08 95       	ret

00000858 <SwICU_Read>:

void SwICU_Read(volatile uint8_t * a_pu8_capt)
{
     858:	df 93       	push	r29
     85a:	cf 93       	push	r28
     85c:	00 d0       	rcall	.+0      	; 0x85e <SwICU_Read+0x6>
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	9a 83       	std	Y+2, r25	; 0x02
     864:	89 83       	std	Y+1, r24	; 0x01
	/* Reads the current value of the timer0 */
	*a_pu8_capt = timer0Read();
     866:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <timer0Read>
     86a:	e9 81       	ldd	r30, Y+1	; 0x01
     86c:	fa 81       	ldd	r31, Y+2	; 0x02
     86e:	80 83       	st	Z, r24
}
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	cf 91       	pop	r28
     876:	df 91       	pop	r29
     878:	08 95       	ret

0000087a <SwICU_Stop>:

void SwICU_Stop(void)
{
     87a:	df 93       	push	r29
     87c:	cf 93       	push	r28
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
	/* Stops the timer0 */
	timer0Stop();
     882:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <timer0Stop>
}
     886:	cf 91       	pop	r28
     888:	df 91       	pop	r29
     88a:	08 95       	ret

0000088c <SwICU_Start>:

void SwICU_Start(void)
{
     88c:	df 93       	push	r29
     88e:	cf 93       	push	r28
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
	/* Starts the timer0 */
	timer0Start();
     894:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <timer0Start>
}
     898:	cf 91       	pop	r28
     89a:	df 91       	pop	r29
     89c:	08 95       	ret

0000089e <SwICU_Enable>:

void SwICU_Enable(void)
{
     89e:	df 93       	push	r29
     8a0:	cf 93       	push	r28
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
}
     8a6:	cf 91       	pop	r28
     8a8:	df 91       	pop	r29
     8aa:	08 95       	ret

000008ac <SwICU_Disable>:

void SwICU_Disable(void)
{
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
}
     8b4:	cf 91       	pop	r28
     8b6:	df 91       	pop	r29
     8b8:	08 95       	ret

000008ba <__vector_13>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(USART_RXC_vect)
{
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	11 24       	eor	r1, r1
     8c4:	2f 93       	push	r18
     8c6:	3f 93       	push	r19
     8c8:	4f 93       	push	r20
     8ca:	5f 93       	push	r21
     8cc:	6f 93       	push	r22
     8ce:	7f 93       	push	r23
     8d0:	8f 93       	push	r24
     8d2:	9f 93       	push	r25
     8d4:	af 93       	push	r26
     8d6:	bf 93       	push	r27
     8d8:	ef 93       	push	r30
     8da:	ff 93       	push	r31
     8dc:	df 93       	push	r29
     8de:	cf 93       	push	r28
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
	if(g_RXC_callBackPtr != NULL)
     8e4:	80 91 6b 00 	lds	r24, 0x006B
     8e8:	90 91 6c 00 	lds	r25, 0x006C
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	29 f0       	breq	.+10     	; 0x8fa <__vector_13+0x40>
	{
		g_RXC_callBackPtr();
     8f0:	e0 91 6b 00 	lds	r30, 0x006B
     8f4:	f0 91 6c 00 	lds	r31, 0x006C
     8f8:	09 95       	icall
	}
}
     8fa:	cf 91       	pop	r28
     8fc:	df 91       	pop	r29
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	bf 91       	pop	r27
     904:	af 91       	pop	r26
     906:	9f 91       	pop	r25
     908:	8f 91       	pop	r24
     90a:	7f 91       	pop	r23
     90c:	6f 91       	pop	r22
     90e:	5f 91       	pop	r21
     910:	4f 91       	pop	r20
     912:	3f 91       	pop	r19
     914:	2f 91       	pop	r18
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <__vector_14>:

ISR(USART_UDRE_vect)
{
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	2f 93       	push	r18
     92c:	3f 93       	push	r19
     92e:	4f 93       	push	r20
     930:	5f 93       	push	r21
     932:	6f 93       	push	r22
     934:	7f 93       	push	r23
     936:	8f 93       	push	r24
     938:	9f 93       	push	r25
     93a:	af 93       	push	r26
     93c:	bf 93       	push	r27
     93e:	ef 93       	push	r30
     940:	ff 93       	push	r31
     942:	df 93       	push	r29
     944:	cf 93       	push	r28
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
	if(g_UDRE_callBackPtr != NULL)
     94a:	80 91 6d 00 	lds	r24, 0x006D
     94e:	90 91 6e 00 	lds	r25, 0x006E
     952:	00 97       	sbiw	r24, 0x00	; 0
     954:	29 f0       	breq	.+10     	; 0x960 <__vector_14+0x40>
	{
		g_UDRE_callBackPtr();
     956:	e0 91 6d 00 	lds	r30, 0x006D
     95a:	f0 91 6e 00 	lds	r31, 0x006E
     95e:	09 95       	icall
	}
}
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	bf 91       	pop	r27
     96a:	af 91       	pop	r26
     96c:	9f 91       	pop	r25
     96e:	8f 91       	pop	r24
     970:	7f 91       	pop	r23
     972:	6f 91       	pop	r22
     974:	5f 91       	pop	r21
     976:	4f 91       	pop	r20
     978:	3f 91       	pop	r19
     97a:	2f 91       	pop	r18
     97c:	0f 90       	pop	r0
     97e:	0f be       	out	0x3f, r0	; 63
     980:	0f 90       	pop	r0
     982:	1f 90       	pop	r1
     984:	18 95       	reti

00000986 <__vector_15>:

ISR(USART_TXC_vect)
{
     986:	1f 92       	push	r1
     988:	0f 92       	push	r0
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	0f 92       	push	r0
     98e:	11 24       	eor	r1, r1
     990:	2f 93       	push	r18
     992:	3f 93       	push	r19
     994:	4f 93       	push	r20
     996:	5f 93       	push	r21
     998:	6f 93       	push	r22
     99a:	7f 93       	push	r23
     99c:	8f 93       	push	r24
     99e:	9f 93       	push	r25
     9a0:	af 93       	push	r26
     9a2:	bf 93       	push	r27
     9a4:	ef 93       	push	r30
     9a6:	ff 93       	push	r31
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
	if(g_TXC_callBackPtr != NULL)
     9b0:	80 91 69 00 	lds	r24, 0x0069
     9b4:	90 91 6a 00 	lds	r25, 0x006A
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	29 f0       	breq	.+10     	; 0x9c6 <__vector_15+0x40>
	{
		g_TXC_callBackPtr();
     9bc:	e0 91 69 00 	lds	r30, 0x0069
     9c0:	f0 91 6a 00 	lds	r31, 0x006A
     9c4:	09 95       	icall
	}
}
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	bf 91       	pop	r27
     9d0:	af 91       	pop	r26
     9d2:	9f 91       	pop	r25
     9d4:	8f 91       	pop	r24
     9d6:	7f 91       	pop	r23
     9d8:	6f 91       	pop	r22
     9da:	5f 91       	pop	r21
     9dc:	4f 91       	pop	r20
     9de:	3f 91       	pop	r19
     9e0:	2f 91       	pop	r18
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <UART_TXC_setCallBack>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void UART_TXC_setCallBack(void(*local_ptr)(void))
{
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <UART_TXC_setCallBack+0x6>
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	9a 83       	std	Y+2, r25	; 0x02
     9f8:	89 83       	std	Y+1, r24	; 0x01
	g_TXC_callBackPtr = (volatile void(*)(void))local_ptr;
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	9a 81       	ldd	r25, Y+2	; 0x02
     9fe:	90 93 6a 00 	sts	0x006A, r25
     a02:	80 93 69 00 	sts	0x0069, r24
}
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	cf 91       	pop	r28
     a0c:	df 91       	pop	r29
     a0e:	08 95       	ret

00000a10 <UART_RXC_setCallBack>:

void UART_RXC_setCallBack(void(*local_ptr)(void))
{
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	00 d0       	rcall	.+0      	; 0xa16 <UART_RXC_setCallBack+0x6>
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	89 83       	std	Y+1, r24	; 0x01
	g_RXC_callBackPtr = (volatile void(*)(void))local_ptr;
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	90 93 6c 00 	sts	0x006C, r25
     a26:	80 93 6b 00 	sts	0x006B, r24
}
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	cf 91       	pop	r28
     a30:	df 91       	pop	r29
     a32:	08 95       	ret

00000a34 <UART_UDRE_setCallBack>:

void UART_UDRE_setCallBack(void(*local_ptr)(void))
{
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	00 d0       	rcall	.+0      	; 0xa3a <UART_UDRE_setCallBack+0x6>
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	9a 83       	std	Y+2, r25	; 0x02
     a40:	89 83       	std	Y+1, r24	; 0x01
	g_UDRE_callBackPtr = (volatile void(*)(void))local_ptr;
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	90 93 6e 00 	sts	0x006E, r25
     a4a:	80 93 6d 00 	sts	0x006D, r24
}
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	cf 91       	pop	r28
     a54:	df 91       	pop	r29
     a56:	08 95       	ret

00000a58 <UART_init>:

void UART_init(const UART_ConfigType* ConfigPtr)
{
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <UART_init+0x6>
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <UART_init+0x8>
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	9a 83       	std	Y+2, r25	; 0x02
     a66:	89 83       	std	Y+1, r24	; 0x01
	/* Activating double speed mode */
	SET_BIT(UCSRA, U2X);
     a68:	ab e2       	ldi	r26, 0x2B	; 43
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	eb e2       	ldi	r30, 0x2B	; 43
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	8c 93       	st	X, r24

	/* Deciding whether the MCU will operate as a sender/receiver/sender and receiver */
	switch(ConfigPtr->communicationMode)
     a76:	e9 81       	ldd	r30, Y+1	; 0x01
     a78:	fa 81       	ldd	r31, Y+2	; 0x02
     a7a:	81 81       	ldd	r24, Z+1	; 0x01
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	3c 83       	std	Y+4, r19	; 0x04
     a82:	2b 83       	std	Y+3, r18	; 0x03
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	91 05       	cpc	r25, r1
     a8c:	f1 f0       	breq	.+60     	; 0xaca <UART_init+0x72>
     a8e:	2b 81       	ldd	r18, Y+3	; 0x03
     a90:	3c 81       	ldd	r19, Y+4	; 0x04
     a92:	22 30       	cpi	r18, 0x02	; 2
     a94:	31 05       	cpc	r19, r1
     a96:	69 f1       	breq	.+90     	; 0xaf2 <UART_init+0x9a>
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <UART_init+0x4a>
     aa0:	49 c0       	rjmp	.+146    	; 0xb34 <UART_init+0xdc>
	{
	case UART_SENDER_MODE:
		SET_BIT(UCSRB, TXEN);
     aa2:	aa e2       	ldi	r26, 0x2A	; 42
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	ea e2       	ldi	r30, 0x2A	; 42
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	88 60       	ori	r24, 0x08	; 8
     aae:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     ab0:	e9 81       	ldd	r30, Y+1	; 0x01
     ab2:	fa 81       	ldd	r31, Y+2	; 0x02
     ab4:	85 81       	ldd	r24, Z+5	; 0x05
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	e9 f5       	brne	.+122    	; 0xb34 <UART_init+0xdc>
			SET_BIT(UCSRB, TXCIE);
     aba:	aa e2       	ldi	r26, 0x2A	; 42
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	ea e2       	ldi	r30, 0x2A	; 42
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	80 64       	ori	r24, 0x40	; 64
     ac6:	8c 93       	st	X, r24
     ac8:	35 c0       	rjmp	.+106    	; 0xb34 <UART_init+0xdc>
		break;
	case UART_RECEIVER_MODE:
		SET_BIT(UCSRB, RXEN);
     aca:	aa e2       	ldi	r26, 0x2A	; 42
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	ea e2       	ldi	r30, 0x2A	; 42
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	80 61       	ori	r24, 0x10	; 16
     ad6:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     ad8:	e9 81       	ldd	r30, Y+1	; 0x01
     ada:	fa 81       	ldd	r31, Y+2	; 0x02
     adc:	85 81       	ldd	r24, Z+5	; 0x05
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	49 f5       	brne	.+82     	; 0xb34 <UART_init+0xdc>
			SET_BIT(UCSRB, RXCIE);
     ae2:	aa e2       	ldi	r26, 0x2A	; 42
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	ea e2       	ldi	r30, 0x2A	; 42
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	80 68       	ori	r24, 0x80	; 128
     aee:	8c 93       	st	X, r24
     af0:	21 c0       	rjmp	.+66     	; 0xb34 <UART_init+0xdc>
		break;
	case UART_SENDER_RECEIVER_MODE:
		SET_BIT(UCSRB, TXEN);
     af2:	aa e2       	ldi	r26, 0x2A	; 42
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	ea e2       	ldi	r30, 0x2A	; 42
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	88 60       	ori	r24, 0x08	; 8
     afe:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);
     b00:	aa e2       	ldi	r26, 0x2A	; 42
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	ea e2       	ldi	r30, 0x2A	; 42
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	80 61       	ori	r24, 0x10	; 16
     b0c:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     b0e:	e9 81       	ldd	r30, Y+1	; 0x01
     b10:	fa 81       	ldd	r31, Y+2	; 0x02
     b12:	85 81       	ldd	r24, Z+5	; 0x05
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	71 f4       	brne	.+28     	; 0xb34 <UART_init+0xdc>
		{
			SET_BIT(UCSRB, TXCIE);
     b18:	aa e2       	ldi	r26, 0x2A	; 42
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	ea e2       	ldi	r30, 0x2A	; 42
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	80 64       	ori	r24, 0x40	; 64
     b24:	8c 93       	st	X, r24
			SET_BIT(UCSRB, RXCIE);
     b26:	aa e2       	ldi	r26, 0x2A	; 42
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	ea e2       	ldi	r30, 0x2A	; 42
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	80 68       	ori	r24, 0x80	; 128
     b32:	8c 93       	st	X, r24
		}
		break;
	}

	/* Selecting the character size (for the bits in UCSRB register) */
	UCSRB = (UCSRB & 0xFB) | (ConfigPtr->charSize & 0x04);
     b34:	aa e2       	ldi	r26, 0x2A	; 42
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	ea e2       	ldi	r30, 0x2A	; 42
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	98 2f       	mov	r25, r24
     b40:	9b 7f       	andi	r25, 0xFB	; 251
     b42:	e9 81       	ldd	r30, Y+1	; 0x01
     b44:	fa 81       	ldd	r31, Y+2	; 0x02
     b46:	82 81       	ldd	r24, Z+2	; 0x02
     b48:	84 70       	andi	r24, 0x04	; 4
     b4a:	89 2b       	or	r24, r25
     b4c:	8c 93       	st	X, r24

	/* Setting this bit enables the user to configure the register UCSRC */
	SET_BIT(UCSRC, URSEL);
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e0 e4       	ldi	r30, 0x40	; 64
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24

	/* Setting the mode of the uart */
	UCSRC |= ConfigPtr->mode;
     b5c:	a0 e4       	ldi	r26, 0x40	; 64
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e0 e4       	ldi	r30, 0x40	; 64
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	90 81       	ld	r25, Z
     b66:	e9 81       	ldd	r30, Y+1	; 0x01
     b68:	fa 81       	ldd	r31, Y+2	; 0x02
     b6a:	80 81       	ld	r24, Z
     b6c:	89 2b       	or	r24, r25
     b6e:	8c 93       	st	X, r24

	/* Selecting the character size (for the bits in UCSRC register) */
	UCSRC = (UCSRC & 0xF9) | ((ConfigPtr->charSize & 0x03) << UCSZ0);
     b70:	a0 e4       	ldi	r26, 0x40	; 64
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e0 e4       	ldi	r30, 0x40	; 64
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	28 2f       	mov	r18, r24
     b7c:	29 7f       	andi	r18, 0xF9	; 249
     b7e:	e9 81       	ldd	r30, Y+1	; 0x01
     b80:	fa 81       	ldd	r31, Y+2	; 0x02
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	83 70       	andi	r24, 0x03	; 3
     b8a:	90 70       	andi	r25, 0x00	; 0
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	82 2b       	or	r24, r18
     b92:	8c 93       	st	X, r24
	/* Selecting parity mode */
	UCSRC = (UCSRC & 0xCF) | ConfigPtr->parityMode;
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	98 2f       	mov	r25, r24
     ba0:	9f 7c       	andi	r25, 0xCF	; 207
     ba2:	e9 81       	ldd	r30, Y+1	; 0x01
     ba4:	fa 81       	ldd	r31, Y+2	; 0x02
     ba6:	83 81       	ldd	r24, Z+3	; 0x03
     ba8:	89 2b       	or	r24, r25
     baa:	8c 93       	st	X, r24
	/* Selecting the number of stop bits */
	UCSRC = (UCSRC & 0xF7) | ConfigPtr->stopBits;
     bac:	a0 e4       	ldi	r26, 0x40	; 64
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e0 e4       	ldi	r30, 0x40	; 64
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	98 2f       	mov	r25, r24
     bb8:	97 7f       	andi	r25, 0xF7	; 247
     bba:	e9 81       	ldd	r30, Y+1	; 0x01
     bbc:	fa 81       	ldd	r31, Y+2	; 0x02
     bbe:	84 81       	ldd	r24, Z+4	; 0x04
     bc0:	89 2b       	or	r24, r25
     bc2:	8c 93       	st	X, r24

	/* Choosing the baud rate of the process */
	UBRRH = BAUDPRESCALE >> 8;
     bc4:	e0 e4       	ldi	r30, 0x40	; 64
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	10 82       	st	Z, r1
	UBRRL = BAUDPRESCALE;
     bca:	e9 e2       	ldi	r30, 0x29	; 41
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	8f ec       	ldi	r24, 0xCF	; 207
     bd0:	80 83       	st	Z, r24
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <UART_transmit>:

void UART_transmit(const uint8_t data)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	0f 92       	push	r0
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	89 83       	std	Y+1, r24	; 0x01
	/* busy-waiting the UDRE bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB, TXCIE))
     bec:	ea e2       	ldi	r30, 0x2A	; 42
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	80 74       	andi	r24, 0x40	; 64
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	49 f4       	brne	.+18     	; 0xc10 <UART_transmit+0x30>
		while(BIT_IS_CLEAR(UCSRA, UDRE));
     bfe:	eb e2       	ldi	r30, 0x2B	; 43
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	80 72       	andi	r24, 0x20	; 32
     c0a:	90 70       	andi	r25, 0x00	; 0
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	b9 f3       	breq	.-18     	; 0xbfe <UART_transmit+0x1e>
	/* sending the data */
	UDR = data;
     c10:	ec e2       	ldi	r30, 0x2C	; 44
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	80 83       	st	Z, r24
}
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <UART_receive>:

uint8_t UART_receive(void)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the RXC bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB, RXCIE))
     c28:	ea e2       	ldi	r30, 0x2A	; 42
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	88 23       	and	r24, r24
     c30:	2c f0       	brlt	.+10     	; 0xc3c <UART_receive+0x1c>
		while(BIT_IS_CLEAR(UCSRA, RXC));
     c32:	eb e2       	ldi	r30, 0x2B	; 43
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	88 23       	and	r24, r24
     c3a:	dc f7       	brge	.-10     	; 0xc32 <UART_receive+0x12>
	/* read the received data */
	return UDR;
     c3c:	ec e2       	ldi	r30, 0x2C	; 44
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
}
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <MotorDC_Init>:
#define MOTOR_FREQUENCY 200

/*- APIs IMPLEMENTATION ------------------------------------*/

void MotorDC_Init(En_motorType_t en_motor_number)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <MotorDC_Init+0x6>
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	89 83       	std	Y+1, r24	; 0x01
	switch(en_motor_number)
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	3b 83       	std	Y+3, r19	; 0x03
     c5e:	2a 83       	std	Y+2, r18	; 0x02
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	31 f0       	breq	.+12     	; 0xc74 <MotorDC_Init+0x2c>
     c68:	2a 81       	ldd	r18, Y+2	; 0x02
     c6a:	3b 81       	ldd	r19, Y+3	; 0x03
     c6c:	21 30       	cpi	r18, 0x01	; 1
     c6e:	31 05       	cpc	r19, r1
     c70:	b1 f0       	breq	.+44     	; 0xc9e <MotorDC_Init+0x56>
     c72:	29 c0       	rjmp	.+82     	; 0xcc6 <MotorDC_Init+0x7e>
	{
		case MOT_1:
			gpioPinDirection(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, OUTPUT);
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	60 e1       	ldi	r22, 0x10	; 16
     c78:	4f ef       	ldi	r20, 0xFF	; 255
     c7a:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, OUTPUT);
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	64 e0       	ldi	r22, 0x04	; 4
     c82:	4f ef       	ldi	r20, 0xFF	; 255
     c84:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, OUTPUT);
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	68 e0       	ldi	r22, 0x08	; 8
     c8c:	4f ef       	ldi	r20, 0xFF	; 255
     c8e:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, HIGH);
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	60 e1       	ldi	r22, 0x10	; 16
     c96:	4f ef       	ldi	r20, 0xFF	; 255
     c98:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
     c9c:	14 c0       	rjmp	.+40     	; 0xcc6 <MotorDC_Init+0x7e>
			break;
		case MOT_2:
			gpioPinDirection(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, OUTPUT);
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	60 e2       	ldi	r22, 0x20	; 32
     ca2:	4f ef       	ldi	r20, 0xFF	; 255
     ca4:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, OUTPUT);
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	60 e4       	ldi	r22, 0x40	; 64
     cac:	4f ef       	ldi	r20, 0xFF	; 255
     cae:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, OUTPUT);
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	60 e8       	ldi	r22, 0x80	; 128
     cb6:	4f ef       	ldi	r20, 0xFF	; 255
     cb8:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, HIGH);
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	60 e2       	ldi	r22, 0x20	; 32
     cc0:	4f ef       	ldi	r20, 0xFF	; 255
     cc2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
			break;
	}
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <MotorDC_Dir>:

void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	2b 97       	sbiw	r28, 0x0b	; 11
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8c 83       	std	Y+4, r24	; 0x04
     ce8:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t motorGpio = 0;
     cea:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t motorBitA = 0;
     cec:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t motorBitB = 0;
     cee:	19 82       	std	Y+1, r1	; 0x01
	
	switch(en_motor_number)
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	3b 87       	std	Y+11, r19	; 0x0b
     cf8:	2a 87       	std	Y+10, r18	; 0x0a
     cfa:	8a 85       	ldd	r24, Y+10	; 0x0a
     cfc:	9b 85       	ldd	r25, Y+11	; 0x0b
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	31 f0       	breq	.+12     	; 0xd0e <MotorDC_Dir+0x3c>
     d02:	2a 85       	ldd	r18, Y+10	; 0x0a
     d04:	3b 85       	ldd	r19, Y+11	; 0x0b
     d06:	21 30       	cpi	r18, 0x01	; 1
     d08:	31 05       	cpc	r19, r1
     d0a:	41 f0       	breq	.+16     	; 0xd1c <MotorDC_Dir+0x4a>
     d0c:	0d c0       	rjmp	.+26     	; 0xd28 <MotorDC_Dir+0x56>
	{
		case MOT_1:
			motorGpio = MOTOR_OUT_1A_GPIO;
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_1A_BIT;
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_1B_BIT;
     d16:	88 e0       	ldi	r24, 0x08	; 8
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <MotorDC_Dir+0x56>
			break;
		case MOT_2:
			motorGpio = MOTOR_OUT_2A_GPIO;
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_2A_BIT;
     d20:	80 e4       	ldi	r24, 0x40	; 64
     d22:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_2B_BIT;
     d24:	80 e8       	ldi	r24, 0x80	; 128
     d26:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	
	switch(en_motor_dir)
     d28:	8d 81       	ldd	r24, Y+5	; 0x05
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	39 87       	std	Y+9, r19	; 0x09
     d30:	28 87       	std	Y+8, r18	; 0x08
     d32:	88 85       	ldd	r24, Y+8	; 0x08
     d34:	99 85       	ldd	r25, Y+9	; 0x09
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	91 05       	cpc	r25, r1
     d3a:	71 f1       	breq	.+92     	; 0xd98 <MotorDC_Dir+0xc6>
     d3c:	28 85       	ldd	r18, Y+8	; 0x08
     d3e:	39 85       	ldd	r19, Y+9	; 0x09
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	a1 f1       	breq	.+104    	; 0xdae <MotorDC_Dir+0xdc>
     d46:	88 85       	ldd	r24, Y+8	; 0x08
     d48:	99 85       	ldd	r25, Y+9	; 0x09
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	d1 f5       	brne	.+116    	; 0xdc2 <MotorDC_Dir+0xf0>
	{
		case STOP:
		gpioPinWrite(motorGpio, motorBitA, LOW);
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	6a 81       	ldd	r22, Y+2	; 0x02
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	69 81       	ldd	r22, Y+1	; 0x01
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		switch(en_motor_number)
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3f 83       	std	Y+7, r19	; 0x07
     d6a:	2e 83       	std	Y+6, r18	; 0x06
     d6c:	8e 81       	ldd	r24, Y+6	; 0x06
     d6e:	9f 81       	ldd	r25, Y+7	; 0x07
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	31 f0       	breq	.+12     	; 0xd80 <MotorDC_Dir+0xae>
     d74:	2e 81       	ldd	r18, Y+6	; 0x06
     d76:	3f 81       	ldd	r19, Y+7	; 0x07
     d78:	21 30       	cpi	r18, 0x01	; 1
     d7a:	31 05       	cpc	r19, r1
     d7c:	39 f0       	breq	.+14     	; 0xd8c <MotorDC_Dir+0xba>
     d7e:	21 c0       	rjmp	.+66     	; 0xdc2 <MotorDC_Dir+0xf0>
		{
			case MOT_1:
				gpioPinWrite(motorGpio, MOTOR_EN_1_BIT, LOW);
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	60 e1       	ldi	r22, 0x10	; 16
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
     d8a:	1b c0       	rjmp	.+54     	; 0xdc2 <MotorDC_Dir+0xf0>
				break;
			case MOT_2:
				gpioPinWrite(motorGpio, MOTOR_EN_2_BIT, LOW);
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	60 e2       	ldi	r22, 0x20	; 32
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
     d96:	15 c0       	rjmp	.+42     	; 0xdc2 <MotorDC_Dir+0xf0>
				break;
		}
		break;
		
		case FORWARD:
		gpioPinWrite(motorGpio, motorBitA, LOW);
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	6a 81       	ldd	r22, Y+2	; 0x02
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, HIGH);
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	69 81       	ldd	r22, Y+1	; 0x01
     da6:	4f ef       	ldi	r20, 0xFF	; 255
     da8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
     dac:	0a c0       	rjmp	.+20     	; 0xdc2 <MotorDC_Dir+0xf0>
		break;
		
		case BACKWARD:
		gpioPinWrite(motorGpio, motorBitA, HIGH);
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	6a 81       	ldd	r22, Y+2	; 0x02
     db2:	4f ef       	ldi	r20, 0xFF	; 255
     db4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	69 81       	ldd	r22, Y+1	; 0x01
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		break;
	}
}
     dc2:	2b 96       	adiw	r28, 0x0b	; 11
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <MotorDC_Speed_PollingWithT0>:

void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	89 83       	std	Y+1, r24	; 0x01
	timer0SwPWM(u8_motor_speed, MOTOR_FREQUENCY);
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	68 ec       	ldi	r22, 0xC8	; 200
     de4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <timer0SwPWM>
}
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <MotorDC_Speed_HwPWM>:

void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
	
     dfc:	0f 90       	pop	r0
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <gpioPortDirection>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	00 d0       	rcall	.+0      	; 0xe0a <gpioPortDirection+0x6>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <gpioPortDirection+0x8>
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to manipulate its direction */
	switch(u8_port)
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	3c 83       	std	Y+4, r19	; 0x04
     e1c:	2b 83       	std	Y+3, r18	; 0x03
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	91 05       	cpc	r25, r1
     e26:	d1 f0       	breq	.+52     	; 0xe5c <gpioPortDirection+0x58>
     e28:	2b 81       	ldd	r18, Y+3	; 0x03
     e2a:	3c 81       	ldd	r19, Y+4	; 0x04
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	31 05       	cpc	r19, r1
     e30:	2c f4       	brge	.+10     	; 0xe3c <gpioPortDirection+0x38>
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	61 f0       	breq	.+24     	; 0xe52 <gpioPortDirection+0x4e>
     e3a:	1e c0       	rjmp	.+60     	; 0xe78 <gpioPortDirection+0x74>
     e3c:	2b 81       	ldd	r18, Y+3	; 0x03
     e3e:	3c 81       	ldd	r19, Y+4	; 0x04
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	81 f0       	breq	.+32     	; 0xe66 <gpioPortDirection+0x62>
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	91 05       	cpc	r25, r1
     e4e:	81 f0       	breq	.+32     	; 0xe70 <gpioPortDirection+0x6c>
     e50:	13 c0       	rjmp	.+38     	; 0xe78 <gpioPortDirection+0x74>
	{
	case GPIOA:
		PORTA_DIR = u8_direction;
     e52:	ea e3       	ldi	r30, 0x3A	; 58
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	80 83       	st	Z, r24
     e5a:	0e c0       	rjmp	.+28     	; 0xe78 <gpioPortDirection+0x74>
		break;
	case GPIOB:
		PORTB_DIR = u8_direction;
     e5c:	e7 e3       	ldi	r30, 0x37	; 55
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	80 83       	st	Z, r24
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <gpioPortDirection+0x74>
		break;
	case GPIOC:
		PORTC_DIR = u8_direction;
     e66:	e4 e3       	ldi	r30, 0x34	; 52
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	80 83       	st	Z, r24
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <gpioPortDirection+0x74>
		break;
	case GPIOD:
		PORTD_DIR = u8_direction;
     e70:	e1 e3       	ldi	r30, 0x31	; 49
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <gpioPortWrite>:

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <gpioPortWrite+0x6>
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <gpioPortWrite+0x8>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to assign the value to */
	switch(u8_port)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3c 83       	std	Y+4, r19	; 0x04
     e9e:	2b 83       	std	Y+3, r18	; 0x03
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	d1 f0       	breq	.+52     	; 0xede <gpioPortWrite+0x58>
     eaa:	2b 81       	ldd	r18, Y+3	; 0x03
     eac:	3c 81       	ldd	r19, Y+4	; 0x04
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	2c f4       	brge	.+10     	; 0xebe <gpioPortWrite+0x38>
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	61 f0       	breq	.+24     	; 0xed4 <gpioPortWrite+0x4e>
     ebc:	1e c0       	rjmp	.+60     	; 0xefa <gpioPortWrite+0x74>
     ebe:	2b 81       	ldd	r18, Y+3	; 0x03
     ec0:	3c 81       	ldd	r19, Y+4	; 0x04
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	81 f0       	breq	.+32     	; 0xee8 <gpioPortWrite+0x62>
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	91 05       	cpc	r25, r1
     ed0:	81 f0       	breq	.+32     	; 0xef2 <gpioPortWrite+0x6c>
     ed2:	13 c0       	rjmp	.+38     	; 0xefa <gpioPortWrite+0x74>
	{
	case GPIOA:
		PORTA_DATA = u8_value;
     ed4:	eb e3       	ldi	r30, 0x3B	; 59
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	80 83       	st	Z, r24
     edc:	0e c0       	rjmp	.+28     	; 0xefa <gpioPortWrite+0x74>
		break;
	case GPIOB:
		PORTB_DATA = u8_value;
     ede:	e8 e3       	ldi	r30, 0x38	; 56
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	80 83       	st	Z, r24
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <gpioPortWrite+0x74>
		break;
	case GPIOC:
		PORTC_DATA = u8_value;
     ee8:	e5 e3       	ldi	r30, 0x35	; 53
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	80 83       	st	Z, r24
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <gpioPortWrite+0x74>
		break;
	case GPIOD:
		PORTD_DATA = u8_value;
     ef2:	e2 e3       	ldi	r30, 0x32	; 50
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <gpioPortToggle+0x6>
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to toggle its value */
	switch(u8_port)
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3b 83       	std	Y+3, r19	; 0x03
     f1e:	2a 83       	std	Y+2, r18	; 0x02
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	9b 81       	ldd	r25, Y+3	; 0x03
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	91 05       	cpc	r25, r1
     f28:	e9 f0       	breq	.+58     	; 0xf64 <gpioPortToggle+0x5c>
     f2a:	2a 81       	ldd	r18, Y+2	; 0x02
     f2c:	3b 81       	ldd	r19, Y+3	; 0x03
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	2c f4       	brge	.+10     	; 0xf3e <gpioPortToggle+0x36>
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	9b 81       	ldd	r25, Y+3	; 0x03
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	61 f0       	breq	.+24     	; 0xf54 <gpioPortToggle+0x4c>
     f3c:	2a c0       	rjmp	.+84     	; 0xf92 <gpioPortToggle+0x8a>
     f3e:	2a 81       	ldd	r18, Y+2	; 0x02
     f40:	3b 81       	ldd	r19, Y+3	; 0x03
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	b1 f0       	breq	.+44     	; 0xf74 <gpioPortToggle+0x6c>
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	9b 81       	ldd	r25, Y+3	; 0x03
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	c9 f0       	breq	.+50     	; 0xf84 <gpioPortToggle+0x7c>
     f52:	1f c0       	rjmp	.+62     	; 0xf92 <gpioPortToggle+0x8a>
	{
	case GPIOA:
		PORTA_DATA ^= HIGH;
     f54:	ab e3       	ldi	r26, 0x3B	; 59
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e3       	ldi	r30, 0x3B	; 59
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 95       	com	r24
     f60:	8c 93       	st	X, r24
     f62:	17 c0       	rjmp	.+46     	; 0xf92 <gpioPortToggle+0x8a>
		break;
	case GPIOB:
		PORTB_DATA ^= HIGH;
     f64:	a8 e3       	ldi	r26, 0x38	; 56
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e8 e3       	ldi	r30, 0x38	; 56
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 95       	com	r24
     f70:	8c 93       	st	X, r24
     f72:	0f c0       	rjmp	.+30     	; 0xf92 <gpioPortToggle+0x8a>
		break;
	case GPIOC:
		PORTC_DATA ^= HIGH;
     f74:	a5 e3       	ldi	r26, 0x35	; 53
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 95       	com	r24
     f80:	8c 93       	st	X, r24
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <gpioPortToggle+0x8a>
		break;
	case GPIOD:
		PORTD_DATA ^= HIGH;
     f84:	a2 e3       	ldi	r26, 0x32	; 50
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e2 e3       	ldi	r30, 0x32	; 50
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 95       	com	r24
     f90:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <gpioPortRead+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <gpioPortRead+0x8>
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to be read */
	switch(u8_port)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3c 83       	std	Y+4, r19	; 0x04
     fb4:	2b 83       	std	Y+3, r18	; 0x03
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	91 05       	cpc	r25, r1
     fbe:	d1 f0       	breq	.+52     	; 0xff4 <gpioPortRead+0x56>
     fc0:	2b 81       	ldd	r18, Y+3	; 0x03
     fc2:	3c 81       	ldd	r19, Y+4	; 0x04
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	2c f4       	brge	.+10     	; 0xfd4 <gpioPortRead+0x36>
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	61 f0       	breq	.+24     	; 0xfea <gpioPortRead+0x4c>
     fd2:	1f c0       	rjmp	.+62     	; 0x1012 <gpioPortRead+0x74>
     fd4:	2b 81       	ldd	r18, Y+3	; 0x03
     fd6:	3c 81       	ldd	r19, Y+4	; 0x04
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	81 f0       	breq	.+32     	; 0xffe <gpioPortRead+0x60>
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	91 05       	cpc	r25, r1
     fe6:	81 f0       	breq	.+32     	; 0x1008 <gpioPortRead+0x6a>
     fe8:	14 c0       	rjmp	.+40     	; 0x1012 <gpioPortRead+0x74>
	{
	case GPIOA:
		return PORTA_PIN;
     fea:	e9 e3       	ldi	r30, 0x39	; 57
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	90 81       	ld	r25, Z
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	11 c0       	rjmp	.+34     	; 0x1016 <gpioPortRead+0x78>
		break;
	case GPIOB:
		return PORTB_PIN;
     ff4:	e6 e3       	ldi	r30, 0x36	; 54
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	20 81       	ld	r18, Z
     ffa:	2a 83       	std	Y+2, r18	; 0x02
     ffc:	0c c0       	rjmp	.+24     	; 0x1016 <gpioPortRead+0x78>
		break;
	case GPIOC:
		return PORTC_PIN;
     ffe:	e3 e3       	ldi	r30, 0x33	; 51
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	30 81       	ld	r19, Z
    1004:	3a 83       	std	Y+2, r19	; 0x02
    1006:	07 c0       	rjmp	.+14     	; 0x1016 <gpioPortRead+0x78>
		break;
	case GPIOD:
		return PORTD_PIN;
    1008:	e0 e3       	ldi	r30, 0x30	; 48
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8a 83       	std	Y+2, r24	; 0x02
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <gpioPortRead+0x78>
		break;
	default:
		return ERROR;
    1012:	9f ef       	ldi	r25, 0xFF	; 255
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	29 97       	sbiw	r28, 0x09	; 9
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	6c 83       	std	Y+4, r22	; 0x04
    103e:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which direction is to be manipulated */
	uint8_t* pu8_portDirectionPointer = NULL;
    1040:	1a 82       	std	Y+2, r1	; 0x02
    1042:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	39 87       	std	Y+9, r19	; 0x09
    104c:	28 87       	std	Y+8, r18	; 0x08
    104e:	88 85       	ldd	r24, Y+8	; 0x08
    1050:	99 85       	ldd	r25, Y+9	; 0x09
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	91 05       	cpc	r25, r1
    1056:	d1 f0       	breq	.+52     	; 0x108c <gpioPinDirection+0x66>
    1058:	28 85       	ldd	r18, Y+8	; 0x08
    105a:	39 85       	ldd	r19, Y+9	; 0x09
    105c:	22 30       	cpi	r18, 0x02	; 2
    105e:	31 05       	cpc	r19, r1
    1060:	2c f4       	brge	.+10     	; 0x106c <gpioPinDirection+0x46>
    1062:	88 85       	ldd	r24, Y+8	; 0x08
    1064:	99 85       	ldd	r25, Y+9	; 0x09
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	61 f0       	breq	.+24     	; 0x1082 <gpioPinDirection+0x5c>
    106a:	1e c0       	rjmp	.+60     	; 0x10a8 <gpioPinDirection+0x82>
    106c:	28 85       	ldd	r18, Y+8	; 0x08
    106e:	39 85       	ldd	r19, Y+9	; 0x09
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	81 f0       	breq	.+32     	; 0x1096 <gpioPinDirection+0x70>
    1076:	88 85       	ldd	r24, Y+8	; 0x08
    1078:	99 85       	ldd	r25, Y+9	; 0x09
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	91 05       	cpc	r25, r1
    107e:	81 f0       	breq	.+32     	; 0x10a0 <gpioPinDirection+0x7a>
    1080:	13 c0       	rjmp	.+38     	; 0x10a8 <gpioPinDirection+0x82>
	{
	case GPIOA:
		pu8_portDirectionPointer = (uint8_t*)(&PORTA_DIR);
    1082:	8a e3       	ldi	r24, 0x3A	; 58
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	0e c0       	rjmp	.+28     	; 0x10a8 <gpioPinDirection+0x82>
		break;
	case GPIOB:
		pu8_portDirectionPointer = (uint8_t*)(&PORTB_DIR);
    108c:	87 e3       	ldi	r24, 0x37	; 55
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9a 83       	std	Y+2, r25	; 0x02
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <gpioPinDirection+0x82>
		break;
	case GPIOC:
		pu8_portDirectionPointer = (uint8_t*)(&PORTC_DIR);
    1096:	84 e3       	ldi	r24, 0x34	; 52
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <gpioPinDirection+0x82>
		break;
	case GPIOD:
		pu8_portDirectionPointer = (uint8_t*)(&PORTD_DIR);
    10a0:	81 e3       	ldi	r24, 0x31	; 49
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the pins are to be input or output */
	switch(u8_direction)
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3f 83       	std	Y+7, r19	; 0x07
    10b0:	2e 83       	std	Y+6, r18	; 0x06
    10b2:	8e 81       	ldd	r24, Y+6	; 0x06
    10b4:	9f 81       	ldd	r25, Y+7	; 0x07
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	31 f0       	breq	.+12     	; 0x10c6 <gpioPinDirection+0xa0>
    10ba:	2e 81       	ldd	r18, Y+6	; 0x06
    10bc:	3f 81       	ldd	r19, Y+7	; 0x07
    10be:	2f 3f       	cpi	r18, 0xFF	; 255
    10c0:	31 05       	cpc	r19, r1
    10c2:	61 f0       	breq	.+24     	; 0x10dc <gpioPinDirection+0xb6>
    10c4:	13 c0       	rjmp	.+38     	; 0x10ec <gpioPinDirection+0xc6>
	{
	case INPUT:
		*pu8_portDirectionPointer &= ~u8_pins;
    10c6:	e9 81       	ldd	r30, Y+1	; 0x01
    10c8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ca:	80 81       	ld	r24, Z
    10cc:	98 2f       	mov	r25, r24
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	80 95       	com	r24
    10d2:	89 23       	and	r24, r25
    10d4:	e9 81       	ldd	r30, Y+1	; 0x01
    10d6:	fa 81       	ldd	r31, Y+2	; 0x02
    10d8:	80 83       	st	Z, r24
    10da:	08 c0       	rjmp	.+16     	; 0x10ec <gpioPinDirection+0xc6>
		break;
	case OUTPUT:
		*pu8_portDirectionPointer |= u8_pins;
    10dc:	e9 81       	ldd	r30, Y+1	; 0x01
    10de:	fa 81       	ldd	r31, Y+2	; 0x02
    10e0:	90 81       	ld	r25, Z
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	89 2b       	or	r24, r25
    10e6:	e9 81       	ldd	r30, Y+1	; 0x01
    10e8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ea:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    10ec:	29 96       	adiw	r28, 0x09	; 9
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <gpioPinWrite>:

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	29 97       	sbiw	r28, 0x09	; 9
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	8b 83       	std	Y+3, r24	; 0x03
    1114:	6c 83       	std	Y+4, r22	; 0x04
    1116:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which pins values are to be changed */
	uint8_t* pu8_portDataPointer = NULL;
    1118:	1a 82       	std	Y+2, r1	; 0x02
    111a:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	39 87       	std	Y+9, r19	; 0x09
    1124:	28 87       	std	Y+8, r18	; 0x08
    1126:	88 85       	ldd	r24, Y+8	; 0x08
    1128:	99 85       	ldd	r25, Y+9	; 0x09
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	91 05       	cpc	r25, r1
    112e:	d1 f0       	breq	.+52     	; 0x1164 <gpioPinWrite+0x66>
    1130:	28 85       	ldd	r18, Y+8	; 0x08
    1132:	39 85       	ldd	r19, Y+9	; 0x09
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	2c f4       	brge	.+10     	; 0x1144 <gpioPinWrite+0x46>
    113a:	88 85       	ldd	r24, Y+8	; 0x08
    113c:	99 85       	ldd	r25, Y+9	; 0x09
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	61 f0       	breq	.+24     	; 0x115a <gpioPinWrite+0x5c>
    1142:	1e c0       	rjmp	.+60     	; 0x1180 <gpioPinWrite+0x82>
    1144:	28 85       	ldd	r18, Y+8	; 0x08
    1146:	39 85       	ldd	r19, Y+9	; 0x09
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	81 f0       	breq	.+32     	; 0x116e <gpioPinWrite+0x70>
    114e:	88 85       	ldd	r24, Y+8	; 0x08
    1150:	99 85       	ldd	r25, Y+9	; 0x09
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	91 05       	cpc	r25, r1
    1156:	81 f0       	breq	.+32     	; 0x1178 <gpioPinWrite+0x7a>
    1158:	13 c0       	rjmp	.+38     	; 0x1180 <gpioPinWrite+0x82>
	{
	case GPIOA:
		pu8_portDataPointer = (uint8_t*)(&PORTA_DATA);
    115a:	8b e3       	ldi	r24, 0x3B	; 59
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <gpioPinWrite+0x82>
		break;
	case GPIOB:
		pu8_portDataPointer = (uint8_t*)(&PORTB_DATA);
    1164:	88 e3       	ldi	r24, 0x38	; 56
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <gpioPinWrite+0x82>
		break;
	case GPIOC:
		pu8_portDataPointer = (uint8_t*)(&PORTC_DATA);
    116e:	85 e3       	ldi	r24, 0x35	; 53
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <gpioPinWrite+0x82>
		break;
	case GPIOD:
		pu8_portDataPointer = (uint8_t*)(&PORTD_DATA);
    1178:	82 e3       	ldi	r24, 0x32	; 50
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the bits values are to be high or low */
	switch(u8_value)
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	3f 83       	std	Y+7, r19	; 0x07
    1188:	2e 83       	std	Y+6, r18	; 0x06
    118a:	8e 81       	ldd	r24, Y+6	; 0x06
    118c:	9f 81       	ldd	r25, Y+7	; 0x07
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	31 f0       	breq	.+12     	; 0x119e <gpioPinWrite+0xa0>
    1192:	2e 81       	ldd	r18, Y+6	; 0x06
    1194:	3f 81       	ldd	r19, Y+7	; 0x07
    1196:	2f 3f       	cpi	r18, 0xFF	; 255
    1198:	31 05       	cpc	r19, r1
    119a:	61 f0       	breq	.+24     	; 0x11b4 <gpioPinWrite+0xb6>
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <gpioPinWrite+0xc6>
	{
	case LOW:
		*pu8_portDataPointer &= ~u8_pins;
    119e:	e9 81       	ldd	r30, Y+1	; 0x01
    11a0:	fa 81       	ldd	r31, Y+2	; 0x02
    11a2:	80 81       	ld	r24, Z
    11a4:	98 2f       	mov	r25, r24
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	80 95       	com	r24
    11aa:	89 23       	and	r24, r25
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	80 83       	st	Z, r24
    11b2:	08 c0       	rjmp	.+16     	; 0x11c4 <gpioPinWrite+0xc6>
		break;
	case HIGH:
		*pu8_portDataPointer |= u8_pins;
    11b4:	e9 81       	ldd	r30, Y+1	; 0x01
    11b6:	fa 81       	ldd	r31, Y+2	; 0x02
    11b8:	90 81       	ld	r25, Z
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	89 2b       	or	r24, r25
    11be:	e9 81       	ldd	r30, Y+1	; 0x01
    11c0:	fa 81       	ldd	r31, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    11c4:	29 96       	adiw	r28, 0x09	; 9
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <gpioPinToggle+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <gpioPinToggle+0x8>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to toggle its pins */
	switch(u8_port)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3c 83       	std	Y+4, r19	; 0x04
    11ee:	2b 83       	std	Y+3, r18	; 0x03
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	f1 f0       	breq	.+60     	; 0x1236 <gpioPinToggle+0x60>
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <gpioPinToggle+0x38>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	61 f0       	breq	.+24     	; 0x1224 <gpioPinToggle+0x4e>
    120c:	2e c0       	rjmp	.+92     	; 0x126a <gpioPinToggle+0x94>
    120e:	2b 81       	ldd	r18, Y+3	; 0x03
    1210:	3c 81       	ldd	r19, Y+4	; 0x04
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	c1 f0       	breq	.+48     	; 0x1248 <gpioPinToggle+0x72>
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	e1 f0       	breq	.+56     	; 0x125a <gpioPinToggle+0x84>
    1222:	23 c0       	rjmp	.+70     	; 0x126a <gpioPinToggle+0x94>
	{
	case GPIOA:
		PORTA_DATA ^= u8_pins;
    1224:	ab e3       	ldi	r26, 0x3B	; 59
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	eb e3       	ldi	r30, 0x3B	; 59
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	90 81       	ld	r25, Z
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	89 27       	eor	r24, r25
    1232:	8c 93       	st	X, r24
    1234:	1a c0       	rjmp	.+52     	; 0x126a <gpioPinToggle+0x94>
		break;
	case GPIOB:
		PORTB_DATA ^= u8_pins;
    1236:	a8 e3       	ldi	r26, 0x38	; 56
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e8 e3       	ldi	r30, 0x38	; 56
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	90 81       	ld	r25, Z
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	89 27       	eor	r24, r25
    1244:	8c 93       	st	X, r24
    1246:	11 c0       	rjmp	.+34     	; 0x126a <gpioPinToggle+0x94>
		break;
	case GPIOC:
		PORTC_DATA ^= u8_pins;
    1248:	a5 e3       	ldi	r26, 0x35	; 53
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e3       	ldi	r30, 0x35	; 53
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	90 81       	ld	r25, Z
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	89 27       	eor	r24, r25
    1256:	8c 93       	st	X, r24
    1258:	08 c0       	rjmp	.+16     	; 0x126a <gpioPinToggle+0x94>
		break;
	case GPIOD:
		PORTD_DATA ^= u8_pins;
    125a:	a2 e3       	ldi	r26, 0x32	; 50
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e2 e3       	ldi	r30, 0x32	; 50
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	90 81       	ld	r25, Z
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	89 27       	eor	r24, r25
    1268:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	29 97       	sbiw	r28, 0x09	; 9
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to read its pin */
	switch(u8_port)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3d 83       	std	Y+5, r19	; 0x05
    1298:	2c 83       	std	Y+4, r18	; 0x04
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	19 f1       	breq	.+70     	; 0x12ea <gpioPinRead+0x72>
    12a4:	2c 81       	ldd	r18, Y+4	; 0x04
    12a6:	3d 81       	ldd	r19, Y+5	; 0x05
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <gpioPinRead+0x40>
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	61 f0       	breq	.+24     	; 0x12ce <gpioPinRead+0x56>
    12b6:	43 c0       	rjmp	.+134    	; 0x133e <gpioPinRead+0xc6>
    12b8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ba:	3d 81       	ldd	r19, Y+5	; 0x05
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	11 f1       	breq	.+68     	; 0x1306 <gpioPinRead+0x8e>
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	59 f1       	breq	.+86     	; 0x1322 <gpioPinRead+0xaa>
    12cc:	38 c0       	rjmp	.+112    	; 0x133e <gpioPinRead+0xc6>
	{
	case GPIOA:
		return ((PORTA_PIN & u8_pin)? 1:0);
    12ce:	e9 e3       	ldi	r30, 0x39	; 57
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	90 81       	ld	r25, Z
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	89 23       	and	r24, r25
    12d8:	8e 83       	std	Y+6, r24	; 0x06
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	99 23       	and	r25, r25
    12de:	11 f0       	breq	.+4      	; 0x12e4 <gpioPinRead+0x6c>
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	2e 83       	std	Y+6, r18	; 0x06
    12e4:	3e 81       	ldd	r19, Y+6	; 0x06
    12e6:	3b 83       	std	Y+3, r19	; 0x03
    12e8:	2c c0       	rjmp	.+88     	; 0x1342 <gpioPinRead+0xca>
		break;
	case GPIOB:
		return ((PORTB_PIN & u8_pin)? 1:0);
    12ea:	e6 e3       	ldi	r30, 0x36	; 54
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	90 81       	ld	r25, Z
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	89 23       	and	r24, r25
    12f4:	8f 83       	std	Y+7, r24	; 0x07
    12f6:	8f 81       	ldd	r24, Y+7	; 0x07
    12f8:	88 23       	and	r24, r24
    12fa:	11 f0       	breq	.+4      	; 0x1300 <gpioPinRead+0x88>
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	9f 83       	std	Y+7, r25	; 0x07
    1300:	2f 81       	ldd	r18, Y+7	; 0x07
    1302:	2b 83       	std	Y+3, r18	; 0x03
    1304:	1e c0       	rjmp	.+60     	; 0x1342 <gpioPinRead+0xca>
		break;
	case GPIOC:
		return ((PORTC_PIN & u8_pin)? 1:0);
    1306:	e3 e3       	ldi	r30, 0x33	; 51
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	90 81       	ld	r25, Z
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	89 23       	and	r24, r25
    1310:	88 87       	std	Y+8, r24	; 0x08
    1312:	38 85       	ldd	r19, Y+8	; 0x08
    1314:	33 23       	and	r19, r19
    1316:	11 f0       	breq	.+4      	; 0x131c <gpioPinRead+0xa4>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	88 87       	std	Y+8, r24	; 0x08
    131c:	98 85       	ldd	r25, Y+8	; 0x08
    131e:	9b 83       	std	Y+3, r25	; 0x03
    1320:	10 c0       	rjmp	.+32     	; 0x1342 <gpioPinRead+0xca>
		break;
	case GPIOD:
		return ((PORTD_PIN & u8_pin)? 1:0);
    1322:	e0 e3       	ldi	r30, 0x30	; 48
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	90 81       	ld	r25, Z
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	89 23       	and	r24, r25
    132c:	89 87       	std	Y+9, r24	; 0x09
    132e:	29 85       	ldd	r18, Y+9	; 0x09
    1330:	22 23       	and	r18, r18
    1332:	11 f0       	breq	.+4      	; 0x1338 <gpioPinRead+0xc0>
    1334:	31 e0       	ldi	r19, 0x01	; 1
    1336:	39 87       	std	Y+9, r19	; 0x09
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	8b 83       	std	Y+3, r24	; 0x03
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <gpioPinRead+0xca>
		break;
	default:
		return ERROR;
    133e:	9f ef       	ldi	r25, 0xFF	; 255
    1340:	9b 83       	std	Y+3, r25	; 0x03
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
}
    1344:	29 96       	adiw	r28, 0x09	; 9
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <Led_Init>:
#include "ledConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void Led_Init(En_LedNumber_t en_led_id)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <Led_Init+0x6>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be initialized */
	switch(en_led_id)
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3b 83       	std	Y+3, r19	; 0x03
    136c:	2a 83       	std	Y+2, r18	; 0x02
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	9b 81       	ldd	r25, Y+3	; 0x03
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	91 05       	cpc	r25, r1
    1376:	d9 f0       	breq	.+54     	; 0x13ae <Led_Init+0x58>
    1378:	2a 81       	ldd	r18, Y+2	; 0x02
    137a:	3b 81       	ldd	r19, Y+3	; 0x03
    137c:	22 30       	cpi	r18, 0x02	; 2
    137e:	31 05       	cpc	r19, r1
    1380:	2c f4       	brge	.+10     	; 0x138c <Led_Init+0x36>
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	61 f0       	breq	.+24     	; 0x13a2 <Led_Init+0x4c>
    138a:	22 c0       	rjmp	.+68     	; 0x13d0 <Led_Init+0x7a>
    138c:	2a 81       	ldd	r18, Y+2	; 0x02
    138e:	3b 81       	ldd	r19, Y+3	; 0x03
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	91 f0       	breq	.+36     	; 0x13ba <Led_Init+0x64>
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	9b 81       	ldd	r25, Y+3	; 0x03
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	91 05       	cpc	r25, r1
    139e:	99 f0       	breq	.+38     	; 0x13c6 <Led_Init+0x70>
    13a0:	17 c0       	rjmp	.+46     	; 0x13d0 <Led_Init+0x7a>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	60 e1       	ldi	r22, 0x10	; 16
    13a6:	4f ef       	ldi	r20, 0xFF	; 255
    13a8:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
    13ac:	11 c0       	rjmp	.+34     	; 0x13d0 <Led_Init+0x7a>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	60 e2       	ldi	r22, 0x20	; 32
    13b2:	4f ef       	ldi	r20, 0xFF	; 255
    13b4:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
    13b8:	0b c0       	rjmp	.+22     	; 0x13d0 <Led_Init+0x7a>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	60 e4       	ldi	r22, 0x40	; 64
    13be:	4f ef       	ldi	r20, 0xFF	; 255
    13c0:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
    13c4:	05 c0       	rjmp	.+10     	; 0x13d0 <Led_Init+0x7a>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	60 e8       	ldi	r22, 0x80	; 128
    13ca:	4f ef       	ldi	r20, 0xFF	; 255
    13cc:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		break;
	default:

		break;
	}
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <Led_On+0x6>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned on */
	switch(en_led_id)
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3b 83       	std	Y+3, r19	; 0x03
    13f2:	2a 83       	std	Y+2, r18	; 0x02
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	91 05       	cpc	r25, r1
    13fc:	d9 f0       	breq	.+54     	; 0x1434 <Led_On+0x58>
    13fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1400:	3b 81       	ldd	r19, Y+3	; 0x03
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	2c f4       	brge	.+10     	; 0x1412 <Led_On+0x36>
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	9b 81       	ldd	r25, Y+3	; 0x03
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	61 f0       	breq	.+24     	; 0x1428 <Led_On+0x4c>
    1410:	22 c0       	rjmp	.+68     	; 0x1456 <Led_On+0x7a>
    1412:	2a 81       	ldd	r18, Y+2	; 0x02
    1414:	3b 81       	ldd	r19, Y+3	; 0x03
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	91 f0       	breq	.+36     	; 0x1440 <Led_On+0x64>
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	91 05       	cpc	r25, r1
    1424:	99 f0       	breq	.+38     	; 0x144c <Led_On+0x70>
    1426:	17 c0       	rjmp	.+46     	; 0x1456 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, HIGH);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	60 e1       	ldi	r22, 0x10	; 16
    142c:	4f ef       	ldi	r20, 0xFF	; 255
    142e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
    1432:	11 c0       	rjmp	.+34     	; 0x1456 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, HIGH);
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	60 e2       	ldi	r22, 0x20	; 32
    1438:	4f ef       	ldi	r20, 0xFF	; 255
    143a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
    143e:	0b c0       	rjmp	.+22     	; 0x1456 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, HIGH);
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	60 e4       	ldi	r22, 0x40	; 64
    1444:	4f ef       	ldi	r20, 0xFF	; 255
    1446:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, HIGH);
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	60 e8       	ldi	r22, 0x80	; 128
    1450:	4f ef       	ldi	r20, 0xFF	; 255
    1452:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		break;
	default:

		break;
	}
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <Led_Off+0x6>
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned off */
	switch(en_led_id)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3b 83       	std	Y+3, r19	; 0x03
    1478:	2a 83       	std	Y+2, r18	; 0x02
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	9b 81       	ldd	r25, Y+3	; 0x03
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	d9 f0       	breq	.+54     	; 0x14ba <Led_Off+0x58>
    1484:	2a 81       	ldd	r18, Y+2	; 0x02
    1486:	3b 81       	ldd	r19, Y+3	; 0x03
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <Led_Off+0x36>
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <Led_Off+0x4c>
    1496:	22 c0       	rjmp	.+68     	; 0x14dc <Led_Off+0x7a>
    1498:	2a 81       	ldd	r18, Y+2	; 0x02
    149a:	3b 81       	ldd	r19, Y+3	; 0x03
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	91 f0       	breq	.+36     	; 0x14c6 <Led_Off+0x64>
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	9b 81       	ldd	r25, Y+3	; 0x03
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	99 f0       	breq	.+38     	; 0x14d2 <Led_Off+0x70>
    14ac:	17 c0       	rjmp	.+46     	; 0x14dc <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	60 e1       	ldi	r22, 0x10	; 16
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
    14b8:	11 c0       	rjmp	.+34     	; 0x14dc <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	60 e2       	ldi	r22, 0x20	; 32
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
    14c4:	0b c0       	rjmp	.+22     	; 0x14dc <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	60 e4       	ldi	r22, 0x40	; 64
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	60 e8       	ldi	r22, 0x80	; 128
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		break;
	default:

		break;
	}
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <Led_Toggle+0x6>
    14ee:	0f 92       	push	r0
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be toggled */
	switch(en_led_id)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3b 83       	std	Y+3, r19	; 0x03
    14fe:	2a 83       	std	Y+2, r18	; 0x02
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	d1 f0       	breq	.+52     	; 0x153e <Led_Toggle+0x56>
    150a:	2a 81       	ldd	r18, Y+2	; 0x02
    150c:	3b 81       	ldd	r19, Y+3	; 0x03
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	2c f4       	brge	.+10     	; 0x151e <Led_Toggle+0x36>
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	61 f0       	breq	.+24     	; 0x1534 <Led_Toggle+0x4c>
    151c:	1e c0       	rjmp	.+60     	; 0x155a <Led_Toggle+0x72>
    151e:	2a 81       	ldd	r18, Y+2	; 0x02
    1520:	3b 81       	ldd	r19, Y+3	; 0x03
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <Led_Toggle+0x60>
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	9b 81       	ldd	r25, Y+3	; 0x03
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	81 f0       	breq	.+32     	; 0x1552 <Led_Toggle+0x6a>
    1532:	13 c0       	rjmp	.+38     	; 0x155a <Led_Toggle+0x72>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	60 e1       	ldi	r22, 0x10	; 16
    1538:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <gpioPinToggle>
    153c:	0e c0       	rjmp	.+28     	; 0x155a <Led_Toggle+0x72>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	60 e2       	ldi	r22, 0x20	; 32
    1542:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <gpioPinToggle>
    1546:	09 c0       	rjmp	.+18     	; 0x155a <Led_Toggle+0x72>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	60 e4       	ldi	r22, 0x40	; 64
    154c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <gpioPinToggle>
    1550:	04 c0       	rjmp	.+8      	; 0x155a <Led_Toggle+0x72>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	60 e8       	ldi	r22, 0x80	; 128
    1556:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <gpioPinToggle>
		break;
	default:

		break;
	}
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <pushButtonInit>:
#include "pushButtonConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void pushButtonInit(En_buttonId_t en_button_id)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <pushButtonInit+0x6>
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to be initialized */
	switch(en_button_id)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3b 83       	std	Y+3, r19	; 0x03
    157c:	2a 83       	std	Y+2, r18	; 0x02
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9b 81       	ldd	r25, Y+3	; 0x03
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	31 f0       	breq	.+12     	; 0x1592 <pushButtonInit+0x2c>
    1586:	2a 81       	ldd	r18, Y+2	; 0x02
    1588:	3b 81       	ldd	r19, Y+3	; 0x03
    158a:	21 30       	cpi	r18, 0x01	; 1
    158c:	31 05       	cpc	r19, r1
    158e:	39 f0       	breq	.+14     	; 0x159e <pushButtonInit+0x38>
    1590:	0b c0       	rjmp	.+22     	; 0x15a8 <pushButtonInit+0x42>
	{
	case BTN_0:
		gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	60 e1       	ldi	r22, 0x10	; 16
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <pushButtonInit+0x42>
		break;
	case BTN_1:
		gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	64 e0       	ldi	r22, 0x04	; 4
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		break;
	default:

		break;
	}
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <pushButtonUpdate>:

void pushButtonUpdate(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	/* Postponed */
}
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_button_id)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <pushButtonGetStatus+0x6>
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <pushButtonGetStatus+0x8>
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to read its status (pressed or released) */
	switch(en_button_id)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	3c 83       	std	Y+4, r19	; 0x04
    15d8:	2b 83       	std	Y+3, r18	; 0x03
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	71 f1       	breq	.+92     	; 0x1640 <pushButtonGetStatus+0x7e>
    15e4:	2b 81       	ldd	r18, Y+3	; 0x03
    15e6:	3c 81       	ldd	r19, Y+4	; 0x04
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <pushButtonGetStatus+0x36>
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	61 f0       	breq	.+24     	; 0x160e <pushButtonGetStatus+0x4c>
    15f6:	43 c0       	rjmp	.+134    	; 0x167e <pushButtonGetStatus+0xbc>
    15f8:	2b 81       	ldd	r18, Y+3	; 0x03
    15fa:	3c 81       	ldd	r19, Y+4	; 0x04
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	c1 f1       	breq	.+112    	; 0x1672 <pushButtonGetStatus+0xb0>
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	91 05       	cpc	r25, r1
    160a:	b1 f1       	breq	.+108    	; 0x1678 <pushButtonGetStatus+0xb6>
    160c:	38 c0       	rjmp	.+112    	; 0x167e <pushButtonGetStatus+0xbc>
	{
	case BTN_0:
		if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	60 e1       	ldi	r22, 0x10	; 16
    1612:	0e 94 3c 09 	call	0x1278	; 0x1278 <gpioPinRead>
    1616:	88 23       	and	r24, r24
    1618:	89 f0       	breq	.+34     	; 0x163c <pushButtonGetStatus+0x7a>
		{
			softwareDelayMs(20);
    161a:	64 e1       	ldi	r22, 0x14	; 20
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 21 0c 	call	0x1842	; 0x1842 <softwareDelayMs>
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	60 e1       	ldi	r22, 0x10	; 16
    162a:	0e 94 3c 09 	call	0x1278	; 0x1278 <gpioPinRead>
    162e:	88 23       	and	r24, r24
    1630:	19 f0       	breq	.+6      	; 0x1638 <pushButtonGetStatus+0x76>
			{
				return Pressed;
    1632:	92 e0       	ldi	r25, 0x02	; 2
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	25 c0       	rjmp	.+74     	; 0x1682 <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    1638:	1a 82       	std	Y+2, r1	; 0x02
    163a:	23 c0       	rjmp	.+70     	; 0x1682 <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    163c:	1a 82       	std	Y+2, r1	; 0x02
    163e:	21 c0       	rjmp	.+66     	; 0x1682 <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_1:
		if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	64 e0       	ldi	r22, 0x04	; 4
    1644:	0e 94 3c 09 	call	0x1278	; 0x1278 <gpioPinRead>
    1648:	88 23       	and	r24, r24
    164a:	89 f0       	breq	.+34     	; 0x166e <pushButtonGetStatus+0xac>
		{
			softwareDelayMs(20);
    164c:	64 e1       	ldi	r22, 0x14	; 20
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 21 0c 	call	0x1842	; 0x1842 <softwareDelayMs>
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	64 e0       	ldi	r22, 0x04	; 4
    165c:	0e 94 3c 09 	call	0x1278	; 0x1278 <gpioPinRead>
    1660:	88 23       	and	r24, r24
    1662:	19 f0       	breq	.+6      	; 0x166a <pushButtonGetStatus+0xa8>
			{
				return Pressed;
    1664:	22 e0       	ldi	r18, 0x02	; 2
    1666:	2a 83       	std	Y+2, r18	; 0x02
    1668:	0c c0       	rjmp	.+24     	; 0x1682 <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    166a:	1a 82       	std	Y+2, r1	; 0x02
    166c:	0a c0       	rjmp	.+20     	; 0x1682 <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    166e:	1a 82       	std	Y+2, r1	; 0x02
    1670:	08 c0       	rjmp	.+16     	; 0x1682 <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_2:
		return ERROR;
    1672:	3f ef       	ldi	r19, 0xFF	; 255
    1674:	3a 83       	std	Y+2, r19	; 0x02
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <pushButtonGetStatus+0xc0>
		break;
	case BTN_3:
		return ERROR;
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	8a 83       	std	Y+2, r24	; 0x02
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <pushButtonGetStatus+0xc0>
		break;
	default:
		return ERROR;
    167e:	9f ef       	ldi	r25, 0xFF	; 255
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <sevenSegInit>:
static uint8_t gu8_sevenSeg1Status = HIGH;

/*- APIs IMPLEMENTATION ------------------------------------*/

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <sevenSegInit+0x6>
    1698:	0f 92       	push	r0
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be initialized */
	switch(a_segment_id)
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3b 83       	std	Y+3, r19	; 0x03
    16a8:	2a 83       	std	Y+2, r18	; 0x02
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	9b 81       	ldd	r25, Y+3	; 0x03
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	31 f0       	breq	.+12     	; 0x16be <sevenSegInit+0x2c>
    16b2:	2a 81       	ldd	r18, Y+2	; 0x02
    16b4:	3b 81       	ldd	r19, Y+3	; 0x03
    16b6:	21 30       	cpi	r18, 0x01	; 1
    16b8:	31 05       	cpc	r19, r1
    16ba:	c9 f0       	breq	.+50     	; 0x16ee <sevenSegInit+0x5c>
    16bc:	2f c0       	rjmp	.+94     	; 0x171c <sevenSegInit+0x8a>
	{
	case SEG_0:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	6f e0       	ldi	r22, 0x0F	; 15
    16c2:	4f ef       	ldi	r20, 0xFF	; 255
    16c4:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT2 | BIT4), OUTPUT);
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	64 e1       	ldi	r22, 0x14	; 20
    16cc:	4f ef       	ldi	r20, 0xFF	; 255
    16ce:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	6f e0       	ldi	r22, 0x0F	; 15
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	60 e1       	ldi	r22, 0x10	; 16
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		sevenSegDisable(SEG_0);
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <sevenSegDisable>
    16ec:	17 c0       	rjmp	.+46     	; 0x171c <sevenSegInit+0x8a>
		break;
	case SEG_1:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	6f e0       	ldi	r22, 0x0F	; 15
    16f2:	4f ef       	ldi	r20, 0xFF	; 255
    16f4:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT3 | BIT4), OUTPUT);
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	68 e1       	ldi	r22, 0x18	; 24
    16fc:	4f ef       	ldi	r20, 0xFF	; 255
    16fe:	0e 94 13 08 	call	0x1026	; 0x1026 <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	6f e0       	ldi	r22, 0x0F	; 15
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	60 e1       	ldi	r22, 0x10	; 16
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		sevenSegDisable(SEG_1);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	0e 94 c1 0b 	call	0x1782	; 0x1782 <sevenSegDisable>
		break;
	}
}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <sevenSegEnable>:

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <sevenSegEnable+0x6>
    172e:	0f 92       	push	r0
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be enabled */
	switch(en_segment_id)
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	3b 83       	std	Y+3, r19	; 0x03
    173e:	2a 83       	std	Y+2, r18	; 0x02
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	9b 81       	ldd	r25, Y+3	; 0x03
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	31 f0       	breq	.+12     	; 0x1754 <sevenSegEnable+0x2c>
    1748:	2a 81       	ldd	r18, Y+2	; 0x02
    174a:	3b 81       	ldd	r19, Y+3	; 0x03
    174c:	21 30       	cpi	r18, 0x01	; 1
    174e:	31 05       	cpc	r19, r1
    1750:	51 f0       	breq	.+20     	; 0x1766 <sevenSegEnable+0x3e>
    1752:	11 c0       	rjmp	.+34     	; 0x1776 <sevenSegEnable+0x4e>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, LOW);
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	64 e0       	ldi	r22, 0x04	; 4
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		gu8_sevenSeg0Status = HIGH;
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	80 93 6f 00 	sts	0x006F, r24
    1764:	08 c0       	rjmp	.+16     	; 0x1776 <sevenSegEnable+0x4e>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, LOW);
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	68 e0       	ldi	r22, 0x08	; 8
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		gu8_sevenSeg1Status = HIGH;
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	80 93 60 00 	sts	0x0060, r24
		break;
	}
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <sevenSegDisable+0x6>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be disabled */
	switch(en_segment_id)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	3b 83       	std	Y+3, r19	; 0x03
    1798:	2a 83       	std	Y+2, r18	; 0x02
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	31 f0       	breq	.+12     	; 0x17ae <sevenSegDisable+0x2c>
    17a2:	2a 81       	ldd	r18, Y+2	; 0x02
    17a4:	3b 81       	ldd	r19, Y+3	; 0x03
    17a6:	21 30       	cpi	r18, 0x01	; 1
    17a8:	31 05       	cpc	r19, r1
    17aa:	49 f0       	breq	.+18     	; 0x17be <sevenSegDisable+0x3c>
    17ac:	0f c0       	rjmp	.+30     	; 0x17cc <sevenSegDisable+0x4a>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, HIGH);
    17ae:	83 e0       	ldi	r24, 0x03	; 3
    17b0:	64 e0       	ldi	r22, 0x04	; 4
    17b2:	4f ef       	ldi	r20, 0xFF	; 255
    17b4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		gu8_sevenSeg0Status = LOW;
    17b8:	10 92 6f 00 	sts	0x006F, r1
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <sevenSegDisable+0x4a>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, HIGH);
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	68 e0       	ldi	r22, 0x08	; 8
    17c2:	4f ef       	ldi	r20, 0xFF	; 255
    17c4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <gpioPinWrite>
		gu8_sevenSeg1Status = LOW;
    17c8:	10 92 60 00 	sts	0x0060, r1
		break;
	}
}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	00 d0       	rcall	.+0      	; 0x17de <sevenSegWrite+0x6>
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <sevenSegWrite+0x8>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which 7seg to be written */
	switch(en_segment_id)
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	3c 83       	std	Y+4, r19	; 0x04
    17f0:	2b 83       	std	Y+3, r18	; 0x03
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	31 f0       	breq	.+12     	; 0x1806 <sevenSegWrite+0x2e>
    17fa:	2b 81       	ldd	r18, Y+3	; 0x03
    17fc:	3c 81       	ldd	r19, Y+4	; 0x04
    17fe:	21 30       	cpi	r18, 0x01	; 1
    1800:	31 05       	cpc	r19, r1
    1802:	69 f0       	breq	.+26     	; 0x181e <sevenSegWrite+0x46>
    1804:	17 c0       	rjmp	.+46     	; 0x1834 <sevenSegWrite+0x5c>
	{
	case SEG_0:
		if(gu8_sevenSeg0Status == HIGH)
    1806:	80 91 6f 00 	lds	r24, 0x006F
    180a:	8f 3f       	cpi	r24, 0xFF	; 255
    180c:	99 f4       	brne	.+38     	; 0x1834 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	98 2f       	mov	r25, r24
    1812:	9f 70       	andi	r25, 0x0F	; 15
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	69 2f       	mov	r22, r25
    1818:	0e 94 43 07 	call	0xe86	; 0xe86 <gpioPortWrite>
    181c:	0b c0       	rjmp	.+22     	; 0x1834 <sevenSegWrite+0x5c>
		}
		break;
	case SEG_1:
		if(gu8_sevenSeg1Status == HIGH)
    181e:	80 91 60 00 	lds	r24, 0x0060
    1822:	8f 3f       	cpi	r24, 0xFF	; 255
    1824:	39 f4       	brne	.+14     	; 0x1834 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	98 2f       	mov	r25, r24
    182a:	9f 70       	andi	r25, 0x0F	; 15
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	69 2f       	mov	r22, r25
    1830:	0e 94 43 07 	call	0xe86	; 0xe86 <gpioPortWrite>
		}
		break;
	}
}
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <softwareDelayMs>:
#include "softwareDelay.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	60 97       	sbiw	r28, 0x10	; 16
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	6d 87       	std	Y+13, r22	; 0x0d
    1858:	7e 87       	std	Y+14, r23	; 0x0e
    185a:	8f 87       	std	Y+15, r24	; 0x0f
    185c:	98 8b       	std	Y+16, r25	; 0x10
	/* 16 MHz */
	uint32_t ticks=388, i, j;
    185e:	84 e8       	ldi	r24, 0x84	; 132
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	a0 e0       	ldi	r26, 0x00	; 0
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	89 87       	std	Y+9, r24	; 0x09
    1868:	9a 87       	std	Y+10, r25	; 0x0a
    186a:	ab 87       	std	Y+11, r26	; 0x0b
    186c:	bc 87       	std	Y+12, r27	; 0x0c
	for(i=0 ; i<u32_delay_in_ms ; i++)
    186e:	1d 82       	std	Y+5, r1	; 0x05
    1870:	1e 82       	std	Y+6, r1	; 0x06
    1872:	1f 82       	std	Y+7, r1	; 0x07
    1874:	18 86       	std	Y+8, r1	; 0x08
    1876:	28 c0       	rjmp	.+80     	; 0x18c8 <softwareDelayMs+0x86>
	{
		for(j=0 ; j<ticks ; j++);
    1878:	19 82       	std	Y+1, r1	; 0x01
    187a:	1a 82       	std	Y+2, r1	; 0x02
    187c:	1b 82       	std	Y+3, r1	; 0x03
    187e:	1c 82       	std	Y+4, r1	; 0x04
    1880:	0b c0       	rjmp	.+22     	; 0x1898 <softwareDelayMs+0x56>
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	ab 81       	ldd	r26, Y+3	; 0x03
    1888:	bc 81       	ldd	r27, Y+4	; 0x04
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	a1 1d       	adc	r26, r1
    188e:	b1 1d       	adc	r27, r1
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	ab 83       	std	Y+3, r26	; 0x03
    1896:	bc 83       	std	Y+4, r27	; 0x04
    1898:	29 81       	ldd	r18, Y+1	; 0x01
    189a:	3a 81       	ldd	r19, Y+2	; 0x02
    189c:	4b 81       	ldd	r20, Y+3	; 0x03
    189e:	5c 81       	ldd	r21, Y+4	; 0x04
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    18a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    18a8:	28 17       	cp	r18, r24
    18aa:	39 07       	cpc	r19, r25
    18ac:	4a 07       	cpc	r20, r26
    18ae:	5b 07       	cpc	r21, r27
    18b0:	40 f3       	brcs	.-48     	; 0x1882 <softwareDelayMs+0x40>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	/* 16 MHz */
	uint32_t ticks=388, i, j;
	for(i=0 ; i<u32_delay_in_ms ; i++)
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	af 81       	ldd	r26, Y+7	; 0x07
    18b8:	b8 85       	ldd	r27, Y+8	; 0x08
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	a1 1d       	adc	r26, r1
    18be:	b1 1d       	adc	r27, r1
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	af 83       	std	Y+7, r26	; 0x07
    18c6:	b8 87       	std	Y+8, r27	; 0x08
    18c8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ca:	3e 81       	ldd	r19, Y+6	; 0x06
    18cc:	4f 81       	ldd	r20, Y+7	; 0x07
    18ce:	58 85       	ldd	r21, Y+8	; 0x08
    18d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d4:	af 85       	ldd	r26, Y+15	; 0x0f
    18d6:	b8 89       	ldd	r27, Y+16	; 0x10
    18d8:	28 17       	cp	r18, r24
    18da:	39 07       	cpc	r19, r25
    18dc:	4a 07       	cpc	r20, r26
    18de:	5b 07       	cpc	r21, r27
    18e0:	58 f2       	brcs	.-106    	; 0x1878 <softwareDelayMs+0x36>
	{
		for(j=0 ; j<ticks ; j++);
	}
}
    18e2:	60 96       	adiw	r28, 0x10	; 16
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <__vector_10>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(TIMER0_COMP_vect)
{
    18f4:	1f 92       	push	r1
    18f6:	0f 92       	push	r0
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	0f 92       	push	r0
    18fc:	11 24       	eor	r1, r1
    18fe:	2f 93       	push	r18
    1900:	3f 93       	push	r19
    1902:	4f 93       	push	r20
    1904:	5f 93       	push	r21
    1906:	6f 93       	push	r22
    1908:	7f 93       	push	r23
    190a:	8f 93       	push	r24
    190c:	9f 93       	push	r25
    190e:	af 93       	push	r26
    1910:	bf 93       	push	r27
    1912:	ef 93       	push	r30
    1914:	ff 93       	push	r31
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_CTC_callBackPtr != NULL)
    191e:	80 91 72 00 	lds	r24, 0x0072
    1922:	90 91 73 00 	lds	r25, 0x0073
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	29 f0       	breq	.+10     	; 0x1934 <__vector_10+0x40>
	{
		g_T0_CTC_callBackPtr();
    192a:	e0 91 72 00 	lds	r30, 0x0072
    192e:	f0 91 73 00 	lds	r31, 0x0073
    1932:	09 95       	icall
	}
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	ff 91       	pop	r31
    193a:	ef 91       	pop	r30
    193c:	bf 91       	pop	r27
    193e:	af 91       	pop	r26
    1940:	9f 91       	pop	r25
    1942:	8f 91       	pop	r24
    1944:	7f 91       	pop	r23
    1946:	6f 91       	pop	r22
    1948:	5f 91       	pop	r21
    194a:	4f 91       	pop	r20
    194c:	3f 91       	pop	r19
    194e:	2f 91       	pop	r18
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	0f 90       	pop	r0
    1956:	1f 90       	pop	r1
    1958:	18 95       	reti

0000195a <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    195a:	1f 92       	push	r1
    195c:	0f 92       	push	r0
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	0f 92       	push	r0
    1962:	11 24       	eor	r1, r1
    1964:	2f 93       	push	r18
    1966:	3f 93       	push	r19
    1968:	4f 93       	push	r20
    196a:	5f 93       	push	r21
    196c:	6f 93       	push	r22
    196e:	7f 93       	push	r23
    1970:	8f 93       	push	r24
    1972:	9f 93       	push	r25
    1974:	af 93       	push	r26
    1976:	bf 93       	push	r27
    1978:	ef 93       	push	r30
    197a:	ff 93       	push	r31
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_OVF_callBackPtr != NULL)
    1984:	80 91 74 00 	lds	r24, 0x0074
    1988:	90 91 75 00 	lds	r25, 0x0075
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	29 f0       	breq	.+10     	; 0x199a <__vector_11+0x40>
	{
		g_T0_OVF_callBackPtr();
    1990:	e0 91 74 00 	lds	r30, 0x0074
    1994:	f0 91 75 00 	lds	r31, 0x0075
    1998:	09 95       	icall
	}
}
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	ff 91       	pop	r31
    19a0:	ef 91       	pop	r30
    19a2:	bf 91       	pop	r27
    19a4:	af 91       	pop	r26
    19a6:	9f 91       	pop	r25
    19a8:	8f 91       	pop	r24
    19aa:	7f 91       	pop	r23
    19ac:	6f 91       	pop	r22
    19ae:	5f 91       	pop	r21
    19b0:	4f 91       	pop	r20
    19b2:	3f 91       	pop	r19
    19b4:	2f 91       	pop	r18
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	0f 90       	pop	r0
    19bc:	1f 90       	pop	r1
    19be:	18 95       	reti

000019c0 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    19c0:	1f 92       	push	r1
    19c2:	0f 92       	push	r0
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	0f 92       	push	r0
    19c8:	11 24       	eor	r1, r1
    19ca:	2f 93       	push	r18
    19cc:	3f 93       	push	r19
    19ce:	4f 93       	push	r20
    19d0:	5f 93       	push	r21
    19d2:	6f 93       	push	r22
    19d4:	7f 93       	push	r23
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	af 93       	push	r26
    19dc:	bf 93       	push	r27
    19de:	ef 93       	push	r30
    19e0:	ff 93       	push	r31
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_ICU_callBackPtr != NULL)
    19ea:	80 91 76 00 	lds	r24, 0x0076
    19ee:	90 91 77 00 	lds	r25, 0x0077
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	29 f0       	breq	.+10     	; 0x1a00 <__vector_6+0x40>
	{
		g_T1_ICU_callBackPtr();
    19f6:	e0 91 76 00 	lds	r30, 0x0076
    19fa:	f0 91 77 00 	lds	r31, 0x0077
    19fe:	09 95       	icall
	}
}
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	7f 91       	pop	r23
    1a12:	6f 91       	pop	r22
    1a14:	5f 91       	pop	r21
    1a16:	4f 91       	pop	r20
    1a18:	3f 91       	pop	r19
    1a1a:	2f 91       	pop	r18
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	0f 90       	pop	r0
    1a22:	1f 90       	pop	r1
    1a24:	18 95       	reti

00001a26 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	4f 93       	push	r20
    1a36:	5f 93       	push	r21
    1a38:	6f 93       	push	r22
    1a3a:	7f 93       	push	r23
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	af 93       	push	r26
    1a42:	bf 93       	push	r27
    1a44:	ef 93       	push	r30
    1a46:	ff 93       	push	r31
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_A_callBackPtr != NULL)
    1a50:	80 91 78 00 	lds	r24, 0x0078
    1a54:	90 91 79 00 	lds	r25, 0x0079
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <__vector_7+0x40>
	{
		g_T1_CTC_A_callBackPtr();
    1a5c:	e0 91 78 00 	lds	r30, 0x0078
    1a60:	f0 91 79 00 	lds	r31, 0x0079
    1a64:	09 95       	icall
	}
}
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	2f 93       	push	r18
    1a98:	3f 93       	push	r19
    1a9a:	4f 93       	push	r20
    1a9c:	5f 93       	push	r21
    1a9e:	6f 93       	push	r22
    1aa0:	7f 93       	push	r23
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	af 93       	push	r26
    1aa8:	bf 93       	push	r27
    1aaa:	ef 93       	push	r30
    1aac:	ff 93       	push	r31
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_B_callBackPtr != NULL)
    1ab6:	80 91 7a 00 	lds	r24, 0x007A
    1aba:	90 91 7b 00 	lds	r25, 0x007B
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	29 f0       	breq	.+10     	; 0x1acc <__vector_8+0x40>
	{
		g_T1_CTC_B_callBackPtr();
    1ac2:	e0 91 7a 00 	lds	r30, 0x007A
    1ac6:	f0 91 7b 00 	lds	r31, 0x007B
    1aca:	09 95       	icall
	}
}
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	ff 91       	pop	r31
    1ad2:	ef 91       	pop	r30
    1ad4:	bf 91       	pop	r27
    1ad6:	af 91       	pop	r26
    1ad8:	9f 91       	pop	r25
    1ada:	8f 91       	pop	r24
    1adc:	7f 91       	pop	r23
    1ade:	6f 91       	pop	r22
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	0f 90       	pop	r0
    1aee:	1f 90       	pop	r1
    1af0:	18 95       	reti

00001af2 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1af2:	1f 92       	push	r1
    1af4:	0f 92       	push	r0
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	0f 92       	push	r0
    1afa:	11 24       	eor	r1, r1
    1afc:	2f 93       	push	r18
    1afe:	3f 93       	push	r19
    1b00:	4f 93       	push	r20
    1b02:	5f 93       	push	r21
    1b04:	6f 93       	push	r22
    1b06:	7f 93       	push	r23
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_OVF_callBackPtr != NULL)
    1b1c:	80 91 7c 00 	lds	r24, 0x007C
    1b20:	90 91 7d 00 	lds	r25, 0x007D
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	29 f0       	breq	.+10     	; 0x1b32 <__vector_9+0x40>
	{
		g_T1_OVF_callBackPtr();
    1b28:	e0 91 7c 00 	lds	r30, 0x007C
    1b2c:	f0 91 7d 00 	lds	r31, 0x007D
    1b30:	09 95       	icall
	}
}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	ff 91       	pop	r31
    1b38:	ef 91       	pop	r30
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1b58:	1f 92       	push	r1
    1b5a:	0f 92       	push	r0
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	0f 92       	push	r0
    1b60:	11 24       	eor	r1, r1
    1b62:	2f 93       	push	r18
    1b64:	3f 93       	push	r19
    1b66:	4f 93       	push	r20
    1b68:	5f 93       	push	r21
    1b6a:	6f 93       	push	r22
    1b6c:	7f 93       	push	r23
    1b6e:	8f 93       	push	r24
    1b70:	9f 93       	push	r25
    1b72:	af 93       	push	r26
    1b74:	bf 93       	push	r27
    1b76:	ef 93       	push	r30
    1b78:	ff 93       	push	r31
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_CTC_callBackPtr != NULL)
    1b82:	80 91 7e 00 	lds	r24, 0x007E
    1b86:	90 91 7f 00 	lds	r25, 0x007F
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	29 f0       	breq	.+10     	; 0x1b98 <__vector_4+0x40>
	{
		g_T2_CTC_callBackPtr();
    1b8e:	e0 91 7e 00 	lds	r30, 0x007E
    1b92:	f0 91 7f 00 	lds	r31, 0x007F
    1b96:	09 95       	icall
	}
}
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	ff 91       	pop	r31
    1b9e:	ef 91       	pop	r30
    1ba0:	bf 91       	pop	r27
    1ba2:	af 91       	pop	r26
    1ba4:	9f 91       	pop	r25
    1ba6:	8f 91       	pop	r24
    1ba8:	7f 91       	pop	r23
    1baa:	6f 91       	pop	r22
    1bac:	5f 91       	pop	r21
    1bae:	4f 91       	pop	r20
    1bb0:	3f 91       	pop	r19
    1bb2:	2f 91       	pop	r18
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	0f 90       	pop	r0
    1bba:	1f 90       	pop	r1
    1bbc:	18 95       	reti

00001bbe <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	2f 93       	push	r18
    1bca:	3f 93       	push	r19
    1bcc:	4f 93       	push	r20
    1bce:	5f 93       	push	r21
    1bd0:	6f 93       	push	r22
    1bd2:	7f 93       	push	r23
    1bd4:	8f 93       	push	r24
    1bd6:	9f 93       	push	r25
    1bd8:	af 93       	push	r26
    1bda:	bf 93       	push	r27
    1bdc:	ef 93       	push	r30
    1bde:	ff 93       	push	r31
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_OVF_callBackPtr != NULL)
    1be8:	80 91 80 00 	lds	r24, 0x0080
    1bec:	90 91 81 00 	lds	r25, 0x0081
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	29 f0       	breq	.+10     	; 0x1bfe <__vector_5+0x40>
	{
		g_T2_OVF_callBackPtr();
    1bf4:	e0 91 80 00 	lds	r30, 0x0080
    1bf8:	f0 91 81 00 	lds	r31, 0x0081
    1bfc:	09 95       	icall
	}
}
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	ff 91       	pop	r31
    1c04:	ef 91       	pop	r30
    1c06:	bf 91       	pop	r27
    1c08:	af 91       	pop	r26
    1c0a:	9f 91       	pop	r25
    1c0c:	8f 91       	pop	r24
    1c0e:	7f 91       	pop	r23
    1c10:	6f 91       	pop	r22
    1c12:	5f 91       	pop	r21
    1c14:	4f 91       	pop	r20
    1c16:	3f 91       	pop	r19
    1c18:	2f 91       	pop	r18
    1c1a:	0f 90       	pop	r0
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	0f 90       	pop	r0
    1c20:	1f 90       	pop	r1
    1c22:	18 95       	reti

00001c24 <timer0Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    1c24:	ef 92       	push	r14
    1c26:	0f 93       	push	r16
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <timer0Init+0xa>
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <timer0Init+0xc>
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <timer0Init+0xe>
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	6a 83       	std	Y+2, r22	; 0x02
    1c3a:	4b 83       	std	Y+3, r20	; 0x03
    1c3c:	2c 83       	std	Y+4, r18	; 0x04
    1c3e:	0d 83       	std	Y+5, r16	; 0x05
    1c40:	ee 82       	std	Y+6, r14	; 0x06
	/* Non-PWM mode */
	SET_BIT(TCCR0, FOC0);
    1c42:	a3 e5       	ldi	r26, 0x53	; 83
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e3 e5       	ldi	r30, 0x53	; 83
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 68       	ori	r24, 0x80	; 128
    1c4e:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR0 = (TCCR0 & 0xB7) | (en_mode);
    1c50:	a3 e5       	ldi	r26, 0x53	; 83
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e3 e5       	ldi	r30, 0x53	; 83
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	97 7b       	andi	r25, 0xB7	; 183
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	89 2b       	or	r24, r25
    1c62:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR0 = (TCCR0 & 0xCF) | (en_OC0);
    1c64:	a3 e5       	ldi	r26, 0x53	; 83
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e3 e5       	ldi	r30, 0x53	; 83
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	98 2f       	mov	r25, r24
    1c70:	9f 7c       	andi	r25, 0xCF	; 207
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	89 2b       	or	r24, r25
    1c76:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	80 93 70 00 	sts	0x0070, r24

	/* Set the timer/counter0 initial value */
	TCNT0 = u8_initialValue;
    1c7e:	e2 e5       	ldi	r30, 0x52	; 82
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR0 = u8_outputCompare;
    1c86:	ec e5       	ldi	r30, 0x5C	; 92
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xFC) | (en_interruptMask);
    1c8e:	a9 e5       	ldi	r26, 0x59	; 89
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e9 e5       	ldi	r30, 0x59	; 89
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	98 2f       	mov	r25, r24
    1c9a:	9c 7f       	andi	r25, 0xFC	; 252
    1c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9e:	89 2b       	or	r24, r25
    1ca0:	8c 93       	st	X, r24
}
    1ca2:	26 96       	adiw	r28, 0x06	; 6
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	0f 91       	pop	r16
    1cb4:	ef 90       	pop	r14
    1cb6:	08 95       	ret

00001cb8 <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter0 custom value */
	TCNT0 = u8_value;
    1cc4:	e2 e5       	ldi	r30, 0x52	; 82
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	80 83       	st	Z, r24
}
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <timer0Read>:

uint8_t timer0Read(void)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT0;
    1cdc:	e2 e5       	ldi	r30, 0x52	; 82
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <timer0Start>:

void timer0Start(void)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR0 = (TCCR0 & 0xF8) | (gu8_timer0Timer1PreScaler);
    1cf0:	a3 e5       	ldi	r26, 0x53	; 83
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e3 e5       	ldi	r30, 0x53	; 83
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	98 2f       	mov	r25, r24
    1cfc:	98 7f       	andi	r25, 0xF8	; 248
    1cfe:	80 91 70 00 	lds	r24, 0x0070
    1d02:	89 2b       	or	r24, r25
    1d04:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT0 = 0;
    1d06:	e2 e5       	ldi	r30, 0x52	; 82
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	10 82       	st	Z, r1
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <timer0Stop>:

void timer0Stop(void)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR0 &= ~((1 << CS00) | (1 << CS01) | (1 << CS02));
    1d1a:	a3 e5       	ldi	r26, 0x53	; 83
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e3 e5       	ldi	r30, 0x53	; 83
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	88 7f       	andi	r24, 0xF8	; 248
    1d26:	8c 93       	st	X, r24
}
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    1d2e:	ef 92       	push	r14
    1d30:	0f 93       	push	r16
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <timer0DelayMs+0xa>
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <timer0DelayMs+0xc>
    1d3a:	0f 92       	push	r0
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	9d 83       	std	Y+5, r25	; 0x05
    1d42:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    1d44:	1b 82       	std	Y+3, r1	; 0x03
    1d46:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    1d48:	8a ef       	ldi	r24, 0xFA	; 250
    1d4a:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	43 e0       	ldi	r20, 0x03	; 3
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	00 e0       	ldi	r16, 0x00	; 0
    1d56:	ee 24       	eor	r14, r14
    1d58:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <timer0Init>
	timer0Start();
    1d5c:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <timer0Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1d60:	1b 82       	std	Y+3, r1	; 0x03
    1d62:	1a 82       	std	Y+2, r1	; 0x02
    1d64:	0e c0       	rjmp	.+28     	; 0x1d82 <timer0DelayMs+0x54>
	{
		while(TCNT0 < u8_outputCompare);
    1d66:	e2 e5       	ldi	r30, 0x52	; 82
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	90 81       	ld	r25, Z
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	98 17       	cp	r25, r24
    1d70:	d0 f3       	brcs	.-12     	; 0x1d66 <timer0DelayMs+0x38>
		TCNT0 = 0;
    1d72:	e2 e5       	ldi	r30, 0x52	; 82
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
	timer0Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	9b 83       	std	Y+3, r25	; 0x03
    1d80:	8a 83       	std	Y+2, r24	; 0x02
    1d82:	2a 81       	ldd	r18, Y+2	; 0x02
    1d84:	3b 81       	ldd	r19, Y+3	; 0x03
    1d86:	8c 81       	ldd	r24, Y+4	; 0x04
    1d88:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8a:	28 17       	cp	r18, r24
    1d8c:	39 07       	cpc	r19, r25
    1d8e:	58 f3       	brcs	.-42     	; 0x1d66 <timer0DelayMs+0x38>
	{
		while(TCNT0 < u8_outputCompare);
		TCNT0 = 0;
	}
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	0f 91       	pop	r16
    1da0:	ef 90       	pop	r14
    1da2:	08 95       	ret

00001da4 <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    1da4:	ef 92       	push	r14
    1da6:	0f 93       	push	r16
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	29 97       	sbiw	r28, 0x09	; 9
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	6e 83       	std	Y+6, r22	; 0x06
    1dbe:	7f 83       	std	Y+7, r23	; 0x07
    1dc0:	88 87       	std	Y+8, r24	; 0x08
    1dc2:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    1dc4:	1a 82       	std	Y+2, r1	; 0x02
    1dc6:	1b 82       	std	Y+3, r1	; 0x03
    1dc8:	1c 82       	std	Y+4, r1	; 0x04
    1dca:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    1dcc:	80 e1       	ldi	r24, 0x10	; 16
    1dce:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
    1dd0:	88 e0       	ldi	r24, 0x08	; 8
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	09 81       	ldd	r16, Y+1	; 0x01
    1dda:	ee 24       	eor	r14, r14
    1ddc:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <timer0Init>
	timer0Start();
    1de0:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <timer0Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1de4:	1a 82       	std	Y+2, r1	; 0x02
    1de6:	1b 82       	std	Y+3, r1	; 0x03
    1de8:	1c 82       	std	Y+4, r1	; 0x04
    1dea:	1d 82       	std	Y+5, r1	; 0x05
    1dec:	1e c0       	rjmp	.+60     	; 0x1e2a <timer0DelayUs+0x86>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
    1dee:	e8 e5       	ldi	r30, 0x58	; 88
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	82 70       	andi	r24, 0x02	; 2
    1dfa:	90 70       	andi	r25, 0x00	; 0
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	b9 f3       	breq	.-18     	; 0x1dee <timer0DelayUs+0x4a>
		SET_BIT(TIFR, OCF0);
    1e00:	a8 e5       	ldi	r26, 0x58	; 88
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e8 e5       	ldi	r30, 0x58	; 88
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 60       	ori	r24, 0x02	; 2
    1e0c:	8c 93       	st	X, r24
		TCNT0 = 0;
    1e0e:	e2 e5       	ldi	r30, 0x52	; 82
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
	timer0Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	9b 81       	ldd	r25, Y+3	; 0x03
    1e18:	ac 81       	ldd	r26, Y+4	; 0x04
    1e1a:	bd 81       	ldd	r27, Y+5	; 0x05
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	a1 1d       	adc	r26, r1
    1e20:	b1 1d       	adc	r27, r1
    1e22:	8a 83       	std	Y+2, r24	; 0x02
    1e24:	9b 83       	std	Y+3, r25	; 0x03
    1e26:	ac 83       	std	Y+4, r26	; 0x04
    1e28:	bd 83       	std	Y+5, r27	; 0x05
    1e2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e2c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e2e:	4c 81       	ldd	r20, Y+4	; 0x04
    1e30:	5d 81       	ldd	r21, Y+5	; 0x05
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	a8 85       	ldd	r26, Y+8	; 0x08
    1e38:	b9 85       	ldd	r27, Y+9	; 0x09
    1e3a:	28 17       	cp	r18, r24
    1e3c:	39 07       	cpc	r19, r25
    1e3e:	4a 07       	cpc	r20, r26
    1e40:	5b 07       	cpc	r21, r27
    1e42:	a8 f2       	brcs	.-86     	; 0x1dee <timer0DelayUs+0x4a>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
		SET_BIT(TIFR, OCF0);
		TCNT0 = 0;
	}
}
    1e44:	29 96       	adiw	r28, 0x09	; 9
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	0f 91       	pop	r16
    1e56:	ef 90       	pop	r14
    1e58:	08 95       	ret

00001e5a <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1e5a:	ef 92       	push	r14
    1e5c:	0f 93       	push	r16
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <timer0SwPWM+0xa>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <timer0SwPWM+0xc>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
    1e6c:	6c 83       	std	Y+4, r22	; 0x04
	/* Two variables to hold the values of output compare and prescaler */
	uint8_t u8_outputCompare, u8_prescaler;

	/* Enable global interrupt */
	sei();
    1e6e:	78 94       	sei
	
	/* If condition to determine the right equation to calculate prescaler and output compare values */
	if(u8_frequency <= 80)
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	81 35       	cpi	r24, 0x51	; 81
    1e74:	e8 f4       	brcc	.+58     	; 0x1eb0 <timer0SwPWM+0x56>
	{
		u8_prescaler = T0_PRESCALER_64;
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 e0       	ldi	r26, 0x00	; 0
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	39 e1       	ldi	r19, 0x19	; 25
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
    1e94:	9b 01       	movw	r18, r22
    1e96:	ac 01       	movw	r20, r24
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	94 e2       	ldi	r25, 0x24	; 36
    1e9c:	a4 ef       	ldi	r26, 0xF4	; 244
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    1ea8:	da 01       	movw	r26, r20
    1eaa:	c9 01       	movw	r24, r18
    1eac:	8a 83       	std	Y+2, r24	; 0x02
    1eae:	1c c0       	rjmp	.+56     	; 0x1ee8 <timer0SwPWM+0x8e>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a0 e0       	ldi	r26, 0x00	; 0
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	20 e2       	ldi	r18, 0x20	; 32
    1ec0:	33 e0       	ldi	r19, 0x03	; 3
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	bc 01       	movw	r22, r24
    1ec8:	cd 01       	movw	r24, r26
    1eca:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	94 e2       	ldi	r25, 0x24	; 36
    1ed6:	a4 ef       	ldi	r26, 0xF4	; 244
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    1ee2:	da 01       	movw	r26, r20
    1ee4:	c9 01       	movw	r24, r18
    1ee6:	8a 83       	std	Y+2, r24	; 0x02
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}
	
	/* Initialize the timer depending on the previously calculated values */
	timer0Init(T0_COMP_MODE, T0_OC0_DIS, u8_prescaler, 0, u8_outputCompare, T0_INTERRUPT_CMP);
    1ee8:	88 e0       	ldi	r24, 0x08	; 8
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	49 81       	ldd	r20, Y+1	; 0x01
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	0a 81       	ldd	r16, Y+2	; 0x02
    1ef2:	ee 24       	eor	r14, r14
    1ef4:	68 94       	set
    1ef6:	e1 f8       	bld	r14, 1
    1ef8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <timer0Init>
	
	/* Provide the clock to the timer */
	timer0Start();
    1efc:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <timer0Start>
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	0f 91       	pop	r16
    1f0e:	ef 90       	pop	r14
    1f10:	08 95       	ret

00001f12 <Timer0_OVF_setCallBack>:

void Timer0_OVF_setCallBack(void(*local_ptr)(void))
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <Timer0_OVF_setCallBack+0x6>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	g_T0_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	90 93 75 00 	sts	0x0075, r25
    1f28:	80 93 74 00 	sts	0x0074, r24
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <Timer0_CTC_setCallBack>:

void Timer0_CTC_setCallBack(void(*local_ptr)(void))
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <Timer0_CTC_setCallBack+0x6>
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
	g_T0_CTC_callBackPtr = (volatile void(*)(void))local_ptr;
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	9a 81       	ldd	r25, Y+2	; 0x02
    1f48:	90 93 73 00 	sts	0x0073, r25
    1f4c:	80 93 72 00 	sts	0x0072, r24
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <timer1Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC1,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    1f5a:	af 92       	push	r10
    1f5c:	cf 92       	push	r12
    1f5e:	df 92       	push	r13
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	2d 97       	sbiw	r28, 0x0d	; 13
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	7b 83       	std	Y+3, r23	; 0x03
    1f80:	6a 83       	std	Y+2, r22	; 0x02
    1f82:	4c 83       	std	Y+4, r20	; 0x04
    1f84:	3e 83       	std	Y+6, r19	; 0x06
    1f86:	2d 83       	std	Y+5, r18	; 0x05
    1f88:	18 87       	std	Y+8, r17	; 0x08
    1f8a:	0f 83       	std	Y+7, r16	; 0x07
    1f8c:	fa 86       	std	Y+10, r15	; 0x0a
    1f8e:	e9 86       	std	Y+9, r14	; 0x09
    1f90:	dc 86       	std	Y+12, r13	; 0x0c
    1f92:	cb 86       	std	Y+11, r12	; 0x0b
    1f94:	ad 86       	std	Y+13, r10	; 0x0d
	/* Non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    1f96:	af e4       	ldi	r26, 0x4F	; 79
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	ef e4       	ldi	r30, 0x4F	; 79
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	88 60       	ori	r24, 0x08	; 8
    1fa2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    1fa4:	af e4       	ldi	r26, 0x4F	; 79
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	ef e4       	ldi	r30, 0x4F	; 79
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	84 60       	ori	r24, 0x04	; 4
    1fb0:	8c 93       	st	X, r24

	TCCR1 = 0x0000;
    1fb2:	ee e4       	ldi	r30, 0x4E	; 78
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	11 82       	std	Z+1, r1	; 0x01
    1fb8:	10 82       	st	Z, r1

	/* Set the required operating mode */
	TCCR1 = en_mode | en_OC1;
    1fba:	ee e4       	ldi	r30, 0x4E	; 78
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	82 2b       	or	r24, r18
    1fca:	93 2b       	or	r25, r19
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	80 83       	st	Z, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    1fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd2:	80 93 70 00 	sts	0x0070, r24

	/* Set the timer/counter0 initial value */
	TCNT1 = u16_initialValue;
    1fd6:	ec e4       	ldi	r30, 0x4C	; 76
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	8d 81       	ldd	r24, Y+5	; 0x05
    1fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR1A = u16_outputCompareA;
    1fe2:	ea e4       	ldi	r30, 0x4A	; 74
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe8:	98 85       	ldd	r25, Y+8	; 0x08
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
	OCR1B = u16_outputCompareB;
    1fee:	e8 e4       	ldi	r30, 0x48	; 72
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	89 85       	ldd	r24, Y+9	; 0x09
    1ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xC3) | (en_interruptMask);
    1ffa:	a9 e5       	ldi	r26, 0x59	; 89
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e9 e5       	ldi	r30, 0x59	; 89
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	98 2f       	mov	r25, r24
    2006:	93 7c       	andi	r25, 0xC3	; 195
    2008:	8d 85       	ldd	r24, Y+13	; 0x0d
    200a:	89 2b       	or	r24, r25
    200c:	8c 93       	st	X, r24
}
    200e:	2d 96       	adiw	r28, 0x0d	; 13
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	af 90       	pop	r10
    202c:	08 95       	ret

0000202e <timer1Set>:

void timer1Set(uint16_t u16_value)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <timer1Set+0x6>
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter1 custom value */
	TCNT1 = u16_value;
    203c:	ec e4       	ldi	r30, 0x4C	; 76
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <timer1Read>:

uint16_t timer1Read(void)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT1;
    205a:	ec e4       	ldi	r30, 0x4C	; 76
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
}
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <timer1Start>:

void timer1Start(void)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (gu8_timer0Timer1PreScaler);
    2070:	ae e4       	ldi	r26, 0x4E	; 78
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	ee e4       	ldi	r30, 0x4E	; 78
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	98 2f       	mov	r25, r24
    207c:	98 7f       	andi	r25, 0xF8	; 248
    207e:	80 91 70 00 	lds	r24, 0x0070
    2082:	89 2b       	or	r24, r25
    2084:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT1 = 0;
    2086:	ec e4       	ldi	r30, 0x4C	; 76
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	11 82       	std	Z+1, r1	; 0x01
    208c:	10 82       	st	Z, r1
}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <timer1Stop>:

void timer1Stop(void)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
    209c:	ae e4       	ldi	r26, 0x4E	; 78
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	ee e4       	ldi	r30, 0x4E	; 78
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	88 7f       	andi	r24, 0xF8	; 248
    20a8:	8c 93       	st	X, r24
}
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    20b0:	af 92       	push	r10
    20b2:	cf 92       	push	r12
    20b4:	df 92       	push	r13
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <timer1DelayMs+0x14>
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <timer1DelayMs+0x16>
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <timer1DelayMs+0x18>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u16_msCounter = 0;
    20d0:	1c 82       	std	Y+4, r1	; 0x04
    20d2:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    20d4:	8a ef       	ldi	r24, 0xFA	; 250
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	43 e0       	ldi	r20, 0x03	; 3
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	00 e0       	ldi	r16, 0x00	; 0
    20ea:	10 e0       	ldi	r17, 0x00	; 0
    20ec:	ee 24       	eor	r14, r14
    20ee:	ff 24       	eor	r15, r15
    20f0:	cc 24       	eor	r12, r12
    20f2:	dd 24       	eor	r13, r13
    20f4:	aa 24       	eor	r10, r10
    20f6:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <timer1Init>
	timer1Start();
    20fa:	0e 94 34 10 	call	0x2068	; 0x2068 <timer1Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    20fe:	1c 82       	std	Y+4, r1	; 0x04
    2100:	1b 82       	std	Y+3, r1	; 0x03
    2102:	12 c0       	rjmp	.+36     	; 0x2128 <timer1DelayMs+0x78>
	{
		while(TCNT1 < u16_outputCompare);
    2104:	ec e4       	ldi	r30, 0x4C	; 76
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	20 81       	ld	r18, Z
    210a:	31 81       	ldd	r19, Z+1	; 0x01
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	28 17       	cp	r18, r24
    2112:	39 07       	cpc	r19, r25
    2114:	b8 f3       	brcs	.-18     	; 0x2104 <timer1DelayMs+0x54>
		TCNT1 = 0;
    2116:	ec e4       	ldi	r30, 0x4C	; 76
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	11 82       	std	Z+1, r1	; 0x01
    211c:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
	timer1Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
    2128:	2b 81       	ldd	r18, Y+3	; 0x03
    212a:	3c 81       	ldd	r19, Y+4	; 0x04
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	28 17       	cp	r18, r24
    2132:	39 07       	cpc	r19, r25
    2134:	38 f3       	brcs	.-50     	; 0x2104 <timer1DelayMs+0x54>
	{
		while(TCNT1 < u16_outputCompare);
		TCNT1 = 0;
	}
}
    2136:	26 96       	adiw	r28, 0x06	; 6
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	ff 90       	pop	r15
    214c:	ef 90       	pop	r14
    214e:	df 90       	pop	r13
    2150:	cf 90       	pop	r12
    2152:	af 90       	pop	r10
    2154:	08 95       	ret

00002156 <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    2156:	af 92       	push	r10
    2158:	cf 92       	push	r12
    215a:	df 92       	push	r13
    215c:	ef 92       	push	r14
    215e:	ff 92       	push	r15
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	2a 97       	sbiw	r28, 0x0a	; 10
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	6f 83       	std	Y+7, r22	; 0x07
    217a:	78 87       	std	Y+8, r23	; 0x08
    217c:	89 87       	std	Y+9, r24	; 0x09
    217e:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t u32_usCounter = 0;
    2180:	1b 82       	std	Y+3, r1	; 0x03
    2182:	1c 82       	std	Y+4, r1	; 0x04
    2184:	1d 82       	std	Y+5, r1	; 0x05
    2186:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    2188:	80 e1       	ldi	r24, 0x10	; 16
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
    2190:	e9 81       	ldd	r30, Y+1	; 0x01
    2192:	fa 81       	ldd	r31, Y+2	; 0x02
    2194:	88 e0       	ldi	r24, 0x08	; 8
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	8f 01       	movw	r16, r30
    21a2:	ee 24       	eor	r14, r14
    21a4:	ff 24       	eor	r15, r15
    21a6:	cc 24       	eor	r12, r12
    21a8:	dd 24       	eor	r13, r13
    21aa:	aa 24       	eor	r10, r10
    21ac:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <timer1Init>
	timer1Start();
    21b0:	0e 94 34 10 	call	0x2068	; 0x2068 <timer1Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    21b4:	1b 82       	std	Y+3, r1	; 0x03
    21b6:	1c 82       	std	Y+4, r1	; 0x04
    21b8:	1d 82       	std	Y+5, r1	; 0x05
    21ba:	1e 82       	std	Y+6, r1	; 0x06
    21bc:	1f c0       	rjmp	.+62     	; 0x21fc <timer1DelayUs+0xa6>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
    21be:	e8 e5       	ldi	r30, 0x58	; 88
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	88 2f       	mov	r24, r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	80 71       	andi	r24, 0x10	; 16
    21ca:	90 70       	andi	r25, 0x00	; 0
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	b9 f3       	breq	.-18     	; 0x21be <timer1DelayUs+0x68>
		SET_BIT(TIFR, OCF1A);
    21d0:	a8 e5       	ldi	r26, 0x58	; 88
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e8 e5       	ldi	r30, 0x58	; 88
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	80 61       	ori	r24, 0x10	; 16
    21dc:	8c 93       	st	X, r24
		TCNT1 = 0;
    21de:	ec e4       	ldi	r30, 0x4C	; 76
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	11 82       	std	Z+1, r1	; 0x01
    21e4:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
	timer1Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	ad 81       	ldd	r26, Y+5	; 0x05
    21ec:	be 81       	ldd	r27, Y+6	; 0x06
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	a1 1d       	adc	r26, r1
    21f2:	b1 1d       	adc	r27, r1
    21f4:	8b 83       	std	Y+3, r24	; 0x03
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	ad 83       	std	Y+5, r26	; 0x05
    21fa:	be 83       	std	Y+6, r27	; 0x06
    21fc:	2b 81       	ldd	r18, Y+3	; 0x03
    21fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2200:	4d 81       	ldd	r20, Y+5	; 0x05
    2202:	5e 81       	ldd	r21, Y+6	; 0x06
    2204:	8f 81       	ldd	r24, Y+7	; 0x07
    2206:	98 85       	ldd	r25, Y+8	; 0x08
    2208:	a9 85       	ldd	r26, Y+9	; 0x09
    220a:	ba 85       	ldd	r27, Y+10	; 0x0a
    220c:	28 17       	cp	r18, r24
    220e:	39 07       	cpc	r19, r25
    2210:	4a 07       	cpc	r20, r26
    2212:	5b 07       	cpc	r21, r27
    2214:	a0 f2       	brcs	.-88     	; 0x21be <timer1DelayUs+0x68>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
		SET_BIT(TIFR, OCF1A);
		TCNT1 = 0;
	}
}
    2216:	2a 96       	adiw	r28, 0x0a	; 10
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	ff 90       	pop	r15
    222c:	ef 90       	pop	r14
    222e:	df 90       	pop	r13
    2230:	cf 90       	pop	r12
    2232:	af 90       	pop	r10
    2234:	08 95       	ret

00002236 <timer1SwPWM>:

void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    2236:	af 92       	push	r10
    2238:	cf 92       	push	r12
    223a:	df 92       	push	r13
    223c:	ef 92       	push	r14
    223e:	ff 92       	push	r15
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <timer1SwPWM+0x14>
    224a:	00 d0       	rcall	.+0      	; 0x224c <timer1SwPWM+0x16>
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	8b 83       	std	Y+3, r24	; 0x03
    2252:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    2254:	78 94       	sei

	if(u8_frequency <= 80)
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	81 35       	cpi	r24, 0x51	; 81
    225a:	e8 f4       	brcc	.+58     	; 0x2296 <timer1SwPWM+0x60>
	{
		u8_prescaler = T0_PRESCALER_64;
    225c:	83 e0       	ldi	r24, 0x03	; 3
    225e:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	88 2f       	mov	r24, r24
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	a0 e0       	ldi	r26, 0x00	; 0
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	39 e1       	ldi	r19, 0x19	; 25
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
    227a:	9b 01       	movw	r18, r22
    227c:	ac 01       	movw	r20, r24
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	94 e2       	ldi	r25, 0x24	; 36
    2282:	a4 ef       	ldi	r26, 0xF4	; 244
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    228e:	da 01       	movw	r26, r20
    2290:	c9 01       	movw	r24, r18
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	1c c0       	rjmp	.+56     	; 0x22ce <timer1SwPWM+0x98>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	a0 e0       	ldi	r26, 0x00	; 0
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	20 e2       	ldi	r18, 0x20	; 32
    22a6:	33 e0       	ldi	r19, 0x03	; 3
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
    22b4:	9b 01       	movw	r18, r22
    22b6:	ac 01       	movw	r20, r24
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	94 e2       	ldi	r25, 0x24	; 36
    22bc:	a4 ef       	ldi	r26, 0xF4	; 244
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    22c8:	da 01       	movw	r26, r20
    22ca:	c9 01       	movw	r24, r18
    22cc:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, u8_prescaler, 0, u8_outputCompare, 0, 0, T1_INTERRUPT_CMP_1A);
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	e8 2f       	mov	r30, r24
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	88 e0       	ldi	r24, 0x08	; 8
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	49 81       	ldd	r20, Y+1	; 0x01
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	8f 01       	movw	r16, r30
    22e2:	ee 24       	eor	r14, r14
    22e4:	ff 24       	eor	r15, r15
    22e6:	cc 24       	eor	r12, r12
    22e8:	dd 24       	eor	r13, r13
    22ea:	aa 24       	eor	r10, r10
    22ec:	68 94       	set
    22ee:	a4 f8       	bld	r10, 4
    22f0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <timer1Init>
	timer1Start();
    22f4:	0e 94 34 10 	call	0x2068	; 0x2068 <timer1Start>
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	ff 90       	pop	r15
    230a:	ef 90       	pop	r14
    230c:	df 90       	pop	r13
    230e:	cf 90       	pop	r12
    2310:	af 90       	pop	r10
    2312:	08 95       	ret

00002314 <Timer1_OVF_setCallBack>:

void Timer1_OVF_setCallBack(void(*local_ptr)(void))
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <Timer1_OVF_setCallBack+0x6>
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
	g_T1_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	90 93 7d 00 	sts	0x007D, r25
    232a:	80 93 7c 00 	sts	0x007C, r24
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <Timer1_CTC_A_setCallBack>:

void Timer1_CTC_A_setCallBack(void(*local_ptr)(void))
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <Timer1_CTC_A_setCallBack+0x6>
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
	g_T1_CTC_A_callBackPtr = (volatile void(*)(void))local_ptr;
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	90 93 79 00 	sts	0x0079, r25
    234e:	80 93 78 00 	sts	0x0078, r24
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <Timer1_CTC_B_setCallBack>:

void Timer1_CTC_B_setCallBack(void(*local_ptr)(void))
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	00 d0       	rcall	.+0      	; 0x2362 <Timer1_CTC_B_setCallBack+0x6>
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
	g_T1_CTC_B_callBackPtr = (volatile void(*)(void))local_ptr;
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	90 93 7b 00 	sts	0x007B, r25
    2372:	80 93 7a 00 	sts	0x007A, r24
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <Timer1_ICU_setCallBack>:

void Timer1_ICU_setCallBack(void(*local_ptr)(void))
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <Timer1_ICU_setCallBack+0x6>
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
	g_T1_ICU_callBackPtr = (volatile void(*)(void))local_ptr;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	90 93 77 00 	sts	0x0077, r25
    2396:	80 93 76 00 	sts	0x0076, r24
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <timer2Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC2,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    23a4:	cf 92       	push	r12
    23a6:	ef 92       	push	r14
    23a8:	0f 93       	push	r16
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	27 97       	sbiw	r28, 0x07	; 7
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	6a 83       	std	Y+2, r22	; 0x02
    23c2:	4b 83       	std	Y+3, r20	; 0x03
    23c4:	2c 83       	std	Y+4, r18	; 0x04
    23c6:	0d 83       	std	Y+5, r16	; 0x05
    23c8:	ee 82       	std	Y+6, r14	; 0x06
    23ca:	cf 82       	std	Y+7, r12	; 0x07
	/* Non-PWM mode */
	SET_BIT(TCCR2, FOC2);
    23cc:	a5 e4       	ldi	r26, 0x45	; 69
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e5 e4       	ldi	r30, 0x45	; 69
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	80 68       	ori	r24, 0x80	; 128
    23d8:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR2 = (TCCR2 & 0xB7) | (en_mode);
    23da:	a5 e4       	ldi	r26, 0x45	; 69
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e5 e4       	ldi	r30, 0x45	; 69
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	98 2f       	mov	r25, r24
    23e6:	97 7b       	andi	r25, 0xB7	; 183
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	89 2b       	or	r24, r25
    23ec:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR2 = (TCCR2 & 0xCF) | (en_OC2);
    23ee:	a5 e4       	ldi	r26, 0x45	; 69
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e5 e4       	ldi	r30, 0x45	; 69
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	98 2f       	mov	r25, r24
    23fa:	9f 7c       	andi	r25, 0xCF	; 207
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	89 2b       	or	r24, r25
    2400:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer2PreScaler = en_prescal;
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	80 93 71 00 	sts	0x0071, r24

	/* Set the timer/counter0 initial value */
	TCNT2 = u8_initialValue;
    2408:	e4 e4       	ldi	r30, 0x44	; 68
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	8c 81       	ldd	r24, Y+4	; 0x04
    240e:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR2 = u8_outputCompare;
    2410:	e3 e4       	ldi	r30, 0x43	; 67
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0x3F) | (en_interruptMask);
    2418:	a9 e5       	ldi	r26, 0x59	; 89
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e9 e5       	ldi	r30, 0x59	; 89
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	98 2f       	mov	r25, r24
    2424:	9f 73       	andi	r25, 0x3F	; 63
    2426:	8f 81       	ldd	r24, Y+7	; 0x07
    2428:	89 2b       	or	r24, r25
    242a:	8c 93       	st	X, r24
}
    242c:	27 96       	adiw	r28, 0x07	; 7
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	0f 91       	pop	r16
    243e:	ef 90       	pop	r14
    2440:	cf 90       	pop	r12
    2442:	08 95       	ret

00002444 <timer2Set>:

void timer2Set(uint8_t u8_value)
{
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	0f 92       	push	r0
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter2 custom value */
	TCNT2 = u8_value;
    2450:	e4 e4       	ldi	r30, 0x44	; 68
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	80 83       	st	Z, r24
}
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <timer2Read>:

uint8_t timer2Read(void)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT2;
    2468:	e4 e4       	ldi	r30, 0x44	; 68
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
}
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <timer2Start>:

void timer2Start(void)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR2 = (TCCR2 & 0xF8) | (gu8_timer2PreScaler);
    247c:	a5 e4       	ldi	r26, 0x45	; 69
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e5 e4       	ldi	r30, 0x45	; 69
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	98 2f       	mov	r25, r24
    2488:	98 7f       	andi	r25, 0xF8	; 248
    248a:	80 91 71 00 	lds	r24, 0x0071
    248e:	89 2b       	or	r24, r25
    2490:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT2 = 0;
    2492:	e4 e4       	ldi	r30, 0x44	; 68
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	10 82       	st	Z, r1
}
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <timer2Stop>:

void timer2Stop(void)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR2 &= ~((1 << CS20) | (1 << CS21) | (1 << CS22));
    24a6:	a5 e4       	ldi	r26, 0x45	; 69
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e5 e4       	ldi	r30, 0x45	; 69
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	88 7f       	andi	r24, 0xF8	; 248
    24b2:	8c 93       	st	X, r24
}
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <timer2DelayMs>:

void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    24ba:	cf 92       	push	r12
    24bc:	ef 92       	push	r14
    24be:	0f 93       	push	r16
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <timer2DelayMs+0xc>
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <timer2DelayMs+0xe>
    24c8:	0f 92       	push	r0
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	9d 83       	std	Y+5, r25	; 0x05
    24d0:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    24d2:	1b 82       	std	Y+3, r1	; 0x03
    24d4:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    24d6:	8a ef       	ldi	r24, 0xFA	; 250
    24d8:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	44 e0       	ldi	r20, 0x04	; 4
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	00 e0       	ldi	r16, 0x00	; 0
    24e4:	ee 24       	eor	r14, r14
    24e6:	cc 24       	eor	r12, r12
    24e8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <timer2Init>
	timer2Start();
    24ec:	0e 94 3a 12 	call	0x2474	; 0x2474 <timer2Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    24f0:	1b 82       	std	Y+3, r1	; 0x03
    24f2:	1a 82       	std	Y+2, r1	; 0x02
    24f4:	0e c0       	rjmp	.+28     	; 0x2512 <timer2DelayMs+0x58>
	{
		while(TCNT2 < u8_outputCompare);
    24f6:	e4 e4       	ldi	r30, 0x44	; 68
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	90 81       	ld	r25, Z
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	98 17       	cp	r25, r24
    2500:	d0 f3       	brcs	.-12     	; 0x24f6 <timer2DelayMs+0x3c>
		TCNT2 = 0;
    2502:	e4 e4       	ldi	r30, 0x44	; 68
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
	timer2Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	9b 81       	ldd	r25, Y+3	; 0x03
    250c:	01 96       	adiw	r24, 0x01	; 1
    250e:	9b 83       	std	Y+3, r25	; 0x03
    2510:	8a 83       	std	Y+2, r24	; 0x02
    2512:	2a 81       	ldd	r18, Y+2	; 0x02
    2514:	3b 81       	ldd	r19, Y+3	; 0x03
    2516:	8c 81       	ldd	r24, Y+4	; 0x04
    2518:	9d 81       	ldd	r25, Y+5	; 0x05
    251a:	28 17       	cp	r18, r24
    251c:	39 07       	cpc	r19, r25
    251e:	58 f3       	brcs	.-42     	; 0x24f6 <timer2DelayMs+0x3c>
	{
		while(TCNT2 < u8_outputCompare);
		TCNT2 = 0;
	}
}
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	0f 91       	pop	r16
    2530:	ef 90       	pop	r14
    2532:	cf 90       	pop	r12
    2534:	08 95       	ret

00002536 <timer2DelayUs>:

void timer2DelayUs(uint32_t u32_delay_in_us)
{
    2536:	cf 92       	push	r12
    2538:	ef 92       	push	r14
    253a:	0f 93       	push	r16
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	29 97       	sbiw	r28, 0x09	; 9
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	6e 83       	std	Y+6, r22	; 0x06
    2552:	7f 83       	std	Y+7, r23	; 0x07
    2554:	88 87       	std	Y+8, r24	; 0x08
    2556:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    2558:	1a 82       	std	Y+2, r1	; 0x02
    255a:	1b 82       	std	Y+3, r1	; 0x03
    255c:	1c 82       	std	Y+4, r1	; 0x04
    255e:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    2560:	80 e1       	ldi	r24, 0x10	; 16
    2562:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
    2564:	88 e0       	ldi	r24, 0x08	; 8
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	09 81       	ldd	r16, Y+1	; 0x01
    256e:	ee 24       	eor	r14, r14
    2570:	cc 24       	eor	r12, r12
    2572:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <timer2Init>
	timer2Start();
    2576:	0e 94 3a 12 	call	0x2474	; 0x2474 <timer2Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    257a:	1a 82       	std	Y+2, r1	; 0x02
    257c:	1b 82       	std	Y+3, r1	; 0x03
    257e:	1c 82       	std	Y+4, r1	; 0x04
    2580:	1d 82       	std	Y+5, r1	; 0x05
    2582:	1a c0       	rjmp	.+52     	; 0x25b8 <timer2DelayUs+0x82>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
    2584:	e8 e5       	ldi	r30, 0x58	; 88
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	88 23       	and	r24, r24
    258c:	dc f7       	brge	.-10     	; 0x2584 <timer2DelayUs+0x4e>
		SET_BIT(TIFR, OCF2);
    258e:	a8 e5       	ldi	r26, 0x58	; 88
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e8 e5       	ldi	r30, 0x58	; 88
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	80 68       	ori	r24, 0x80	; 128
    259a:	8c 93       	st	X, r24
		TCNT2 = 0;
    259c:	e4 e4       	ldi	r30, 0x44	; 68
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
	timer2Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	ac 81       	ldd	r26, Y+4	; 0x04
    25a8:	bd 81       	ldd	r27, Y+5	; 0x05
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	a1 1d       	adc	r26, r1
    25ae:	b1 1d       	adc	r27, r1
    25b0:	8a 83       	std	Y+2, r24	; 0x02
    25b2:	9b 83       	std	Y+3, r25	; 0x03
    25b4:	ac 83       	std	Y+4, r26	; 0x04
    25b6:	bd 83       	std	Y+5, r27	; 0x05
    25b8:	2a 81       	ldd	r18, Y+2	; 0x02
    25ba:	3b 81       	ldd	r19, Y+3	; 0x03
    25bc:	4c 81       	ldd	r20, Y+4	; 0x04
    25be:	5d 81       	ldd	r21, Y+5	; 0x05
    25c0:	8e 81       	ldd	r24, Y+6	; 0x06
    25c2:	9f 81       	ldd	r25, Y+7	; 0x07
    25c4:	a8 85       	ldd	r26, Y+8	; 0x08
    25c6:	b9 85       	ldd	r27, Y+9	; 0x09
    25c8:	28 17       	cp	r18, r24
    25ca:	39 07       	cpc	r19, r25
    25cc:	4a 07       	cpc	r20, r26
    25ce:	5b 07       	cpc	r21, r27
    25d0:	c8 f2       	brcs	.-78     	; 0x2584 <timer2DelayUs+0x4e>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
		SET_BIT(TIFR, OCF2);
		TCNT2 = 0;
	}
}
    25d2:	29 96       	adiw	r28, 0x09	; 9
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	0f 91       	pop	r16
    25e4:	ef 90       	pop	r14
    25e6:	cf 90       	pop	r12
    25e8:	08 95       	ret

000025ea <timer2SwPWM>:

void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    25ea:	cf 92       	push	r12
    25ec:	ef 92       	push	r14
    25ee:	0f 93       	push	r16
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <timer2SwPWM+0xc>
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <timer2SwPWM+0xe>
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	8b 83       	std	Y+3, r24	; 0x03
    25fe:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    2600:	78 94       	sei

	if(u8_frequency <= 80)
    2602:	8c 81       	ldd	r24, Y+4	; 0x04
    2604:	81 35       	cpi	r24, 0x51	; 81
    2606:	e8 f4       	brcc	.+58     	; 0x2642 <timer2SwPWM+0x58>
	{
		u8_prescaler = T0_PRESCALER_64;
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a0 e0       	ldi	r26, 0x00	; 0
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	39 e1       	ldi	r19, 0x19	; 25
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
    2626:	9b 01       	movw	r18, r22
    2628:	ac 01       	movw	r20, r24
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	94 e2       	ldi	r25, 0x24	; 36
    262e:	a4 ef       	ldi	r26, 0xF4	; 244
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	bc 01       	movw	r22, r24
    2634:	cd 01       	movw	r24, r26
    2636:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    263a:	da 01       	movw	r26, r20
    263c:	c9 01       	movw	r24, r18
    263e:	8a 83       	std	Y+2, r24	; 0x02
    2640:	1c c0       	rjmp	.+56     	; 0x267a <timer2SwPWM+0x90>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    2646:	8c 81       	ldd	r24, Y+4	; 0x04
    2648:	88 2f       	mov	r24, r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 e0       	ldi	r26, 0x00	; 0
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	20 e2       	ldi	r18, 0x20	; 32
    2652:	33 e0       	ldi	r19, 0x03	; 3
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
    2660:	9b 01       	movw	r18, r22
    2662:	ac 01       	movw	r20, r24
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	94 e2       	ldi	r25, 0x24	; 36
    2668:	a4 ef       	ldi	r26, 0xF4	; 244
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodsi4>
    2674:	da 01       	movw	r26, r20
    2676:	c9 01       	movw	r24, r18
    2678:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, u8_prescaler, 0, u8_outputCompare, 0, T2_INTERRUPT_CMP);
    267a:	88 e0       	ldi	r24, 0x08	; 8
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	49 81       	ldd	r20, Y+1	; 0x01
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	0a 81       	ldd	r16, Y+2	; 0x02
    2684:	ee 24       	eor	r14, r14
    2686:	0f 2e       	mov	r0, r31
    2688:	f0 e8       	ldi	r31, 0x80	; 128
    268a:	cf 2e       	mov	r12, r31
    268c:	f0 2d       	mov	r31, r0
    268e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <timer2Init>
	timer2Start();
    2692:	0e 94 3a 12 	call	0x2474	; 0x2474 <timer2Start>
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	0f 91       	pop	r16
    26a4:	ef 90       	pop	r14
    26a6:	cf 90       	pop	r12
    26a8:	08 95       	ret

000026aa <Timer2_OVF_setCallBack>:

void Timer2_OVF_setCallBack(void(*local_ptr)(void))
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <Timer2_OVF_setCallBack+0x6>
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	9a 83       	std	Y+2, r25	; 0x02
    26b6:	89 83       	std	Y+1, r24	; 0x01
	g_T2_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	90 93 81 00 	sts	0x0081, r25
    26c0:	80 93 80 00 	sts	0x0080, r24
}
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <Timer2_CTC_setCallBack>:

void Timer2_CTC_setCallBack(void(*local_ptr)(void))
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <Timer2_CTC_setCallBack+0x6>
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
	g_T2_CTC_callBackPtr = (volatile void(*)(void))local_ptr;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	90 93 7f 00 	sts	0x007F, r25
    26e4:	80 93 7e 00 	sts	0x007E, r24
}
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <__mulsi3>:
    26f2:	62 9f       	mul	r22, r18
    26f4:	d0 01       	movw	r26, r0
    26f6:	73 9f       	mul	r23, r19
    26f8:	f0 01       	movw	r30, r0
    26fa:	82 9f       	mul	r24, r18
    26fc:	e0 0d       	add	r30, r0
    26fe:	f1 1d       	adc	r31, r1
    2700:	64 9f       	mul	r22, r20
    2702:	e0 0d       	add	r30, r0
    2704:	f1 1d       	adc	r31, r1
    2706:	92 9f       	mul	r25, r18
    2708:	f0 0d       	add	r31, r0
    270a:	83 9f       	mul	r24, r19
    270c:	f0 0d       	add	r31, r0
    270e:	74 9f       	mul	r23, r20
    2710:	f0 0d       	add	r31, r0
    2712:	65 9f       	mul	r22, r21
    2714:	f0 0d       	add	r31, r0
    2716:	99 27       	eor	r25, r25
    2718:	72 9f       	mul	r23, r18
    271a:	b0 0d       	add	r27, r0
    271c:	e1 1d       	adc	r30, r1
    271e:	f9 1f       	adc	r31, r25
    2720:	63 9f       	mul	r22, r19
    2722:	b0 0d       	add	r27, r0
    2724:	e1 1d       	adc	r30, r1
    2726:	f9 1f       	adc	r31, r25
    2728:	bd 01       	movw	r22, r26
    272a:	cf 01       	movw	r24, r30
    272c:	11 24       	eor	r1, r1
    272e:	08 95       	ret

00002730 <__udivmodqi4>:
    2730:	99 1b       	sub	r25, r25
    2732:	79 e0       	ldi	r23, 0x09	; 9
    2734:	04 c0       	rjmp	.+8      	; 0x273e <__udivmodqi4_ep>

00002736 <__udivmodqi4_loop>:
    2736:	99 1f       	adc	r25, r25
    2738:	96 17       	cp	r25, r22
    273a:	08 f0       	brcs	.+2      	; 0x273e <__udivmodqi4_ep>
    273c:	96 1b       	sub	r25, r22

0000273e <__udivmodqi4_ep>:
    273e:	88 1f       	adc	r24, r24
    2740:	7a 95       	dec	r23
    2742:	c9 f7       	brne	.-14     	; 0x2736 <__udivmodqi4_loop>
    2744:	80 95       	com	r24
    2746:	08 95       	ret

00002748 <__udivmodhi4>:
    2748:	aa 1b       	sub	r26, r26
    274a:	bb 1b       	sub	r27, r27
    274c:	51 e1       	ldi	r21, 0x11	; 17
    274e:	07 c0       	rjmp	.+14     	; 0x275e <__udivmodhi4_ep>

00002750 <__udivmodhi4_loop>:
    2750:	aa 1f       	adc	r26, r26
    2752:	bb 1f       	adc	r27, r27
    2754:	a6 17       	cp	r26, r22
    2756:	b7 07       	cpc	r27, r23
    2758:	10 f0       	brcs	.+4      	; 0x275e <__udivmodhi4_ep>
    275a:	a6 1b       	sub	r26, r22
    275c:	b7 0b       	sbc	r27, r23

0000275e <__udivmodhi4_ep>:
    275e:	88 1f       	adc	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	5a 95       	dec	r21
    2764:	a9 f7       	brne	.-22     	; 0x2750 <__udivmodhi4_loop>
    2766:	80 95       	com	r24
    2768:	90 95       	com	r25
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	08 95       	ret

00002770 <__udivmodsi4>:
    2770:	a1 e2       	ldi	r26, 0x21	; 33
    2772:	1a 2e       	mov	r1, r26
    2774:	aa 1b       	sub	r26, r26
    2776:	bb 1b       	sub	r27, r27
    2778:	fd 01       	movw	r30, r26
    277a:	0d c0       	rjmp	.+26     	; 0x2796 <__udivmodsi4_ep>

0000277c <__udivmodsi4_loop>:
    277c:	aa 1f       	adc	r26, r26
    277e:	bb 1f       	adc	r27, r27
    2780:	ee 1f       	adc	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	a2 17       	cp	r26, r18
    2786:	b3 07       	cpc	r27, r19
    2788:	e4 07       	cpc	r30, r20
    278a:	f5 07       	cpc	r31, r21
    278c:	20 f0       	brcs	.+8      	; 0x2796 <__udivmodsi4_ep>
    278e:	a2 1b       	sub	r26, r18
    2790:	b3 0b       	sbc	r27, r19
    2792:	e4 0b       	sbc	r30, r20
    2794:	f5 0b       	sbc	r31, r21

00002796 <__udivmodsi4_ep>:
    2796:	66 1f       	adc	r22, r22
    2798:	77 1f       	adc	r23, r23
    279a:	88 1f       	adc	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	1a 94       	dec	r1
    27a0:	69 f7       	brne	.-38     	; 0x277c <__udivmodsi4_loop>
    27a2:	60 95       	com	r22
    27a4:	70 95       	com	r23
    27a6:	80 95       	com	r24
    27a8:	90 95       	com	r25
    27aa:	9b 01       	movw	r18, r22
    27ac:	ac 01       	movw	r20, r24
    27ae:	bd 01       	movw	r22, r26
    27b0:	cf 01       	movw	r24, r30
    27b2:	08 95       	ret

000027b4 <_exit>:
    27b4:	f8 94       	cli

000027b6 <__stop_program>:
    27b6:	ff cf       	rjmp	.-2      	; 0x27b6 <__stop_program>
