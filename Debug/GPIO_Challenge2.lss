
GPIO_Challenge2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002796  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00002796  0000282a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800064  00800064  0000282e  2**0
                  ALLOC
  3 .stab         00003fd8  00000000  00000000  00002830  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002ac6  00000000  00000000  00006808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_3>
      10:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_4>
      14:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__vector_5>
      18:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_6>
      1c:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__vector_7>
      20:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__vector_8>
      24:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__vector_9>
      28:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <__vector_10>
      2c:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__vector_11>
      30:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_12>
      34:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_13>
      38:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_14>
      3c:	0c 94 b2 04 	jmp	0x964	; 0x964 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void app_rx(void);

uint8_t flag = 0;

int main(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	29 97       	sbiw	r28, 0x09	; 9
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t data;

//	sei();

	SPI_ConfigType configType = {SPI_MASTER, SPI_INTERRUPT_DISABLED, SPI_F_OSC_16};
      a6:	ce 01       	movw	r24, r28
      a8:	02 96       	adiw	r24, 0x02	; 2
      aa:	9e 83       	std	Y+6, r25	; 0x06
      ac:	8d 83       	std	Y+5, r24	; 0x05
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	f8 87       	std	Y+8, r31	; 0x08
      b4:	ef 83       	std	Y+7, r30	; 0x07
      b6:	f3 e0       	ldi	r31, 0x03	; 3
      b8:	f9 87       	std	Y+9, r31	; 0x09
      ba:	ef 81       	ldd	r30, Y+7	; 0x07
      bc:	f8 85       	ldd	r31, Y+8	; 0x08
      be:	00 80       	ld	r0, Z
      c0:	8f 81       	ldd	r24, Y+7	; 0x07
      c2:	98 85       	ldd	r25, Y+8	; 0x08
      c4:	01 96       	adiw	r24, 0x01	; 1
      c6:	98 87       	std	Y+8, r25	; 0x08
      c8:	8f 83       	std	Y+7, r24	; 0x07
      ca:	ed 81       	ldd	r30, Y+5	; 0x05
      cc:	fe 81       	ldd	r31, Y+6	; 0x06
      ce:	00 82       	st	Z, r0
      d0:	8d 81       	ldd	r24, Y+5	; 0x05
      d2:	9e 81       	ldd	r25, Y+6	; 0x06
      d4:	01 96       	adiw	r24, 0x01	; 1
      d6:	9e 83       	std	Y+6, r25	; 0x06
      d8:	8d 83       	std	Y+5, r24	; 0x05
      da:	99 85       	ldd	r25, Y+9	; 0x09
      dc:	91 50       	subi	r25, 0x01	; 1
      de:	99 87       	std	Y+9, r25	; 0x09
      e0:	e9 85       	ldd	r30, Y+9	; 0x09
      e2:	ee 23       	and	r30, r30
      e4:	51 f7       	brne	.-44     	; 0xba <main+0x28>

	SPI_init(&configType);
      e6:	ce 01       	movw	r24, r28
      e8:	02 96       	adiw	r24, 0x02	; 2
      ea:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_init>

	while(1)
	{
		if(flag)
      ee:	80 91 64 00 	lds	r24, 0x0064
      f2:	88 23       	and	r24, r24
      f4:	e1 f3       	breq	.-8      	; 0xee <main+0x5c>
		{
			data = UART_receive();
      f6:	0e 94 ff 05 	call	0xbfe	; 0xbfe <UART_receive>
      fa:	89 83       	std	Y+1, r24	; 0x01
			flag = 0;
      fc:	10 92 64 00 	sts	0x0064, r1
			UART_transmit(data);
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	0e 94 df 05 	call	0xbbe	; 0xbbe <UART_transmit>
     106:	f3 cf       	rjmp	.-26     	; 0xee <main+0x5c>

00000108 <app_tx>:
}

/*- APIs IMPLEMENTATION ------------------------------------*/

void app_tx(void)
{
     108:	df 93       	push	r29
     10a:	cf 93       	push	r28
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62

}
     110:	cf 91       	pop	r28
     112:	df 91       	pop	r29
     114:	08 95       	ret

00000116 <app_rx>:

void app_rx(void)
{
     116:	df 93       	push	r29
     118:	cf 93       	push	r28
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
	flag = 1;
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	80 93 64 00 	sts	0x0064, r24
}
     124:	cf 91       	pop	r28
     126:	df 91       	pop	r29
     128:	08 95       	ret

0000012a <app_spi>:

void app_spi(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62

}
     132:	cf 91       	pop	r28
     134:	df 91       	pop	r29
     136:	08 95       	ret

00000138 <GPIO_REQ7>:


void GPIO_REQ7(void)
{
     138:	df 93       	push	r29
     13a:	cf 93       	push	r28
     13c:	00 d0       	rcall	.+0      	; 0x13e <GPIO_REQ7+0x6>
     13e:	00 d0       	rcall	.+0      	; 0x140 <GPIO_REQ7+0x8>
     140:	0f 92       	push	r0
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_countUpCounter = 0;
     146:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_delayCounter = 0;
     148:	19 82       	std	Y+1, r1	; 0x01
     14a:	1a 82       	std	Y+2, r1	; 0x02
     14c:	1b 82       	std	Y+3, r1	; 0x03
     14e:	1c 82       	std	Y+4, r1	; 0x04

	sevenSegInit(SEG_0);
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	0e 94 38 0b 	call	0x1670	; 0x1670 <sevenSegInit>
	sevenSegInit(SEG_1);
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	0e 94 38 0b 	call	0x1670	; 0x1670 <sevenSegInit>
     15c:	52 c0       	rjmp	.+164    	; 0x202 <GPIO_REQ7+0xca>

	while(1)
	{
		while(u8_countUpCounter <= 99)
		{
			sevenSegEnable(SEG_0);
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	0e 94 83 0b 	call	0x1706	; 0x1706 <sevenSegEnable>
			sevenSegWrite(SEG_0, ((u8_countUpCounter / 10) % 10));
     164:	8d 81       	ldd	r24, Y+5	; 0x05
     166:	9a e0       	ldi	r25, 0x0A	; 10
     168:	69 2f       	mov	r22, r25
     16a:	0e 94 87 13 	call	0x270e	; 0x270e <__udivmodqi4>
     16e:	9a e0       	ldi	r25, 0x0A	; 10
     170:	69 2f       	mov	r22, r25
     172:	0e 94 87 13 	call	0x270e	; 0x270e <__udivmodqi4>
     176:	89 2f       	mov	r24, r25
     178:	98 2f       	mov	r25, r24
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	69 2f       	mov	r22, r25
     17e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <sevenSegWrite>
			softwareDelayMs(1);
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 10 0c 	call	0x1820	; 0x1820 <softwareDelayMs>
			sevenSegDisable(SEG_0);
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	0e 94 b0 0b 	call	0x1760	; 0x1760 <sevenSegDisable>

			sevenSegEnable(SEG_1);
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	0e 94 83 0b 	call	0x1706	; 0x1706 <sevenSegEnable>
			sevenSegWrite(SEG_1, (u8_countUpCounter % 10));
     19a:	8d 81       	ldd	r24, Y+5	; 0x05
     19c:	9a e0       	ldi	r25, 0x0A	; 10
     19e:	69 2f       	mov	r22, r25
     1a0:	0e 94 87 13 	call	0x270e	; 0x270e <__udivmodqi4>
     1a4:	89 2f       	mov	r24, r25
     1a6:	98 2f       	mov	r25, r24
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	69 2f       	mov	r22, r25
     1ac:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <sevenSegWrite>
			softwareDelayMs(1);
     1b0:	61 e0       	ldi	r22, 0x01	; 1
     1b2:	70 e0       	ldi	r23, 0x00	; 0
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 10 0c 	call	0x1820	; 0x1820 <softwareDelayMs>
			sevenSegDisable(SEG_1);
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	0e 94 b0 0b 	call	0x1760	; 0x1760 <sevenSegDisable>

			u32_delayCounter++;
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	ab 81       	ldd	r26, Y+3	; 0x03
     1c8:	bc 81       	ldd	r27, Y+4	; 0x04
     1ca:	01 96       	adiw	r24, 0x01	; 1
     1cc:	a1 1d       	adc	r26, r1
     1ce:	b1 1d       	adc	r27, r1
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	9a 83       	std	Y+2, r25	; 0x02
     1d4:	ab 83       	std	Y+3, r26	; 0x03
     1d6:	bc 83       	std	Y+4, r27	; 0x04

			if(u32_delayCounter % 469 == 0)
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	ab 81       	ldd	r26, Y+3	; 0x03
     1de:	bc 81       	ldd	r27, Y+4	; 0x04
     1e0:	25 ed       	ldi	r18, 0xD5	; 213
     1e2:	31 e0       	ldi	r19, 0x01	; 1
     1e4:	40 e0       	ldi	r20, 0x00	; 0
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	bc 01       	movw	r22, r24
     1ea:	cd 01       	movw	r24, r26
     1ec:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodsi4>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	00 97       	sbiw	r24, 0x00	; 0
     1f6:	a1 05       	cpc	r26, r1
     1f8:	b1 05       	cpc	r27, r1
     1fa:	19 f4       	brne	.+6      	; 0x202 <GPIO_REQ7+0xca>
				u8_countUpCounter++;
     1fc:	8d 81       	ldd	r24, Y+5	; 0x05
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	8d 83       	std	Y+5, r24	; 0x05
	sevenSegInit(SEG_0);
	sevenSegInit(SEG_1);

	while(1)
	{
		while(u8_countUpCounter <= 99)
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	84 36       	cpi	r24, 0x64	; 100
     206:	08 f4       	brcc	.+2      	; 0x20a <GPIO_REQ7+0xd2>
     208:	aa cf       	rjmp	.-172    	; 0x15e <GPIO_REQ7+0x26>
     20a:	fb cf       	rjmp	.-10     	; 0x202 <GPIO_REQ7+0xca>

0000020c <GPIO_REQ8>:
	}
}


void GPIO_REQ8(void)
{
     20c:	df 93       	push	r29
     20e:	cf 93       	push	r28
     210:	00 d0       	rcall	.+0      	; 0x212 <GPIO_REQ8+0x6>
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_appCounter = 0, u8_delayDivider = 20;
     216:	1a 82       	std	Y+2, r1	; 0x02
     218:	84 e1       	ldi	r24, 0x14	; 20
     21a:	89 83       	std	Y+1, r24	; 0x01

	Led_Init(LED_1);
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	0e 94 9a 09 	call	0x1334	; 0x1334 <Led_Init>
	pushButtonInit(BTN_1);
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 a2 0a 	call	0x1544	; 0x1544 <pushButtonInit>

	while(1)
	{
		u8_delayDivider = 20;
     228:	84 e1       	ldi	r24, 0x14	; 20
     22a:	89 83       	std	Y+1, r24	; 0x01
		if(pushButtonGetStatus(BTN_1) == Pressed)
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <pushButtonGetStatus>
     232:	82 30       	cpi	r24, 0x02	; 2
     234:	c9 f7       	brne	.-14     	; 0x228 <GPIO_REQ8+0x1c>
		{
			while(pushButtonGetStatus(BTN_1) != Released);
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <pushButtonGetStatus>
     23c:	88 23       	and	r24, r24
     23e:	d9 f7       	brne	.-10     	; 0x236 <GPIO_REQ8+0x2a>
			u8_appCounter++;
     240:	8a 81       	ldd	r24, Y+2	; 0x02
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	8a 83       	std	Y+2, r24	; 0x02
     246:	24 c0       	rjmp	.+72     	; 0x290 <GPIO_REQ8+0x84>
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Led_On>
     24e:	17 c0       	rjmp	.+46     	; 0x27e <GPIO_REQ8+0x72>
				while(u8_delayDivider > 0)
				{
					softwareDelayMs(49);
     250:	61 e3       	ldi	r22, 0x31	; 49
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 10 0c 	call	0x1820	; 0x1820 <softwareDelayMs>
					if(pushButtonGetStatus(BTN_1) == Pressed)
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <pushButtonGetStatus>
     262:	82 30       	cpi	r24, 0x02	; 2
     264:	49 f4       	brne	.+18     	; 0x278 <GPIO_REQ8+0x6c>
					{
						softwareDelayMs(300);
     266:	6c e2       	ldi	r22, 0x2C	; 44
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 10 0c 	call	0x1820	; 0x1820 <softwareDelayMs>
						u8_delayDivider += 14;
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	82 5f       	subi	r24, 0xF2	; 242
     276:	89 83       	std	Y+1, r24	; 0x01
					}
					u8_delayDivider--;
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	81 50       	subi	r24, 0x01	; 1
     27c:	89 83       	std	Y+1, r24	; 0x01
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
				while(u8_delayDivider > 0)
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	88 23       	and	r24, r24
     282:	31 f7       	brne	.-52     	; 0x250 <GPIO_REQ8+0x44>
						softwareDelayMs(300);
						u8_delayDivider += 14;
					}
					u8_delayDivider--;
				}
				Led_Off(LED_1);
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 20 0a 	call	0x1440	; 0x1440 <Led_Off>
				u8_appCounter--;
     28a:	8a 81       	ldd	r24, Y+2	; 0x02
     28c:	81 50       	subi	r24, 0x01	; 1
     28e:	8a 83       	std	Y+2, r24	; 0x02
		u8_delayDivider = 20;
		if(pushButtonGetStatus(BTN_1) == Pressed)
		{
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
     290:	8a 81       	ldd	r24, Y+2	; 0x02
     292:	88 23       	and	r24, r24
     294:	c9 f6       	brne	.-78     	; 0x248 <GPIO_REQ8+0x3c>
				Led_Off(LED_1);
				u8_appCounter--;
			}
			break;
		}
	}
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	cf 91       	pop	r28
     29c:	df 91       	pop	r29
     29e:	08 95       	ret

000002a0 <GPIO_REQ9>:
}



void GPIO_REQ9(void)
{
     2a0:	df 93       	push	r29
     2a2:	cf 93       	push	r28
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <GPIO_REQ9+0x6>
     2a6:	0f 92       	push	r0
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentState = GO;
     2ac:	19 82       	std	Y+1, r1	; 0x01

	Led_Init(LED_1);
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 9a 09 	call	0x1334	; 0x1334 <Led_Init>
	Led_Init(LED_2);
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	0e 94 9a 09 	call	0x1334	; 0x1334 <Led_Init>
	Led_Init(LED_3);
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	0e 94 9a 09 	call	0x1334	; 0x1334 <Led_Init>

	while(1)
	{
		switch(u8_currentState)
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	28 2f       	mov	r18, r24
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	3b 83       	std	Y+3, r19	; 0x03
     2c8:	2a 83       	std	Y+2, r18	; 0x02
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	9b 81       	ldd	r25, Y+3	; 0x03
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	91 05       	cpc	r25, r1
     2d2:	a9 f0       	breq	.+42     	; 0x2fe <GPIO_REQ9+0x5e>
     2d4:	2a 81       	ldd	r18, Y+2	; 0x02
     2d6:	3b 81       	ldd	r19, Y+3	; 0x03
     2d8:	22 30       	cpi	r18, 0x02	; 2
     2da:	31 05       	cpc	r19, r1
     2dc:	e1 f0       	breq	.+56     	; 0x316 <GPIO_REQ9+0x76>
     2de:	8a 81       	ldd	r24, Y+2	; 0x02
     2e0:	9b 81       	ldd	r25, Y+3	; 0x03
     2e2:	00 97       	sbiw	r24, 0x00	; 0
     2e4:	11 f5       	brne	.+68     	; 0x32a <GPIO_REQ9+0x8a>
		{
		case GO:
			Led_On(LED_1);
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Led_On>
			Led_Off(LED_2);
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 20 0a 	call	0x1440	; 0x1440 <Led_Off>
			Led_Off(LED_3);
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	0e 94 20 0a 	call	0x1440	; 0x1440 <Led_Off>
			u8_currentState = STOP1;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	89 83       	std	Y+1, r24	; 0x01
     2fc:	16 c0       	rjmp	.+44     	; 0x32a <GPIO_REQ9+0x8a>
			break;
		case STOP1:
			Led_Off(LED_1);
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 20 0a 	call	0x1440	; 0x1440 <Led_Off>
			Led_On(LED_2);
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Led_On>
			Led_Off(LED_3);
     30a:	83 e0       	ldi	r24, 0x03	; 3
     30c:	0e 94 20 0a 	call	0x1440	; 0x1440 <Led_Off>
			u8_currentState = GET_READY;
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	89 83       	std	Y+1, r24	; 0x01
     314:	0a c0       	rjmp	.+20     	; 0x32a <GPIO_REQ9+0x8a>
			break;
		case GET_READY:
			Led_Off(LED_1);
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 20 0a 	call	0x1440	; 0x1440 <Led_Off>
			Led_Off(LED_2);
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 20 0a 	call	0x1440	; 0x1440 <Led_Off>
			Led_On(LED_3);
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Led_On>
			u8_currentState = GO;
     328:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		softwareDelayMs(1000);
     32a:	68 ee       	ldi	r22, 0xE8	; 232
     32c:	73 e0       	ldi	r23, 0x03	; 3
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 10 0c 	call	0x1820	; 0x1820 <softwareDelayMs>
     336:	c4 cf       	rjmp	.-120    	; 0x2c0 <GPIO_REQ9+0x20>

00000338 <HwPWMInit>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void HwPWMInit(void)
{
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	/* set OC1A and OC1B pins as output pins */
	gpioPinDirection(GPIOD, (BIT4 | BIT5), OUTPUT);
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	60 e3       	ldi	r22, 0x30	; 48
     344:	4f ef       	ldi	r20, 0xFF	; 255
     346:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>

	/* PWM mode */
	CLEAR_BIT(TCCR1A, FOC1B);
     34a:	af e4       	ldi	r26, 0x4F	; 79
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	ef e4       	ldi	r30, 0x4F	; 79
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	8b 7f       	andi	r24, 0xFB	; 251
     356:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, FOC1A);
     358:	af e4       	ldi	r26, 0x4F	; 79
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	ef e4       	ldi	r30, 0x4F	; 79
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	87 7f       	andi	r24, 0xF7	; 247
     364:	8c 93       	st	X, r24

	/* fast PWM mode using OCR1A */
	CLEAR_BIT(TCCR1A, WGM10);
     366:	af e4       	ldi	r26, 0x4F	; 79
     368:	b0 e0       	ldi	r27, 0x00	; 0
     36a:	ef e4       	ldi	r30, 0x4F	; 79
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	8e 7f       	andi	r24, 0xFE	; 254
     372:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
     374:	af e4       	ldi	r26, 0x4F	; 79
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	ef e4       	ldi	r30, 0x4F	; 79
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	82 60       	ori	r24, 0x02	; 2
     380:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
     382:	ae e4       	ldi	r26, 0x4E	; 78
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	ee e4       	ldi	r30, 0x4E	; 78
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	88 60       	ori	r24, 0x08	; 8
     38e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
     390:	ae e4       	ldi	r26, 0x4E	; 78
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	ee e4       	ldi	r30, 0x4E	; 78
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	80 61       	ori	r24, 0x10	; 16
     39c:	8c 93       	st	X, r24

	/* use OCR1A and OCR1B */
	CLEAR_BIT(TCCR1A, COM1A0);
     39e:	af e4       	ldi	r26, 0x4F	; 79
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
     3a2:	ef e4       	ldi	r30, 0x4F	; 79
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	8f 7b       	andi	r24, 0xBF	; 191
     3aa:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
     3ac:	af e4       	ldi	r26, 0x4F	; 79
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	ef e4       	ldi	r30, 0x4F	; 79
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	80 68       	ori	r24, 0x80	; 128
     3b8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B0);
     3ba:	af e4       	ldi	r26, 0x4F	; 79
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	ef e4       	ldi	r30, 0x4F	; 79
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	80 81       	ld	r24, Z
     3c4:	8f 7e       	andi	r24, 0xEF	; 239
     3c6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1);
     3c8:	af e4       	ldi	r26, 0x4F	; 79
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	ef e4       	ldi	r30, 0x4F	; 79
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	80 62       	ori	r24, 0x20	; 32
     3d4:	8c 93       	st	X, r24

	/* clear input capture bits */
	CLEAR_BIT(TCCR1B, ICES1);
     3d6:	ae e4       	ldi	r26, 0x4E	; 78
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	ee e4       	ldi	r30, 0x4E	; 78
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	8f 7b       	andi	r24, 0xBF	; 191
     3e2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, ICNC1);
     3e4:	ae e4       	ldi	r26, 0x4E	; 78
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	ee e4       	ldi	r30, 0x4E	; 78
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	8f 77       	andi	r24, 0x7F	; 127
     3f0:	8c 93       	st	X, r24

	/* start counting from 0 */
	TCNT1 = 0;
     3f2:	ec e4       	ldi	r30, 0x4C	; 76
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	11 82       	std	Z+1, r1	; 0x01
     3f8:	10 82       	st	Z, r1
}
     3fa:	cf 91       	pop	r28
     3fc:	df 91       	pop	r29
     3fe:	08 95       	ret

00000400 <HwPWMSetDuty>:

void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency)
{
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	df 93       	push	r29
     40a:	cf 93       	push	r28
     40c:	00 d0       	rcall	.+0      	; 0x40e <HwPWMSetDuty+0xe>
     40e:	00 d0       	rcall	.+0      	; 0x410 <HwPWMSetDuty+0x10>
     410:	0f 92       	push	r0
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	89 83       	std	Y+1, r24	; 0x01
     418:	4a 83       	std	Y+2, r20	; 0x02
     41a:	5b 83       	std	Y+3, r21	; 0x03
     41c:	6c 83       	std	Y+4, r22	; 0x04
     41e:	7d 83       	std	Y+5, r23	; 0x05
	/* if condition to decide the prescaler and the ICR1 register content according to it */
	if(a_u32_frequency >= 245)
     420:	8a 81       	ldd	r24, Y+2	; 0x02
     422:	9b 81       	ldd	r25, Y+3	; 0x03
     424:	ac 81       	ldd	r26, Y+4	; 0x04
     426:	bd 81       	ldd	r27, Y+5	; 0x05
     428:	85 3f       	cpi	r24, 0xF5	; 245
     42a:	91 05       	cpc	r25, r1
     42c:	a1 05       	cpc	r26, r1
     42e:	b1 05       	cpc	r27, r1
     430:	d8 f0       	brcs	.+54     	; 0x468 <HwPWMSetDuty+0x68>
	{
		ICR1 = F_CPU / (1UL * a_u32_frequency);
     432:	06 e4       	ldi	r16, 0x46	; 70
     434:	10 e0       	ldi	r17, 0x00	; 0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	94 e2       	ldi	r25, 0x24	; 36
     43a:	a4 ef       	ldi	r26, 0xF4	; 244
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	2a 81       	ldd	r18, Y+2	; 0x02
     440:	3b 81       	ldd	r19, Y+3	; 0x03
     442:	4c 81       	ldd	r20, Y+4	; 0x04
     444:	5d 81       	ldd	r21, Y+5	; 0x05
     446:	bc 01       	movw	r22, r24
     448:	cd 01       	movw	r24, r26
     44a:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodsi4>
     44e:	da 01       	movw	r26, r20
     450:	c9 01       	movw	r24, r18
     452:	f8 01       	movw	r30, r16
     454:	91 83       	std	Z+1, r25	; 0x01
     456:	80 83       	st	Z, r24

		/* set clock for the timer */
		TCCR1B |= T1_PRESCALER_NO;
     458:	ae e4       	ldi	r26, 0x4E	; 78
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	ee e4       	ldi	r30, 0x4E	; 78
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	81 60       	ori	r24, 0x01	; 1
     464:	8c 93       	st	X, r24
     466:	31 c0       	rjmp	.+98     	; 0x4ca <HwPWMSetDuty+0xca>
	}else if(a_u32_frequency >= 31)
     468:	8a 81       	ldd	r24, Y+2	; 0x02
     46a:	9b 81       	ldd	r25, Y+3	; 0x03
     46c:	ac 81       	ldd	r26, Y+4	; 0x04
     46e:	bd 81       	ldd	r27, Y+5	; 0x05
     470:	8f 31       	cpi	r24, 0x1F	; 31
     472:	91 05       	cpc	r25, r1
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	40 f1       	brcs	.+80     	; 0x4ca <HwPWMSetDuty+0xca>
	{
		ICR1 = F_CPU / (8UL * a_u32_frequency);
     47a:	06 e4       	ldi	r16, 0x46	; 70
     47c:	10 e0       	ldi	r17, 0x00	; 0
     47e:	8a 81       	ldd	r24, Y+2	; 0x02
     480:	9b 81       	ldd	r25, Y+3	; 0x03
     482:	ac 81       	ldd	r26, Y+4	; 0x04
     484:	bd 81       	ldd	r27, Y+5	; 0x05
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	aa 1f       	adc	r26, r26
     48c:	bb 1f       	adc	r27, r27
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	aa 1f       	adc	r26, r26
     494:	bb 1f       	adc	r27, r27
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	aa 1f       	adc	r26, r26
     49c:	bb 1f       	adc	r27, r27
     49e:	9c 01       	movw	r18, r24
     4a0:	ad 01       	movw	r20, r26
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	94 e2       	ldi	r25, 0x24	; 36
     4a6:	a4 ef       	ldi	r26, 0xF4	; 244
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	bc 01       	movw	r22, r24
     4ac:	cd 01       	movw	r24, r26
     4ae:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodsi4>
     4b2:	da 01       	movw	r26, r20
     4b4:	c9 01       	movw	r24, r18
     4b6:	f8 01       	movw	r30, r16
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	80 83       	st	Z, r24

		/* set clock for the timer */
		TCCR1B |= T1_PRESCALER_8;
     4bc:	ae e4       	ldi	r26, 0x4E	; 78
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	ee e4       	ldi	r30, 0x4E	; 78
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	82 60       	ori	r24, 0x02	; 2
     4c8:	8c 93       	st	X, r24
	}
	
	/* set the value of OCR1A:B which decides the duty cycle of the motor */
	OCR1A = a_u8_duty * (ICR1 / 100);
     4ca:	0f 2e       	mov	r0, r31
     4cc:	fa e4       	ldi	r31, 0x4A	; 74
     4ce:	ef 2e       	mov	r14, r31
     4d0:	ff 24       	eor	r15, r15
     4d2:	f0 2d       	mov	r31, r0
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	08 2f       	mov	r16, r24
     4d8:	10 e0       	ldi	r17, 0x00	; 0
     4da:	e6 e4       	ldi	r30, 0x46	; 70
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	24 e6       	ldi	r18, 0x64	; 100
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	b9 01       	movw	r22, r18
     4e8:	0e 94 93 13 	call	0x2726	; 0x2726 <__udivmodhi4>
     4ec:	cb 01       	movw	r24, r22
     4ee:	9c 01       	movw	r18, r24
     4f0:	02 9f       	mul	r16, r18
     4f2:	c0 01       	movw	r24, r0
     4f4:	03 9f       	mul	r16, r19
     4f6:	90 0d       	add	r25, r0
     4f8:	12 9f       	mul	r17, r18
     4fa:	90 0d       	add	r25, r0
     4fc:	11 24       	eor	r1, r1
     4fe:	f7 01       	movw	r30, r14
     500:	91 83       	std	Z+1, r25	; 0x01
     502:	80 83       	st	Z, r24
	OCR1B = a_u8_duty * (ICR1 / 100);
     504:	0f 2e       	mov	r0, r31
     506:	f8 e4       	ldi	r31, 0x48	; 72
     508:	ef 2e       	mov	r14, r31
     50a:	ff 24       	eor	r15, r15
     50c:	f0 2d       	mov	r31, r0
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	08 2f       	mov	r16, r24
     512:	10 e0       	ldi	r17, 0x00	; 0
     514:	e6 e4       	ldi	r30, 0x46	; 70
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	91 81       	ldd	r25, Z+1	; 0x01
     51c:	24 e6       	ldi	r18, 0x64	; 100
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	b9 01       	movw	r22, r18
     522:	0e 94 93 13 	call	0x2726	; 0x2726 <__udivmodhi4>
     526:	cb 01       	movw	r24, r22
     528:	9c 01       	movw	r18, r24
     52a:	02 9f       	mul	r16, r18
     52c:	c0 01       	movw	r24, r0
     52e:	03 9f       	mul	r16, r19
     530:	90 0d       	add	r25, r0
     532:	12 9f       	mul	r17, r18
     534:	90 0d       	add	r25, r0
     536:	11 24       	eor	r1, r1
     538:	f7 01       	movw	r30, r14
     53a:	91 83       	std	Z+1, r25	; 0x01
     53c:	80 83       	st	Z, r24
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	08 95       	ret

00000556 <__vector_12>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(SPI_STC_vect)
{
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	4f 93       	push	r20
     566:	5f 93       	push	r21
     568:	6f 93       	push	r22
     56a:	7f 93       	push	r23
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
     574:	ef 93       	push	r30
     576:	ff 93       	push	r31
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
	if(g_SPI_callBackPtr != NULL)
     580:	80 91 65 00 	lds	r24, 0x0065
     584:	90 91 66 00 	lds	r25, 0x0066
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	29 f0       	breq	.+10     	; 0x596 <__vector_12+0x40>
	{
		g_SPI_callBackPtr();
     58c:	e0 91 65 00 	lds	r30, 0x0065
     590:	f0 91 66 00 	lds	r31, 0x0066
     594:	09 95       	icall
	}
}
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	ff 91       	pop	r31
     59c:	ef 91       	pop	r30
     59e:	bf 91       	pop	r27
     5a0:	af 91       	pop	r26
     5a2:	9f 91       	pop	r25
     5a4:	8f 91       	pop	r24
     5a6:	7f 91       	pop	r23
     5a8:	6f 91       	pop	r22
     5aa:	5f 91       	pop	r21
     5ac:	4f 91       	pop	r20
     5ae:	3f 91       	pop	r19
     5b0:	2f 91       	pop	r18
     5b2:	0f 90       	pop	r0
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	0f 90       	pop	r0
     5b8:	1f 90       	pop	r1
     5ba:	18 95       	reti

000005bc <SPI_setCallBack>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void SPI_setCallBack(void(*local_ptr)(void))
{
     5bc:	df 93       	push	r29
     5be:	cf 93       	push	r28
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <SPI_setCallBack+0x6>
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	9a 83       	std	Y+2, r25	; 0x02
     5c8:	89 83       	std	Y+1, r24	; 0x01
	g_SPI_callBackPtr = (volatile void(*)(void))local_ptr;
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	9a 81       	ldd	r25, Y+2	; 0x02
     5ce:	90 93 66 00 	sts	0x0066, r25
     5d2:	80 93 65 00 	sts	0x0065, r24
}
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	cf 91       	pop	r28
     5dc:	df 91       	pop	r29
     5de:	08 95       	ret

000005e0 <SPI_init>:


void SPI_init(const SPI_ConfigType* ConfigPtr)
{
     5e0:	df 93       	push	r29
     5e2:	cf 93       	push	r28
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <SPI_init+0x6>
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	9a 83       	std	Y+2, r25	; 0x02
     5ec:	89 83       	std	Y+1, r24	; 0x01
	/* Configuration of SPI Master/Slave Pins */
	if(ConfigPtr->masterSlaveSelect == SPI_SLAVE)
     5ee:	e9 81       	ldd	r30, Y+1	; 0x01
     5f0:	fa 81       	ldd	r31, Y+2	; 0x02
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	59 f4       	brne	.+22     	; 0x60e <SPI_init+0x2e>
	{
		gpioPinDirection(SPI_GPIO, SS | MOSI | SCK, INPUT);
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	60 eb       	ldi	r22, 0xB0	; 176
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
		gpioPinDirection(SPI_GPIO, MISO, OUTPUT);
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	60 e4       	ldi	r22, 0x40	; 64
     606:	4f ef       	ldi	r20, 0xFF	; 255
     608:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
     60c:	0f c0       	rjmp	.+30     	; 0x62c <SPI_init+0x4c>
	}else if(ConfigPtr->masterSlaveSelect == SPI_MASTER)
     60e:	e9 81       	ldd	r30, Y+1	; 0x01
     610:	fa 81       	ldd	r31, Y+2	; 0x02
     612:	80 81       	ld	r24, Z
     614:	80 31       	cpi	r24, 0x10	; 16
     616:	51 f4       	brne	.+20     	; 0x62c <SPI_init+0x4c>
	{
		gpioPinDirection(SPI_GPIO, SS | MOSI | SCK, OUTPUT);
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	60 eb       	ldi	r22, 0xB0	; 176
     61c:	4f ef       	ldi	r20, 0xFF	; 255
     61e:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
		gpioPinDirection(SPI_GPIO, MISO, INPUT);
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	60 e4       	ldi	r22, 0x40	; 64
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
	}

	SPCR = (SPCR & 0x7F) | ConfigPtr->interruptMode;
     62c:	ad e2       	ldi	r26, 0x2D	; 45
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	ed e2       	ldi	r30, 0x2D	; 45
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	98 2f       	mov	r25, r24
     638:	9f 77       	andi	r25, 0x7F	; 127
     63a:	e9 81       	ldd	r30, Y+1	; 0x01
     63c:	fa 81       	ldd	r31, Y+2	; 0x02
     63e:	82 81       	ldd	r24, Z+2	; 0x02
     640:	89 2b       	or	r24, r25
     642:	8c 93       	st	X, r24
	SPCR = (SPCR & 0xAF) | (1 << SPE) | ConfigPtr->masterSlaveSelect;
     644:	ad e2       	ldi	r26, 0x2D	; 45
     646:	b0 e0       	ldi	r27, 0x00	; 0
     648:	ed e2       	ldi	r30, 0x2D	; 45
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	8f 7a       	andi	r24, 0xAF	; 175
     650:	98 2f       	mov	r25, r24
     652:	90 64       	ori	r25, 0x40	; 64
     654:	e9 81       	ldd	r30, Y+1	; 0x01
     656:	fa 81       	ldd	r31, Y+2	; 0x02
     658:	80 81       	ld	r24, Z
     65a:	89 2b       	or	r24, r25
     65c:	8c 93       	st	X, r24
	SPCR = (SPCR & 0xFC) | ((ConfigPtr->clockRateSelect) & 0x03);
     65e:	ad e2       	ldi	r26, 0x2D	; 45
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	ed e2       	ldi	r30, 0x2D	; 45
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 81       	ld	r24, Z
     668:	98 2f       	mov	r25, r24
     66a:	9c 7f       	andi	r25, 0xFC	; 252
     66c:	e9 81       	ldd	r30, Y+1	; 0x01
     66e:	fa 81       	ldd	r31, Y+2	; 0x02
     670:	81 81       	ldd	r24, Z+1	; 0x01
     672:	83 70       	andi	r24, 0x03	; 3
     674:	89 2b       	or	r24, r25
     676:	8c 93       	st	X, r24

	SPSR = (SPSR & 0xFE) | ((ConfigPtr->clockRateSelect & 0x04) >> 2);
     678:	ae e2       	ldi	r26, 0x2E	; 46
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	ee e2       	ldi	r30, 0x2E	; 46
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	28 2f       	mov	r18, r24
     684:	2e 7f       	andi	r18, 0xFE	; 254
     686:	e9 81       	ldd	r30, Y+1	; 0x01
     688:	fa 81       	ldd	r31, Y+2	; 0x02
     68a:	81 81       	ldd	r24, Z+1	; 0x01
     68c:	88 2f       	mov	r24, r24
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	84 70       	andi	r24, 0x04	; 4
     692:	90 70       	andi	r25, 0x00	; 0
     694:	95 95       	asr	r25
     696:	87 95       	ror	r24
     698:	95 95       	asr	r25
     69a:	87 95       	ror	r24
     69c:	82 2b       	or	r24, r18
     69e:	8c 93       	st	X, r24
}
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	cf 91       	pop	r28
     6a6:	df 91       	pop	r29
     6a8:	08 95       	ret

000006aa <SPI_transmit>:

/*
 * Description : A Function to send a byte.
 */
void SPI_transmit(const uint8_t data)
{
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	0f 92       	push	r0
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
     6b6:	ef e2       	ldi	r30, 0x2F	; 47
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	80 83       	st	Z, r24
	if(BIT_IS_CLEAR(SPCR, SPIE))
     6be:	ed e2       	ldi	r30, 0x2D	; 45
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	88 23       	and	r24, r24
     6c6:	2c f0       	brlt	.+10     	; 0x6d2 <SPI_transmit+0x28>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
     6c8:	ee e2       	ldi	r30, 0x2E	; 46
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	88 23       	and	r24, r24
     6d0:	dc f7       	brge	.-10     	; 0x6c8 <SPI_transmit+0x1e>
	}
}
     6d2:	0f 90       	pop	r0
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <SPI_receive>:

/*
 * Description : A Function to receive a byte.
 */
uint8_t SPI_receive(void)
{
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
	if(BIT_IS_CLEAR(SPCR, SPIE))
     6e2:	ed e2       	ldi	r30, 0x2D	; 45
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	88 23       	and	r24, r24
     6ea:	2c f0       	brlt	.+10     	; 0x6f6 <SPI_receive+0x1c>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
     6ec:	ee e2       	ldi	r30, 0x2E	; 46
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	88 23       	and	r24, r24
     6f4:	dc f7       	brge	.-10     	; 0x6ec <SPI_receive+0x12>
	}
	return SPDR;
     6f6:	ef e2       	ldi	r30, 0x2F	; 47
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
}
     6fc:	cf 91       	pop	r28
     6fe:	df 91       	pop	r29
     700:	08 95       	ret

00000702 <__vector_3>:


/*- ISR's --------------------------------------------------*/

ISR(INT2_vect)
{
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	/* In case of rising edge detection */
	if(BIT_IS_SET(MCUCSR, 6))
     72c:	e4 e5       	ldi	r30, 0x54	; 84
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	80 74       	andi	r24, 0x40	; 64
     738:	90 70       	andi	r25, 0x00	; 0
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	31 f0       	breq	.+12     	; 0x74a <__vector_3+0x48>
	{
		/* Start timer counter */
		SwICU_Start();
     73e:	0e 94 35 04 	call	0x86a	; 0x86a <SwICU_Start>
		/* Change edge detection to falling edge detection */
		SwICU_SetCfgEdge(SwICU_EdgeFalling);
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	0e 94 07 04 	call	0x80e	; 0x80e <SwICU_SetCfgEdge>
     748:	15 c0       	rjmp	.+42     	; 0x774 <__vector_3+0x72>
	}
	/* In case of falling edge detection */
	else if(BIT_IS_CLEAR(MCUCSR, 6))
     74a:	e4 e5       	ldi	r30, 0x54	; 84
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	80 74       	andi	r24, 0x40	; 64
     756:	90 70       	andi	r25, 0x00	; 0
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	61 f4       	brne	.+24     	; 0x774 <__vector_3+0x72>
	{
		/* Read the current timer counter value */
		SwICU_Read(&gu8_swIcuRead);
     75c:	87 e6       	ldi	r24, 0x67	; 103
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 1b 04 	call	0x836	; 0x836 <SwICU_Read>
		/* Change edge detection to rising edge detection */
		SwICU_SetCfgEdge(SwICU_EdgeRising);
     764:	80 e4       	ldi	r24, 0x40	; 64
     766:	0e 94 07 04 	call	0x80e	; 0x80e <SwICU_SetCfgEdge>
		/* Stop the timer counter */
		SwICU_Stop();
     76a:	0e 94 2c 04 	call	0x858	; 0x858 <SwICU_Stop>
		/* Set a flag to represent that the current operation is done */
		gu8_swIcuFlag = 1;
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 93 68 00 	sts	0x0068, r24
	}
}
     774:	cf 91       	pop	r28
     776:	df 91       	pop	r29
     778:	ff 91       	pop	r31
     77a:	ef 91       	pop	r30
     77c:	bf 91       	pop	r27
     77e:	af 91       	pop	r26
     780:	9f 91       	pop	r25
     782:	8f 91       	pop	r24
     784:	7f 91       	pop	r23
     786:	6f 91       	pop	r22
     788:	5f 91       	pop	r21
     78a:	4f 91       	pop	r20
     78c:	3f 91       	pop	r19
     78e:	2f 91       	pop	r18
     790:	0f 90       	pop	r0
     792:	0f be       	out	0x3f, r0	; 63
     794:	0f 90       	pop	r0
     796:	1f 90       	pop	r1
     798:	18 95       	reti

0000079a <SwICU_Init>:

/*- APIs IMPLEMENTATION ------------------------------------*/

void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
     79a:	ef 92       	push	r14
     79c:	0f 93       	push	r16
     79e:	df 93       	push	r29
     7a0:	cf 93       	push	r28
     7a2:	0f 92       	push	r0
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	89 83       	std	Y+1, r24	; 0x01
	/* Initializes timer0 in polling mode */
	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_256, 0, 0, T0_POLLING);
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	44 e0       	ldi	r20, 0x04	; 4
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	00 e0       	ldi	r16, 0x00	; 0
     7b4:	ee 24       	eor	r14, r14
     7b6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <timer0Init>

	gpioPinDirection(GPIOB, BIT2, INPUT);
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	64 e0       	ldi	r22, 0x04	; 4
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
	gpioPinDirection(GPIOD, BIT0, OUTPUT);
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	4f ef       	ldi	r20, 0xFF	; 255
     7ca:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
	
	/* Enables external int2 */
	SET_BIT(GICR, INT2);
     7ce:	ab e5       	ldi	r26, 0x5B	; 91
     7d0:	b0 e0       	ldi	r27, 0x00	; 0
     7d2:	eb e5       	ldi	r30, 0x5B	; 91
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	80 81       	ld	r24, Z
     7d8:	80 62       	ori	r24, 0x20	; 32
     7da:	8c 93       	st	X, r24
	
	/* Sets the required edge detection type */
	MCUCSR = (MCUCSR & 0xBF) | a_en_inputCaptureEdge;
     7dc:	a4 e5       	ldi	r26, 0x54	; 84
     7de:	b0 e0       	ldi	r27, 0x00	; 0
     7e0:	e4 e5       	ldi	r30, 0x54	; 84
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	98 2f       	mov	r25, r24
     7e8:	9f 7b       	andi	r25, 0xBF	; 191
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	89 2b       	or	r24, r25
     7ee:	8c 93       	st	X, r24
	
	/* Enables Global Interrupt Enable bit */
	sei();
     7f0:	78 94       	sei
}
     7f2:	0f 90       	pop	r0
     7f4:	cf 91       	pop	r28
     7f6:	df 91       	pop	r29
     7f8:	0f 91       	pop	r16
     7fa:	ef 90       	pop	r14
     7fc:	08 95       	ret

000007fe <SwICU_GetCfgEdge>:

EN_SwICU_Edge_t SwICU_GetCfgEdge(void)
{
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
	return 0;
     806:	80 e0       	ldi	r24, 0x00	; 0
}
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	08 95       	ret

0000080e <SwICU_SetCfgEdge>:

/*choose the detecting edge*/
void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	0f 92       	push	r0
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	89 83       	std	Y+1, r24	; 0x01
	/* Change the required edge detection type to the selected type */
	MCUCSR = (MCUCSR & 0xBF) | a_en_inputCaptureEdge;
     81a:	a4 e5       	ldi	r26, 0x54	; 84
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e4 e5       	ldi	r30, 0x54	; 84
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	98 2f       	mov	r25, r24
     826:	9f 7b       	andi	r25, 0xBF	; 191
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	89 2b       	or	r24, r25
     82c:	8c 93       	st	X, r24
}
     82e:	0f 90       	pop	r0
     830:	cf 91       	pop	r28
     832:	df 91       	pop	r29
     834:	08 95       	ret

00000836 <SwICU_Read>:

void SwICU_Read(volatile uint8_t * a_pu8_capt)
{
     836:	df 93       	push	r29
     838:	cf 93       	push	r28
     83a:	00 d0       	rcall	.+0      	; 0x83c <SwICU_Read+0x6>
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
	/* Reads the current value of the timer0 */
	*a_pu8_capt = timer0Read();
     844:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <timer0Read>
     848:	e9 81       	ldd	r30, Y+1	; 0x01
     84a:	fa 81       	ldd	r31, Y+2	; 0x02
     84c:	80 83       	st	Z, r24
}
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	cf 91       	pop	r28
     854:	df 91       	pop	r29
     856:	08 95       	ret

00000858 <SwICU_Stop>:

void SwICU_Stop(void)
{
     858:	df 93       	push	r29
     85a:	cf 93       	push	r28
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
	/* Stops the timer0 */
	timer0Stop();
     860:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <timer0Stop>
}
     864:	cf 91       	pop	r28
     866:	df 91       	pop	r29
     868:	08 95       	ret

0000086a <SwICU_Start>:

void SwICU_Start(void)
{
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
	/* Starts the timer0 */
	timer0Start();
     872:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <timer0Start>
}
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	08 95       	ret

0000087c <SwICU_Enable>:

void SwICU_Enable(void)
{
     87c:	df 93       	push	r29
     87e:	cf 93       	push	r28
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
}
     884:	cf 91       	pop	r28
     886:	df 91       	pop	r29
     888:	08 95       	ret

0000088a <SwICU_Disable>:

void SwICU_Disable(void)
{
     88a:	df 93       	push	r29
     88c:	cf 93       	push	r28
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
}
     892:	cf 91       	pop	r28
     894:	df 91       	pop	r29
     896:	08 95       	ret

00000898 <__vector_13>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(USART_RXC_vect)
{
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
     8ba:	df 93       	push	r29
     8bc:	cf 93       	push	r28
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
	if(g_RXC_callBackPtr != NULL)
     8c2:	80 91 6b 00 	lds	r24, 0x006B
     8c6:	90 91 6c 00 	lds	r25, 0x006C
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	29 f0       	breq	.+10     	; 0x8d8 <__vector_13+0x40>
	{
		g_RXC_callBackPtr();
     8ce:	e0 91 6b 00 	lds	r30, 0x006B
     8d2:	f0 91 6c 00 	lds	r31, 0x006C
     8d6:	09 95       	icall
	}
}
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_14>:

ISR(USART_UDRE_vect)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	2f 93       	push	r18
     90a:	3f 93       	push	r19
     90c:	4f 93       	push	r20
     90e:	5f 93       	push	r21
     910:	6f 93       	push	r22
     912:	7f 93       	push	r23
     914:	8f 93       	push	r24
     916:	9f 93       	push	r25
     918:	af 93       	push	r26
     91a:	bf 93       	push	r27
     91c:	ef 93       	push	r30
     91e:	ff 93       	push	r31
     920:	df 93       	push	r29
     922:	cf 93       	push	r28
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
	if(g_UDRE_callBackPtr != NULL)
     928:	80 91 6d 00 	lds	r24, 0x006D
     92c:	90 91 6e 00 	lds	r25, 0x006E
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	29 f0       	breq	.+10     	; 0x93e <__vector_14+0x40>
	{
		g_UDRE_callBackPtr();
     934:	e0 91 6d 00 	lds	r30, 0x006D
     938:	f0 91 6e 00 	lds	r31, 0x006E
     93c:	09 95       	icall
	}
}
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	ff 91       	pop	r31
     944:	ef 91       	pop	r30
     946:	bf 91       	pop	r27
     948:	af 91       	pop	r26
     94a:	9f 91       	pop	r25
     94c:	8f 91       	pop	r24
     94e:	7f 91       	pop	r23
     950:	6f 91       	pop	r22
     952:	5f 91       	pop	r21
     954:	4f 91       	pop	r20
     956:	3f 91       	pop	r19
     958:	2f 91       	pop	r18
     95a:	0f 90       	pop	r0
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	0f 90       	pop	r0
     960:	1f 90       	pop	r1
     962:	18 95       	reti

00000964 <__vector_15>:

ISR(USART_TXC_vect)
{
     964:	1f 92       	push	r1
     966:	0f 92       	push	r0
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	0f 92       	push	r0
     96c:	11 24       	eor	r1, r1
     96e:	2f 93       	push	r18
     970:	3f 93       	push	r19
     972:	4f 93       	push	r20
     974:	5f 93       	push	r21
     976:	6f 93       	push	r22
     978:	7f 93       	push	r23
     97a:	8f 93       	push	r24
     97c:	9f 93       	push	r25
     97e:	af 93       	push	r26
     980:	bf 93       	push	r27
     982:	ef 93       	push	r30
     984:	ff 93       	push	r31
     986:	df 93       	push	r29
     988:	cf 93       	push	r28
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
	if(g_TXC_callBackPtr != NULL)
     98e:	80 91 69 00 	lds	r24, 0x0069
     992:	90 91 6a 00 	lds	r25, 0x006A
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	29 f0       	breq	.+10     	; 0x9a4 <__vector_15+0x40>
	{
		g_TXC_callBackPtr();
     99a:	e0 91 69 00 	lds	r30, 0x0069
     99e:	f0 91 6a 00 	lds	r31, 0x006A
     9a2:	09 95       	icall
	}
}
     9a4:	cf 91       	pop	r28
     9a6:	df 91       	pop	r29
     9a8:	ff 91       	pop	r31
     9aa:	ef 91       	pop	r30
     9ac:	bf 91       	pop	r27
     9ae:	af 91       	pop	r26
     9b0:	9f 91       	pop	r25
     9b2:	8f 91       	pop	r24
     9b4:	7f 91       	pop	r23
     9b6:	6f 91       	pop	r22
     9b8:	5f 91       	pop	r21
     9ba:	4f 91       	pop	r20
     9bc:	3f 91       	pop	r19
     9be:	2f 91       	pop	r18
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <UART_TXC_setCallBack>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void UART_TXC_setCallBack(void(*local_ptr)(void))
{
     9ca:	df 93       	push	r29
     9cc:	cf 93       	push	r28
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <UART_TXC_setCallBack+0x6>
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	9a 83       	std	Y+2, r25	; 0x02
     9d6:	89 83       	std	Y+1, r24	; 0x01
	g_TXC_callBackPtr = (volatile void(*)(void))local_ptr;
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	9a 81       	ldd	r25, Y+2	; 0x02
     9dc:	90 93 6a 00 	sts	0x006A, r25
     9e0:	80 93 69 00 	sts	0x0069, r24
}
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <UART_RXC_setCallBack>:

void UART_RXC_setCallBack(void(*local_ptr)(void))
{
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <UART_RXC_setCallBack+0x6>
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	9a 83       	std	Y+2, r25	; 0x02
     9fa:	89 83       	std	Y+1, r24	; 0x01
	g_RXC_callBackPtr = (volatile void(*)(void))local_ptr;
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	9a 81       	ldd	r25, Y+2	; 0x02
     a00:	90 93 6c 00 	sts	0x006C, r25
     a04:	80 93 6b 00 	sts	0x006B, r24
}
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	cf 91       	pop	r28
     a0e:	df 91       	pop	r29
     a10:	08 95       	ret

00000a12 <UART_UDRE_setCallBack>:

void UART_UDRE_setCallBack(void(*local_ptr)(void))
{
     a12:	df 93       	push	r29
     a14:	cf 93       	push	r28
     a16:	00 d0       	rcall	.+0      	; 0xa18 <UART_UDRE_setCallBack+0x6>
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	89 83       	std	Y+1, r24	; 0x01
	g_UDRE_callBackPtr = (volatile void(*)(void))local_ptr;
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	90 93 6e 00 	sts	0x006E, r25
     a28:	80 93 6d 00 	sts	0x006D, r24
}
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	cf 91       	pop	r28
     a32:	df 91       	pop	r29
     a34:	08 95       	ret

00000a36 <UART_init>:

void UART_init(const UART_ConfigType* ConfigPtr)
{
     a36:	df 93       	push	r29
     a38:	cf 93       	push	r28
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <UART_init+0x6>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <UART_init+0x8>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRA, U2X);
     a46:	ab e2       	ldi	r26, 0x2B	; 43
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	eb e2       	ldi	r30, 0x2B	; 43
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	82 60       	ori	r24, 0x02	; 2
     a52:	8c 93       	st	X, r24

	switch(ConfigPtr->communicationMode)
     a54:	e9 81       	ldd	r30, Y+1	; 0x01
     a56:	fa 81       	ldd	r31, Y+2	; 0x02
     a58:	81 81       	ldd	r24, Z+1	; 0x01
     a5a:	28 2f       	mov	r18, r24
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	3c 83       	std	Y+4, r19	; 0x04
     a60:	2b 83       	std	Y+3, r18	; 0x03
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	9c 81       	ldd	r25, Y+4	; 0x04
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	91 05       	cpc	r25, r1
     a6a:	f1 f0       	breq	.+60     	; 0xaa8 <UART_init+0x72>
     a6c:	2b 81       	ldd	r18, Y+3	; 0x03
     a6e:	3c 81       	ldd	r19, Y+4	; 0x04
     a70:	22 30       	cpi	r18, 0x02	; 2
     a72:	31 05       	cpc	r19, r1
     a74:	69 f1       	breq	.+90     	; 0xad0 <UART_init+0x9a>
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	9c 81       	ldd	r25, Y+4	; 0x04
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	09 f0       	breq	.+2      	; 0xa80 <UART_init+0x4a>
     a7e:	49 c0       	rjmp	.+146    	; 0xb12 <UART_init+0xdc>
	{
	case UART_SENDER_MODE:
		SET_BIT(UCSRB, TXEN);
     a80:	aa e2       	ldi	r26, 0x2A	; 42
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	ea e2       	ldi	r30, 0x2A	; 42
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	88 60       	ori	r24, 0x08	; 8
     a8c:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     a8e:	e9 81       	ldd	r30, Y+1	; 0x01
     a90:	fa 81       	ldd	r31, Y+2	; 0x02
     a92:	85 81       	ldd	r24, Z+5	; 0x05
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	e9 f5       	brne	.+122    	; 0xb12 <UART_init+0xdc>
			SET_BIT(UCSRB, TXCIE);
     a98:	aa e2       	ldi	r26, 0x2A	; 42
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	ea e2       	ldi	r30, 0x2A	; 42
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	80 64       	ori	r24, 0x40	; 64
     aa4:	8c 93       	st	X, r24
     aa6:	35 c0       	rjmp	.+106    	; 0xb12 <UART_init+0xdc>
		break;
	case UART_RECEIVER_MODE:
		SET_BIT(UCSRB, RXEN);
     aa8:	aa e2       	ldi	r26, 0x2A	; 42
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	ea e2       	ldi	r30, 0x2A	; 42
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	80 61       	ori	r24, 0x10	; 16
     ab4:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     ab6:	e9 81       	ldd	r30, Y+1	; 0x01
     ab8:	fa 81       	ldd	r31, Y+2	; 0x02
     aba:	85 81       	ldd	r24, Z+5	; 0x05
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	49 f5       	brne	.+82     	; 0xb12 <UART_init+0xdc>
			SET_BIT(UCSRB, RXCIE);
     ac0:	aa e2       	ldi	r26, 0x2A	; 42
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	ea e2       	ldi	r30, 0x2A	; 42
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	80 68       	ori	r24, 0x80	; 128
     acc:	8c 93       	st	X, r24
     ace:	21 c0       	rjmp	.+66     	; 0xb12 <UART_init+0xdc>
		break;
	case UART_SENDER_RECEIVER_MODE:
		SET_BIT(UCSRB, TXEN);
     ad0:	aa e2       	ldi	r26, 0x2A	; 42
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	ea e2       	ldi	r30, 0x2A	; 42
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	88 60       	ori	r24, 0x08	; 8
     adc:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXEN);
     ade:	aa e2       	ldi	r26, 0x2A	; 42
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	ea e2       	ldi	r30, 0x2A	; 42
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	80 61       	ori	r24, 0x10	; 16
     aea:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     aec:	e9 81       	ldd	r30, Y+1	; 0x01
     aee:	fa 81       	ldd	r31, Y+2	; 0x02
     af0:	85 81       	ldd	r24, Z+5	; 0x05
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	71 f4       	brne	.+28     	; 0xb12 <UART_init+0xdc>
		{
			SET_BIT(UCSRB, TXCIE);
     af6:	aa e2       	ldi	r26, 0x2A	; 42
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	ea e2       	ldi	r30, 0x2A	; 42
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	80 64       	ori	r24, 0x40	; 64
     b02:	8c 93       	st	X, r24
			SET_BIT(UCSRB, RXCIE);
     b04:	aa e2       	ldi	r26, 0x2A	; 42
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	ea e2       	ldi	r30, 0x2A	; 42
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	80 68       	ori	r24, 0x80	; 128
     b10:	8c 93       	st	X, r24
		}
		break;
	}

	UCSRB = (UCSRB & 0xFB) | (ConfigPtr->charSize & 0x04);
     b12:	aa e2       	ldi	r26, 0x2A	; 42
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	ea e2       	ldi	r30, 0x2A	; 42
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	98 2f       	mov	r25, r24
     b1e:	9b 7f       	andi	r25, 0xFB	; 251
     b20:	e9 81       	ldd	r30, Y+1	; 0x01
     b22:	fa 81       	ldd	r31, Y+2	; 0x02
     b24:	82 81       	ldd	r24, Z+2	; 0x02
     b26:	84 70       	andi	r24, 0x04	; 4
     b28:	89 2b       	or	r24, r25
     b2a:	8c 93       	st	X, r24

	SET_BIT(UCSRC, URSEL);
     b2c:	a0 e4       	ldi	r26, 0x40	; 64
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e0 e4       	ldi	r30, 0x40	; 64
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	80 68       	ori	r24, 0x80	; 128
     b38:	8c 93       	st	X, r24
	UCSRC |= ConfigPtr->mode;
     b3a:	a0 e4       	ldi	r26, 0x40	; 64
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e0 e4       	ldi	r30, 0x40	; 64
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	90 81       	ld	r25, Z
     b44:	e9 81       	ldd	r30, Y+1	; 0x01
     b46:	fa 81       	ldd	r31, Y+2	; 0x02
     b48:	80 81       	ld	r24, Z
     b4a:	89 2b       	or	r24, r25
     b4c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((ConfigPtr->charSize & 0x03) << UCSZ0);
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e0 e4       	ldi	r30, 0x40	; 64
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	28 2f       	mov	r18, r24
     b5a:	29 7f       	andi	r18, 0xF9	; 249
     b5c:	e9 81       	ldd	r30, Y+1	; 0x01
     b5e:	fa 81       	ldd	r31, Y+2	; 0x02
     b60:	82 81       	ldd	r24, Z+2	; 0x02
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	83 70       	andi	r24, 0x03	; 3
     b68:	90 70       	andi	r25, 0x00	; 0
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	82 2b       	or	r24, r18
     b70:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ConfigPtr->parityMode;
     b72:	a0 e4       	ldi	r26, 0x40	; 64
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e0 e4       	ldi	r30, 0x40	; 64
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	98 2f       	mov	r25, r24
     b7e:	9f 7c       	andi	r25, 0xCF	; 207
     b80:	e9 81       	ldd	r30, Y+1	; 0x01
     b82:	fa 81       	ldd	r31, Y+2	; 0x02
     b84:	83 81       	ldd	r24, Z+3	; 0x03
     b86:	89 2b       	or	r24, r25
     b88:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ConfigPtr->stopBits;
     b8a:	a0 e4       	ldi	r26, 0x40	; 64
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e0 e4       	ldi	r30, 0x40	; 64
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	98 2f       	mov	r25, r24
     b96:	97 7f       	andi	r25, 0xF7	; 247
     b98:	e9 81       	ldd	r30, Y+1	; 0x01
     b9a:	fa 81       	ldd	r31, Y+2	; 0x02
     b9c:	84 81       	ldd	r24, Z+4	; 0x04
     b9e:	89 2b       	or	r24, r25
     ba0:	8c 93       	st	X, r24

	UBRRH = BAUDPRESCALE >> 8;
     ba2:	e0 e4       	ldi	r30, 0x40	; 64
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	10 82       	st	Z, r1
	UBRRL = BAUDPRESCALE;
     ba8:	e9 e2       	ldi	r30, 0x29	; 41
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8f ec       	ldi	r24, 0xCF	; 207
     bae:	80 83       	st	Z, r24
}
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <UART_transmit>:

void UART_transmit(const uint8_t data)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	0f 92       	push	r0
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	89 83       	std	Y+1, r24	; 0x01
	if(BIT_IS_CLEAR(UCSRB, TXCIE))
     bca:	ea e2       	ldi	r30, 0x2A	; 42
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	80 74       	andi	r24, 0x40	; 64
     bd6:	90 70       	andi	r25, 0x00	; 0
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	49 f4       	brne	.+18     	; 0xbee <UART_transmit+0x30>
		while(BIT_IS_CLEAR(UCSRA, UDRE));
     bdc:	eb e2       	ldi	r30, 0x2B	; 43
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	80 72       	andi	r24, 0x20	; 32
     be8:	90 70       	andi	r25, 0x00	; 0
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	b9 f3       	breq	.-18     	; 0xbdc <UART_transmit+0x1e>
	UDR = data;
     bee:	ec e2       	ldi	r30, 0x2C	; 44
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	80 83       	st	Z, r24
}
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <UART_receive>:

uint8_t UART_receive(void)
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	if(BIT_IS_CLEAR(UCSRB, RXCIE))
     c06:	ea e2       	ldi	r30, 0x2A	; 42
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	88 23       	and	r24, r24
     c0e:	2c f0       	brlt	.+10     	; 0xc1a <UART_receive+0x1c>
		while(BIT_IS_CLEAR(UCSRA, RXC));
     c10:	eb e2       	ldi	r30, 0x2B	; 43
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	88 23       	and	r24, r24
     c18:	dc f7       	brge	.-10     	; 0xc10 <UART_receive+0x12>
	return UDR;
     c1a:	ec e2       	ldi	r30, 0x2C	; 44
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
}
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <MotorDC_Init>:
#define MOTOR_FREQUENCY 200

/*- APIs IMPLEMENTATION ------------------------------------*/

void MotorDC_Init(En_motorType_t en_motor_number)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <MotorDC_Init+0x6>
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
	switch(en_motor_number)
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	3b 83       	std	Y+3, r19	; 0x03
     c3c:	2a 83       	std	Y+2, r18	; 0x02
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	9b 81       	ldd	r25, Y+3	; 0x03
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	31 f0       	breq	.+12     	; 0xc52 <MotorDC_Init+0x2c>
     c46:	2a 81       	ldd	r18, Y+2	; 0x02
     c48:	3b 81       	ldd	r19, Y+3	; 0x03
     c4a:	21 30       	cpi	r18, 0x01	; 1
     c4c:	31 05       	cpc	r19, r1
     c4e:	b1 f0       	breq	.+44     	; 0xc7c <MotorDC_Init+0x56>
     c50:	29 c0       	rjmp	.+82     	; 0xca4 <MotorDC_Init+0x7e>
	{
		case MOT_1:
			gpioPinDirection(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, OUTPUT);
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	60 e1       	ldi	r22, 0x10	; 16
     c56:	4f ef       	ldi	r20, 0xFF	; 255
     c58:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, OUTPUT);
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	64 e0       	ldi	r22, 0x04	; 4
     c60:	4f ef       	ldi	r20, 0xFF	; 255
     c62:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, OUTPUT);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	68 e0       	ldi	r22, 0x08	; 8
     c6a:	4f ef       	ldi	r20, 0xFF	; 255
     c6c:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, HIGH);
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	60 e1       	ldi	r22, 0x10	; 16
     c74:	4f ef       	ldi	r20, 0xFF	; 255
     c76:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
     c7a:	14 c0       	rjmp	.+40     	; 0xca4 <MotorDC_Init+0x7e>
			break;
		case MOT_2:
			gpioPinDirection(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, OUTPUT);
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	60 e2       	ldi	r22, 0x20	; 32
     c80:	4f ef       	ldi	r20, 0xFF	; 255
     c82:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, OUTPUT);
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	60 e4       	ldi	r22, 0x40	; 64
     c8a:	4f ef       	ldi	r20, 0xFF	; 255
     c8c:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, OUTPUT);
     c90:	83 e0       	ldi	r24, 0x03	; 3
     c92:	60 e8       	ldi	r22, 0x80	; 128
     c94:	4f ef       	ldi	r20, 0xFF	; 255
     c96:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, HIGH);
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	60 e2       	ldi	r22, 0x20	; 32
     c9e:	4f ef       	ldi	r20, 0xFF	; 255
     ca0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
			break;
	}
}
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <MotorDC_Dir>:

void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	2b 97       	sbiw	r28, 0x0b	; 11
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	8c 83       	std	Y+4, r24	; 0x04
     cc6:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t motorGpio = 0;
     cc8:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t motorBitA = 0;
     cca:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t motorBitB = 0;
     ccc:	19 82       	std	Y+1, r1	; 0x01
	
	switch(en_motor_number)
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	3b 87       	std	Y+11, r19	; 0x0b
     cd6:	2a 87       	std	Y+10, r18	; 0x0a
     cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cda:	9b 85       	ldd	r25, Y+11	; 0x0b
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	31 f0       	breq	.+12     	; 0xcec <MotorDC_Dir+0x3c>
     ce0:	2a 85       	ldd	r18, Y+10	; 0x0a
     ce2:	3b 85       	ldd	r19, Y+11	; 0x0b
     ce4:	21 30       	cpi	r18, 0x01	; 1
     ce6:	31 05       	cpc	r19, r1
     ce8:	41 f0       	breq	.+16     	; 0xcfa <MotorDC_Dir+0x4a>
     cea:	0d c0       	rjmp	.+26     	; 0xd06 <MotorDC_Dir+0x56>
	{
		case MOT_1:
			motorGpio = MOTOR_OUT_1A_GPIO;
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_1A_BIT;
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_1B_BIT;
     cf4:	88 e0       	ldi	r24, 0x08	; 8
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <MotorDC_Dir+0x56>
			break;
		case MOT_2:
			motorGpio = MOTOR_OUT_2A_GPIO;
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_2A_BIT;
     cfe:	80 e4       	ldi	r24, 0x40	; 64
     d00:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_2B_BIT;
     d02:	80 e8       	ldi	r24, 0x80	; 128
     d04:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	
	switch(en_motor_dir)
     d06:	8d 81       	ldd	r24, Y+5	; 0x05
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	39 87       	std	Y+9, r19	; 0x09
     d0e:	28 87       	std	Y+8, r18	; 0x08
     d10:	88 85       	ldd	r24, Y+8	; 0x08
     d12:	99 85       	ldd	r25, Y+9	; 0x09
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	91 05       	cpc	r25, r1
     d18:	71 f1       	breq	.+92     	; 0xd76 <MotorDC_Dir+0xc6>
     d1a:	28 85       	ldd	r18, Y+8	; 0x08
     d1c:	39 85       	ldd	r19, Y+9	; 0x09
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	a1 f1       	breq	.+104    	; 0xd8c <MotorDC_Dir+0xdc>
     d24:	88 85       	ldd	r24, Y+8	; 0x08
     d26:	99 85       	ldd	r25, Y+9	; 0x09
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	d1 f5       	brne	.+116    	; 0xda0 <MotorDC_Dir+0xf0>
	{
		case STOP:
		gpioPinWrite(motorGpio, motorBitA, LOW);
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	6a 81       	ldd	r22, Y+2	; 0x02
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	69 81       	ldd	r22, Y+1	; 0x01
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		switch(en_motor_number)
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3f 83       	std	Y+7, r19	; 0x07
     d48:	2e 83       	std	Y+6, r18	; 0x06
     d4a:	8e 81       	ldd	r24, Y+6	; 0x06
     d4c:	9f 81       	ldd	r25, Y+7	; 0x07
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	31 f0       	breq	.+12     	; 0xd5e <MotorDC_Dir+0xae>
     d52:	2e 81       	ldd	r18, Y+6	; 0x06
     d54:	3f 81       	ldd	r19, Y+7	; 0x07
     d56:	21 30       	cpi	r18, 0x01	; 1
     d58:	31 05       	cpc	r19, r1
     d5a:	39 f0       	breq	.+14     	; 0xd6a <MotorDC_Dir+0xba>
     d5c:	21 c0       	rjmp	.+66     	; 0xda0 <MotorDC_Dir+0xf0>
		{
			case MOT_1:
				gpioPinWrite(motorGpio, MOTOR_EN_1_BIT, LOW);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	60 e1       	ldi	r22, 0x10	; 16
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
     d68:	1b c0       	rjmp	.+54     	; 0xda0 <MotorDC_Dir+0xf0>
				break;
			case MOT_2:
				gpioPinWrite(motorGpio, MOTOR_EN_2_BIT, LOW);
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	60 e2       	ldi	r22, 0x20	; 32
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
     d74:	15 c0       	rjmp	.+42     	; 0xda0 <MotorDC_Dir+0xf0>
				break;
		}
		break;
		
		case FORWARD:
		gpioPinWrite(motorGpio, motorBitA, LOW);
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	6a 81       	ldd	r22, Y+2	; 0x02
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, HIGH);
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	69 81       	ldd	r22, Y+1	; 0x01
     d84:	4f ef       	ldi	r20, 0xFF	; 255
     d86:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
     d8a:	0a c0       	rjmp	.+20     	; 0xda0 <MotorDC_Dir+0xf0>
		break;
		
		case BACKWARD:
		gpioPinWrite(motorGpio, motorBitA, HIGH);
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	6a 81       	ldd	r22, Y+2	; 0x02
     d90:	4f ef       	ldi	r20, 0xFF	; 255
     d92:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	69 81       	ldd	r22, Y+1	; 0x01
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		break;
	}
}
     da0:	2b 96       	adiw	r28, 0x0b	; 11
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <MotorDC_Speed_PollingWithT0>:

void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	0f 92       	push	r0
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	89 83       	std	Y+1, r24	; 0x01
	timer0SwPWM(u8_motor_speed, MOTOR_FREQUENCY);
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	68 ec       	ldi	r22, 0xC8	; 200
     dc2:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <timer0SwPWM>
}
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <MotorDC_Speed_HwPWM>:

void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	89 83       	std	Y+1, r24	; 0x01
	
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <gpioPortDirection>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <gpioPortDirection+0x6>
     de8:	00 d0       	rcall	.+0      	; 0xdea <gpioPortDirection+0x8>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to manipulate its direction */
	switch(u8_port)
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	3c 83       	std	Y+4, r19	; 0x04
     dfa:	2b 83       	std	Y+3, r18	; 0x03
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	91 05       	cpc	r25, r1
     e04:	d1 f0       	breq	.+52     	; 0xe3a <gpioPortDirection+0x58>
     e06:	2b 81       	ldd	r18, Y+3	; 0x03
     e08:	3c 81       	ldd	r19, Y+4	; 0x04
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	2c f4       	brge	.+10     	; 0xe1a <gpioPortDirection+0x38>
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	9c 81       	ldd	r25, Y+4	; 0x04
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	61 f0       	breq	.+24     	; 0xe30 <gpioPortDirection+0x4e>
     e18:	1e c0       	rjmp	.+60     	; 0xe56 <gpioPortDirection+0x74>
     e1a:	2b 81       	ldd	r18, Y+3	; 0x03
     e1c:	3c 81       	ldd	r19, Y+4	; 0x04
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	81 f0       	breq	.+32     	; 0xe44 <gpioPortDirection+0x62>
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	81 f0       	breq	.+32     	; 0xe4e <gpioPortDirection+0x6c>
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <gpioPortDirection+0x74>
	{
	case GPIOA:
		PORTA_DIR = u8_direction;
     e30:	ea e3       	ldi	r30, 0x3A	; 58
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	80 83       	st	Z, r24
     e38:	0e c0       	rjmp	.+28     	; 0xe56 <gpioPortDirection+0x74>
		break;
	case GPIOB:
		PORTB_DIR = u8_direction;
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	80 83       	st	Z, r24
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <gpioPortDirection+0x74>
		break;
	case GPIOC:
		PORTC_DIR = u8_direction;
     e44:	e4 e3       	ldi	r30, 0x34	; 52
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	80 83       	st	Z, r24
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <gpioPortDirection+0x74>
		break;
	case GPIOD:
		PORTD_DIR = u8_direction;
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <gpioPortWrite>:

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <gpioPortWrite+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <gpioPortWrite+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to assign the value to */
	switch(u8_port)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	3c 83       	std	Y+4, r19	; 0x04
     e7c:	2b 83       	std	Y+3, r18	; 0x03
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 05       	cpc	r25, r1
     e86:	d1 f0       	breq	.+52     	; 0xebc <gpioPortWrite+0x58>
     e88:	2b 81       	ldd	r18, Y+3	; 0x03
     e8a:	3c 81       	ldd	r19, Y+4	; 0x04
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	2c f4       	brge	.+10     	; 0xe9c <gpioPortWrite+0x38>
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	61 f0       	breq	.+24     	; 0xeb2 <gpioPortWrite+0x4e>
     e9a:	1e c0       	rjmp	.+60     	; 0xed8 <gpioPortWrite+0x74>
     e9c:	2b 81       	ldd	r18, Y+3	; 0x03
     e9e:	3c 81       	ldd	r19, Y+4	; 0x04
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	81 f0       	breq	.+32     	; 0xec6 <gpioPortWrite+0x62>
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	91 05       	cpc	r25, r1
     eae:	81 f0       	breq	.+32     	; 0xed0 <gpioPortWrite+0x6c>
     eb0:	13 c0       	rjmp	.+38     	; 0xed8 <gpioPortWrite+0x74>
	{
	case GPIOA:
		PORTA_DATA = u8_value;
     eb2:	eb e3       	ldi	r30, 0x3B	; 59
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	80 83       	st	Z, r24
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <gpioPortWrite+0x74>
		break;
	case GPIOB:
		PORTB_DATA = u8_value;
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	80 83       	st	Z, r24
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <gpioPortWrite+0x74>
		break;
	case GPIOC:
		PORTC_DATA = u8_value;
     ec6:	e5 e3       	ldi	r30, 0x35	; 53
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	80 83       	st	Z, r24
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <gpioPortWrite+0x74>
		break;
	case GPIOD:
		PORTD_DATA = u8_value;
     ed0:	e2 e3       	ldi	r30, 0x32	; 50
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <gpioPortToggle+0x6>
     eec:	0f 92       	push	r0
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to toggle its value */
	switch(u8_port)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	3b 83       	std	Y+3, r19	; 0x03
     efc:	2a 83       	std	Y+2, r18	; 0x02
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	9b 81       	ldd	r25, Y+3	; 0x03
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	91 05       	cpc	r25, r1
     f06:	e9 f0       	breq	.+58     	; 0xf42 <gpioPortToggle+0x5c>
     f08:	2a 81       	ldd	r18, Y+2	; 0x02
     f0a:	3b 81       	ldd	r19, Y+3	; 0x03
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	2c f4       	brge	.+10     	; 0xf1c <gpioPortToggle+0x36>
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	9b 81       	ldd	r25, Y+3	; 0x03
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	61 f0       	breq	.+24     	; 0xf32 <gpioPortToggle+0x4c>
     f1a:	2a c0       	rjmp	.+84     	; 0xf70 <gpioPortToggle+0x8a>
     f1c:	2a 81       	ldd	r18, Y+2	; 0x02
     f1e:	3b 81       	ldd	r19, Y+3	; 0x03
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	b1 f0       	breq	.+44     	; 0xf52 <gpioPortToggle+0x6c>
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	9b 81       	ldd	r25, Y+3	; 0x03
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	91 05       	cpc	r25, r1
     f2e:	c9 f0       	breq	.+50     	; 0xf62 <gpioPortToggle+0x7c>
     f30:	1f c0       	rjmp	.+62     	; 0xf70 <gpioPortToggle+0x8a>
	{
	case GPIOA:
		PORTA_DATA ^= HIGH;
     f32:	ab e3       	ldi	r26, 0x3B	; 59
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e3       	ldi	r30, 0x3B	; 59
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 95       	com	r24
     f3e:	8c 93       	st	X, r24
     f40:	17 c0       	rjmp	.+46     	; 0xf70 <gpioPortToggle+0x8a>
		break;
	case GPIOB:
		PORTB_DATA ^= HIGH;
     f42:	a8 e3       	ldi	r26, 0x38	; 56
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e3       	ldi	r30, 0x38	; 56
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 95       	com	r24
     f4e:	8c 93       	st	X, r24
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <gpioPortToggle+0x8a>
		break;
	case GPIOC:
		PORTC_DATA ^= HIGH;
     f52:	a5 e3       	ldi	r26, 0x35	; 53
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e3       	ldi	r30, 0x35	; 53
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 95       	com	r24
     f5e:	8c 93       	st	X, r24
     f60:	07 c0       	rjmp	.+14     	; 0xf70 <gpioPortToggle+0x8a>
		break;
	case GPIOD:
		PORTD_DATA ^= HIGH;
     f62:	a2 e3       	ldi	r26, 0x32	; 50
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e2 e3       	ldi	r30, 0x32	; 50
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 95       	com	r24
     f6e:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <gpioPortRead+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <gpioPortRead+0x8>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to be read */
	switch(u8_port)
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3c 83       	std	Y+4, r19	; 0x04
     f92:	2b 83       	std	Y+3, r18	; 0x03
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	91 05       	cpc	r25, r1
     f9c:	d1 f0       	breq	.+52     	; 0xfd2 <gpioPortRead+0x56>
     f9e:	2b 81       	ldd	r18, Y+3	; 0x03
     fa0:	3c 81       	ldd	r19, Y+4	; 0x04
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <gpioPortRead+0x36>
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	61 f0       	breq	.+24     	; 0xfc8 <gpioPortRead+0x4c>
     fb0:	1f c0       	rjmp	.+62     	; 0xff0 <gpioPortRead+0x74>
     fb2:	2b 81       	ldd	r18, Y+3	; 0x03
     fb4:	3c 81       	ldd	r19, Y+4	; 0x04
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	31 05       	cpc	r19, r1
     fba:	81 f0       	breq	.+32     	; 0xfdc <gpioPortRead+0x60>
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	83 30       	cpi	r24, 0x03	; 3
     fc2:	91 05       	cpc	r25, r1
     fc4:	81 f0       	breq	.+32     	; 0xfe6 <gpioPortRead+0x6a>
     fc6:	14 c0       	rjmp	.+40     	; 0xff0 <gpioPortRead+0x74>
	{
	case GPIOA:
		return PORTA_PIN;
     fc8:	e9 e3       	ldi	r30, 0x39	; 57
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	90 81       	ld	r25, Z
     fce:	9a 83       	std	Y+2, r25	; 0x02
     fd0:	11 c0       	rjmp	.+34     	; 0xff4 <gpioPortRead+0x78>
		break;
	case GPIOB:
		return PORTB_PIN;
     fd2:	e6 e3       	ldi	r30, 0x36	; 54
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	20 81       	ld	r18, Z
     fd8:	2a 83       	std	Y+2, r18	; 0x02
     fda:	0c c0       	rjmp	.+24     	; 0xff4 <gpioPortRead+0x78>
		break;
	case GPIOC:
		return PORTC_PIN;
     fdc:	e3 e3       	ldi	r30, 0x33	; 51
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	30 81       	ld	r19, Z
     fe2:	3a 83       	std	Y+2, r19	; 0x02
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <gpioPortRead+0x78>
		break;
	case GPIOD:
		return PORTD_PIN;
     fe6:	e0 e3       	ldi	r30, 0x30	; 48
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <gpioPortRead+0x78>
		break;
	default:
		return ERROR;
     ff0:	9f ef       	ldi	r25, 0xFF	; 255
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	29 97       	sbiw	r28, 0x09	; 9
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	8b 83       	std	Y+3, r24	; 0x03
    101a:	6c 83       	std	Y+4, r22	; 0x04
    101c:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which direction is to be manipulated */
	uint8_t* pu8_portDirectionPointer = NULL;
    101e:	1a 82       	std	Y+2, r1	; 0x02
    1020:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	39 87       	std	Y+9, r19	; 0x09
    102a:	28 87       	std	Y+8, r18	; 0x08
    102c:	88 85       	ldd	r24, Y+8	; 0x08
    102e:	99 85       	ldd	r25, Y+9	; 0x09
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	91 05       	cpc	r25, r1
    1034:	d1 f0       	breq	.+52     	; 0x106a <gpioPinDirection+0x66>
    1036:	28 85       	ldd	r18, Y+8	; 0x08
    1038:	39 85       	ldd	r19, Y+9	; 0x09
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	2c f4       	brge	.+10     	; 0x104a <gpioPinDirection+0x46>
    1040:	88 85       	ldd	r24, Y+8	; 0x08
    1042:	99 85       	ldd	r25, Y+9	; 0x09
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 f0       	breq	.+24     	; 0x1060 <gpioPinDirection+0x5c>
    1048:	1e c0       	rjmp	.+60     	; 0x1086 <gpioPinDirection+0x82>
    104a:	28 85       	ldd	r18, Y+8	; 0x08
    104c:	39 85       	ldd	r19, Y+9	; 0x09
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	81 f0       	breq	.+32     	; 0x1074 <gpioPinDirection+0x70>
    1054:	88 85       	ldd	r24, Y+8	; 0x08
    1056:	99 85       	ldd	r25, Y+9	; 0x09
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	81 f0       	breq	.+32     	; 0x107e <gpioPinDirection+0x7a>
    105e:	13 c0       	rjmp	.+38     	; 0x1086 <gpioPinDirection+0x82>
	{
	case GPIOA:
		pu8_portDirectionPointer = (uint8_t*)(&PORTA_DIR);
    1060:	8a e3       	ldi	r24, 0x3A	; 58
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	0e c0       	rjmp	.+28     	; 0x1086 <gpioPinDirection+0x82>
		break;
	case GPIOB:
		pu8_portDirectionPointer = (uint8_t*)(&PORTB_DIR);
    106a:	87 e3       	ldi	r24, 0x37	; 55
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <gpioPinDirection+0x82>
		break;
	case GPIOC:
		pu8_portDirectionPointer = (uint8_t*)(&PORTC_DIR);
    1074:	84 e3       	ldi	r24, 0x34	; 52
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <gpioPinDirection+0x82>
		break;
	case GPIOD:
		pu8_portDirectionPointer = (uint8_t*)(&PORTD_DIR);
    107e:	81 e3       	ldi	r24, 0x31	; 49
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the pins are to be input or output */
	switch(u8_direction)
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3f 83       	std	Y+7, r19	; 0x07
    108e:	2e 83       	std	Y+6, r18	; 0x06
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	9f 81       	ldd	r25, Y+7	; 0x07
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	31 f0       	breq	.+12     	; 0x10a4 <gpioPinDirection+0xa0>
    1098:	2e 81       	ldd	r18, Y+6	; 0x06
    109a:	3f 81       	ldd	r19, Y+7	; 0x07
    109c:	2f 3f       	cpi	r18, 0xFF	; 255
    109e:	31 05       	cpc	r19, r1
    10a0:	61 f0       	breq	.+24     	; 0x10ba <gpioPinDirection+0xb6>
    10a2:	13 c0       	rjmp	.+38     	; 0x10ca <gpioPinDirection+0xc6>
	{
	case INPUT:
		*pu8_portDirectionPointer &= ~u8_pins;
    10a4:	e9 81       	ldd	r30, Y+1	; 0x01
    10a6:	fa 81       	ldd	r31, Y+2	; 0x02
    10a8:	80 81       	ld	r24, Z
    10aa:	98 2f       	mov	r25, r24
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	80 95       	com	r24
    10b0:	89 23       	and	r24, r25
    10b2:	e9 81       	ldd	r30, Y+1	; 0x01
    10b4:	fa 81       	ldd	r31, Y+2	; 0x02
    10b6:	80 83       	st	Z, r24
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <gpioPinDirection+0xc6>
		break;
	case OUTPUT:
		*pu8_portDirectionPointer |= u8_pins;
    10ba:	e9 81       	ldd	r30, Y+1	; 0x01
    10bc:	fa 81       	ldd	r31, Y+2	; 0x02
    10be:	90 81       	ld	r25, Z
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	89 2b       	or	r24, r25
    10c4:	e9 81       	ldd	r30, Y+1	; 0x01
    10c6:	fa 81       	ldd	r31, Y+2	; 0x02
    10c8:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    10ca:	29 96       	adiw	r28, 0x09	; 9
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <gpioPinWrite>:

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	29 97       	sbiw	r28, 0x09	; 9
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	8b 83       	std	Y+3, r24	; 0x03
    10f2:	6c 83       	std	Y+4, r22	; 0x04
    10f4:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which pins values are to be changed */
	uint8_t* pu8_portDataPointer = NULL;
    10f6:	1a 82       	std	Y+2, r1	; 0x02
    10f8:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	39 87       	std	Y+9, r19	; 0x09
    1102:	28 87       	std	Y+8, r18	; 0x08
    1104:	88 85       	ldd	r24, Y+8	; 0x08
    1106:	99 85       	ldd	r25, Y+9	; 0x09
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	d1 f0       	breq	.+52     	; 0x1142 <gpioPinWrite+0x66>
    110e:	28 85       	ldd	r18, Y+8	; 0x08
    1110:	39 85       	ldd	r19, Y+9	; 0x09
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <gpioPinWrite+0x46>
    1118:	88 85       	ldd	r24, Y+8	; 0x08
    111a:	99 85       	ldd	r25, Y+9	; 0x09
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 f0       	breq	.+24     	; 0x1138 <gpioPinWrite+0x5c>
    1120:	1e c0       	rjmp	.+60     	; 0x115e <gpioPinWrite+0x82>
    1122:	28 85       	ldd	r18, Y+8	; 0x08
    1124:	39 85       	ldd	r19, Y+9	; 0x09
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	81 f0       	breq	.+32     	; 0x114c <gpioPinWrite+0x70>
    112c:	88 85       	ldd	r24, Y+8	; 0x08
    112e:	99 85       	ldd	r25, Y+9	; 0x09
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	81 f0       	breq	.+32     	; 0x1156 <gpioPinWrite+0x7a>
    1136:	13 c0       	rjmp	.+38     	; 0x115e <gpioPinWrite+0x82>
	{
	case GPIOA:
		pu8_portDataPointer = (uint8_t*)(&PORTA_DATA);
    1138:	8b e3       	ldi	r24, 0x3B	; 59
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	0e c0       	rjmp	.+28     	; 0x115e <gpioPinWrite+0x82>
		break;
	case GPIOB:
		pu8_portDataPointer = (uint8_t*)(&PORTB_DATA);
    1142:	88 e3       	ldi	r24, 0x38	; 56
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	09 c0       	rjmp	.+18     	; 0x115e <gpioPinWrite+0x82>
		break;
	case GPIOC:
		pu8_portDataPointer = (uint8_t*)(&PORTC_DATA);
    114c:	85 e3       	ldi	r24, 0x35	; 53
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	04 c0       	rjmp	.+8      	; 0x115e <gpioPinWrite+0x82>
		break;
	case GPIOD:
		pu8_portDataPointer = (uint8_t*)(&PORTD_DATA);
    1156:	82 e3       	ldi	r24, 0x32	; 50
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the bits values are to be high or low */
	switch(u8_value)
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3f 83       	std	Y+7, r19	; 0x07
    1166:	2e 83       	std	Y+6, r18	; 0x06
    1168:	8e 81       	ldd	r24, Y+6	; 0x06
    116a:	9f 81       	ldd	r25, Y+7	; 0x07
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	31 f0       	breq	.+12     	; 0x117c <gpioPinWrite+0xa0>
    1170:	2e 81       	ldd	r18, Y+6	; 0x06
    1172:	3f 81       	ldd	r19, Y+7	; 0x07
    1174:	2f 3f       	cpi	r18, 0xFF	; 255
    1176:	31 05       	cpc	r19, r1
    1178:	61 f0       	breq	.+24     	; 0x1192 <gpioPinWrite+0xb6>
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <gpioPinWrite+0xc6>
	{
	case LOW:
		*pu8_portDataPointer &= ~u8_pins;
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	80 81       	ld	r24, Z
    1182:	98 2f       	mov	r25, r24
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	80 95       	com	r24
    1188:	89 23       	and	r24, r25
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	80 83       	st	Z, r24
    1190:	08 c0       	rjmp	.+16     	; 0x11a2 <gpioPinWrite+0xc6>
		break;
	case HIGH:
		*pu8_portDataPointer |= u8_pins;
    1192:	e9 81       	ldd	r30, Y+1	; 0x01
    1194:	fa 81       	ldd	r31, Y+2	; 0x02
    1196:	90 81       	ld	r25, Z
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	89 2b       	or	r24, r25
    119c:	e9 81       	ldd	r30, Y+1	; 0x01
    119e:	fa 81       	ldd	r31, Y+2	; 0x02
    11a0:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    11a2:	29 96       	adiw	r28, 0x09	; 9
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <gpioPinToggle+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <gpioPinToggle+0x8>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to toggle its pins */
	switch(u8_port)
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3c 83       	std	Y+4, r19	; 0x04
    11cc:	2b 83       	std	Y+3, r18	; 0x03
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	91 05       	cpc	r25, r1
    11d6:	f1 f0       	breq	.+60     	; 0x1214 <gpioPinToggle+0x60>
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	3c 81       	ldd	r19, Y+4	; 0x04
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	2c f4       	brge	.+10     	; 0x11ec <gpioPinToggle+0x38>
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	61 f0       	breq	.+24     	; 0x1202 <gpioPinToggle+0x4e>
    11ea:	2e c0       	rjmp	.+92     	; 0x1248 <gpioPinToggle+0x94>
    11ec:	2b 81       	ldd	r18, Y+3	; 0x03
    11ee:	3c 81       	ldd	r19, Y+4	; 0x04
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	c1 f0       	breq	.+48     	; 0x1226 <gpioPinToggle+0x72>
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	e1 f0       	breq	.+56     	; 0x1238 <gpioPinToggle+0x84>
    1200:	23 c0       	rjmp	.+70     	; 0x1248 <gpioPinToggle+0x94>
	{
	case GPIOA:
		PORTA_DATA ^= u8_pins;
    1202:	ab e3       	ldi	r26, 0x3B	; 59
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e3       	ldi	r30, 0x3B	; 59
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	90 81       	ld	r25, Z
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	89 27       	eor	r24, r25
    1210:	8c 93       	st	X, r24
    1212:	1a c0       	rjmp	.+52     	; 0x1248 <gpioPinToggle+0x94>
		break;
	case GPIOB:
		PORTB_DATA ^= u8_pins;
    1214:	a8 e3       	ldi	r26, 0x38	; 56
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e8 e3       	ldi	r30, 0x38	; 56
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	90 81       	ld	r25, Z
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	89 27       	eor	r24, r25
    1222:	8c 93       	st	X, r24
    1224:	11 c0       	rjmp	.+34     	; 0x1248 <gpioPinToggle+0x94>
		break;
	case GPIOC:
		PORTC_DATA ^= u8_pins;
    1226:	a5 e3       	ldi	r26, 0x35	; 53
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e5 e3       	ldi	r30, 0x35	; 53
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	90 81       	ld	r25, Z
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	89 27       	eor	r24, r25
    1234:	8c 93       	st	X, r24
    1236:	08 c0       	rjmp	.+16     	; 0x1248 <gpioPinToggle+0x94>
		break;
	case GPIOD:
		PORTD_DATA ^= u8_pins;
    1238:	a2 e3       	ldi	r26, 0x32	; 50
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e2 e3       	ldi	r30, 0x32	; 50
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	90 81       	ld	r25, Z
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	89 27       	eor	r24, r25
    1246:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	29 97       	sbiw	r28, 0x09	; 9
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to read its pin */
	switch(u8_port)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3d 83       	std	Y+5, r19	; 0x05
    1276:	2c 83       	std	Y+4, r18	; 0x04
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	19 f1       	breq	.+70     	; 0x12c8 <gpioPinRead+0x72>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	2c f4       	brge	.+10     	; 0x1296 <gpioPinRead+0x40>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	61 f0       	breq	.+24     	; 0x12ac <gpioPinRead+0x56>
    1294:	43 c0       	rjmp	.+134    	; 0x131c <gpioPinRead+0xc6>
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	11 f1       	breq	.+68     	; 0x12e4 <gpioPinRead+0x8e>
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	59 f1       	breq	.+86     	; 0x1300 <gpioPinRead+0xaa>
    12aa:	38 c0       	rjmp	.+112    	; 0x131c <gpioPinRead+0xc6>
	{
	case GPIOA:
		return ((PORTA_PIN & u8_pin)? 1:0);
    12ac:	e9 e3       	ldi	r30, 0x39	; 57
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	90 81       	ld	r25, Z
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	89 23       	and	r24, r25
    12b6:	8e 83       	std	Y+6, r24	; 0x06
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	99 23       	and	r25, r25
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <gpioPinRead+0x6c>
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	2e 83       	std	Y+6, r18	; 0x06
    12c2:	3e 81       	ldd	r19, Y+6	; 0x06
    12c4:	3b 83       	std	Y+3, r19	; 0x03
    12c6:	2c c0       	rjmp	.+88     	; 0x1320 <gpioPinRead+0xca>
		break;
	case GPIOB:
		return ((PORTB_PIN & u8_pin)? 1:0);
    12c8:	e6 e3       	ldi	r30, 0x36	; 54
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	90 81       	ld	r25, Z
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	89 23       	and	r24, r25
    12d2:	8f 83       	std	Y+7, r24	; 0x07
    12d4:	8f 81       	ldd	r24, Y+7	; 0x07
    12d6:	88 23       	and	r24, r24
    12d8:	11 f0       	breq	.+4      	; 0x12de <gpioPinRead+0x88>
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	9f 83       	std	Y+7, r25	; 0x07
    12de:	2f 81       	ldd	r18, Y+7	; 0x07
    12e0:	2b 83       	std	Y+3, r18	; 0x03
    12e2:	1e c0       	rjmp	.+60     	; 0x1320 <gpioPinRead+0xca>
		break;
	case GPIOC:
		return ((PORTC_PIN & u8_pin)? 1:0);
    12e4:	e3 e3       	ldi	r30, 0x33	; 51
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	90 81       	ld	r25, Z
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	89 23       	and	r24, r25
    12ee:	88 87       	std	Y+8, r24	; 0x08
    12f0:	38 85       	ldd	r19, Y+8	; 0x08
    12f2:	33 23       	and	r19, r19
    12f4:	11 f0       	breq	.+4      	; 0x12fa <gpioPinRead+0xa4>
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	88 87       	std	Y+8, r24	; 0x08
    12fa:	98 85       	ldd	r25, Y+8	; 0x08
    12fc:	9b 83       	std	Y+3, r25	; 0x03
    12fe:	10 c0       	rjmp	.+32     	; 0x1320 <gpioPinRead+0xca>
		break;
	case GPIOD:
		return ((PORTD_PIN & u8_pin)? 1:0);
    1300:	e0 e3       	ldi	r30, 0x30	; 48
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	90 81       	ld	r25, Z
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	89 23       	and	r24, r25
    130a:	89 87       	std	Y+9, r24	; 0x09
    130c:	29 85       	ldd	r18, Y+9	; 0x09
    130e:	22 23       	and	r18, r18
    1310:	11 f0       	breq	.+4      	; 0x1316 <gpioPinRead+0xc0>
    1312:	31 e0       	ldi	r19, 0x01	; 1
    1314:	39 87       	std	Y+9, r19	; 0x09
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <gpioPinRead+0xca>
		break;
	default:
		return ERROR;
    131c:	9f ef       	ldi	r25, 0xFF	; 255
    131e:	9b 83       	std	Y+3, r25	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
}
    1322:	29 96       	adiw	r28, 0x09	; 9
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <Led_Init>:
#include "ledConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void Led_Init(En_LedNumber_t en_led_id)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <Led_Init+0x6>
    133a:	0f 92       	push	r0
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be initialized */
	switch(en_led_id)
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3b 83       	std	Y+3, r19	; 0x03
    134a:	2a 83       	std	Y+2, r18	; 0x02
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	9b 81       	ldd	r25, Y+3	; 0x03
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	d9 f0       	breq	.+54     	; 0x138c <Led_Init+0x58>
    1356:	2a 81       	ldd	r18, Y+2	; 0x02
    1358:	3b 81       	ldd	r19, Y+3	; 0x03
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <Led_Init+0x36>
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	9b 81       	ldd	r25, Y+3	; 0x03
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	61 f0       	breq	.+24     	; 0x1380 <Led_Init+0x4c>
    1368:	22 c0       	rjmp	.+68     	; 0x13ae <Led_Init+0x7a>
    136a:	2a 81       	ldd	r18, Y+2	; 0x02
    136c:	3b 81       	ldd	r19, Y+3	; 0x03
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	91 f0       	breq	.+36     	; 0x1398 <Led_Init+0x64>
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	99 f0       	breq	.+38     	; 0x13a4 <Led_Init+0x70>
    137e:	17 c0       	rjmp	.+46     	; 0x13ae <Led_Init+0x7a>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	60 e1       	ldi	r22, 0x10	; 16
    1384:	4f ef       	ldi	r20, 0xFF	; 255
    1386:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
    138a:	11 c0       	rjmp	.+34     	; 0x13ae <Led_Init+0x7a>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	60 e2       	ldi	r22, 0x20	; 32
    1390:	4f ef       	ldi	r20, 0xFF	; 255
    1392:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <Led_Init+0x7a>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	60 e4       	ldi	r22, 0x40	; 64
    139c:	4f ef       	ldi	r20, 0xFF	; 255
    139e:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <Led_Init+0x7a>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	60 e8       	ldi	r22, 0x80	; 128
    13a8:	4f ef       	ldi	r20, 0xFF	; 255
    13aa:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
		break;
	default:

		break;
	}
}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <Led_On+0x6>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned on */
	switch(en_led_id)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3b 83       	std	Y+3, r19	; 0x03
    13d0:	2a 83       	std	Y+2, r18	; 0x02
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	91 05       	cpc	r25, r1
    13da:	d9 f0       	breq	.+54     	; 0x1412 <Led_On+0x58>
    13dc:	2a 81       	ldd	r18, Y+2	; 0x02
    13de:	3b 81       	ldd	r19, Y+3	; 0x03
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	2c f4       	brge	.+10     	; 0x13f0 <Led_On+0x36>
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	61 f0       	breq	.+24     	; 0x1406 <Led_On+0x4c>
    13ee:	22 c0       	rjmp	.+68     	; 0x1434 <Led_On+0x7a>
    13f0:	2a 81       	ldd	r18, Y+2	; 0x02
    13f2:	3b 81       	ldd	r19, Y+3	; 0x03
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	91 f0       	breq	.+36     	; 0x141e <Led_On+0x64>
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	83 30       	cpi	r24, 0x03	; 3
    1400:	91 05       	cpc	r25, r1
    1402:	99 f0       	breq	.+38     	; 0x142a <Led_On+0x70>
    1404:	17 c0       	rjmp	.+46     	; 0x1434 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, HIGH);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	60 e1       	ldi	r22, 0x10	; 16
    140a:	4f ef       	ldi	r20, 0xFF	; 255
    140c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
    1410:	11 c0       	rjmp	.+34     	; 0x1434 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, HIGH);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	60 e2       	ldi	r22, 0x20	; 32
    1416:	4f ef       	ldi	r20, 0xFF	; 255
    1418:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
    141c:	0b c0       	rjmp	.+22     	; 0x1434 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, HIGH);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	60 e4       	ldi	r22, 0x40	; 64
    1422:	4f ef       	ldi	r20, 0xFF	; 255
    1424:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, HIGH);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	60 e8       	ldi	r22, 0x80	; 128
    142e:	4f ef       	ldi	r20, 0xFF	; 255
    1430:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		break;
	default:

		break;
	}
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <Led_Off+0x6>
    1446:	0f 92       	push	r0
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned off */
	switch(en_led_id)
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3b 83       	std	Y+3, r19	; 0x03
    1456:	2a 83       	std	Y+2, r18	; 0x02
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	9b 81       	ldd	r25, Y+3	; 0x03
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	d9 f0       	breq	.+54     	; 0x1498 <Led_Off+0x58>
    1462:	2a 81       	ldd	r18, Y+2	; 0x02
    1464:	3b 81       	ldd	r19, Y+3	; 0x03
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	2c f4       	brge	.+10     	; 0x1476 <Led_Off+0x36>
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	9b 81       	ldd	r25, Y+3	; 0x03
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	61 f0       	breq	.+24     	; 0x148c <Led_Off+0x4c>
    1474:	22 c0       	rjmp	.+68     	; 0x14ba <Led_Off+0x7a>
    1476:	2a 81       	ldd	r18, Y+2	; 0x02
    1478:	3b 81       	ldd	r19, Y+3	; 0x03
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	91 f0       	breq	.+36     	; 0x14a4 <Led_Off+0x64>
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	9b 81       	ldd	r25, Y+3	; 0x03
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	91 05       	cpc	r25, r1
    1488:	99 f0       	breq	.+38     	; 0x14b0 <Led_Off+0x70>
    148a:	17 c0       	rjmp	.+46     	; 0x14ba <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	60 e1       	ldi	r22, 0x10	; 16
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
    1496:	11 c0       	rjmp	.+34     	; 0x14ba <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	60 e2       	ldi	r22, 0x20	; 32
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
    14a2:	0b c0       	rjmp	.+22     	; 0x14ba <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	60 e4       	ldi	r22, 0x40	; 64
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	60 e8       	ldi	r22, 0x80	; 128
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		break;
	default:

		break;
	}
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <Led_Toggle+0x6>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be toggled */
	switch(en_led_id)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3b 83       	std	Y+3, r19	; 0x03
    14dc:	2a 83       	std	Y+2, r18	; 0x02
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	9b 81       	ldd	r25, Y+3	; 0x03
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	91 05       	cpc	r25, r1
    14e6:	d1 f0       	breq	.+52     	; 0x151c <Led_Toggle+0x56>
    14e8:	2a 81       	ldd	r18, Y+2	; 0x02
    14ea:	3b 81       	ldd	r19, Y+3	; 0x03
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	2c f4       	brge	.+10     	; 0x14fc <Led_Toggle+0x36>
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	61 f0       	breq	.+24     	; 0x1512 <Led_Toggle+0x4c>
    14fa:	1e c0       	rjmp	.+60     	; 0x1538 <Led_Toggle+0x72>
    14fc:	2a 81       	ldd	r18, Y+2	; 0x02
    14fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <Led_Toggle+0x60>
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	9b 81       	ldd	r25, Y+3	; 0x03
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	91 05       	cpc	r25, r1
    150e:	81 f0       	breq	.+32     	; 0x1530 <Led_Toggle+0x6a>
    1510:	13 c0       	rjmp	.+38     	; 0x1538 <Led_Toggle+0x72>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	60 e1       	ldi	r22, 0x10	; 16
    1516:	0e 94 da 08 	call	0x11b4	; 0x11b4 <gpioPinToggle>
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <Led_Toggle+0x72>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	60 e2       	ldi	r22, 0x20	; 32
    1520:	0e 94 da 08 	call	0x11b4	; 0x11b4 <gpioPinToggle>
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <Led_Toggle+0x72>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	60 e4       	ldi	r22, 0x40	; 64
    152a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <gpioPinToggle>
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <Led_Toggle+0x72>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	60 e8       	ldi	r22, 0x80	; 128
    1534:	0e 94 da 08 	call	0x11b4	; 0x11b4 <gpioPinToggle>
		break;
	default:

		break;
	}
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <pushButtonInit>:
#include "pushButtonConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void pushButtonInit(En_buttonId_t en_button_id)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <pushButtonInit+0x6>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to be initialized */
	switch(en_button_id)
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3b 83       	std	Y+3, r19	; 0x03
    155a:	2a 83       	std	Y+2, r18	; 0x02
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	31 f0       	breq	.+12     	; 0x1570 <pushButtonInit+0x2c>
    1564:	2a 81       	ldd	r18, Y+2	; 0x02
    1566:	3b 81       	ldd	r19, Y+3	; 0x03
    1568:	21 30       	cpi	r18, 0x01	; 1
    156a:	31 05       	cpc	r19, r1
    156c:	39 f0       	breq	.+14     	; 0x157c <pushButtonInit+0x38>
    156e:	0b c0       	rjmp	.+22     	; 0x1586 <pushButtonInit+0x42>
	{
	case BTN_0:
		gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	60 e1       	ldi	r22, 0x10	; 16
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <pushButtonInit+0x42>
		break;
	case BTN_1:
		gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	64 e0       	ldi	r22, 0x04	; 4
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
		break;
	default:

		break;
	}
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <pushButtonUpdate>:

void pushButtonUpdate(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	/* Postponed */
}
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_button_id)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <pushButtonGetStatus+0x6>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <pushButtonGetStatus+0x8>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to read its status (pressed or released) */
	switch(en_button_id)
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3c 83       	std	Y+4, r19	; 0x04
    15b6:	2b 83       	std	Y+3, r18	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	71 f1       	breq	.+92     	; 0x161e <pushButtonGetStatus+0x7e>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <pushButtonGetStatus+0x36>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	61 f0       	breq	.+24     	; 0x15ec <pushButtonGetStatus+0x4c>
    15d4:	43 c0       	rjmp	.+134    	; 0x165c <pushButtonGetStatus+0xbc>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	c1 f1       	breq	.+112    	; 0x1650 <pushButtonGetStatus+0xb0>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	b1 f1       	breq	.+108    	; 0x1656 <pushButtonGetStatus+0xb6>
    15ea:	38 c0       	rjmp	.+112    	; 0x165c <pushButtonGetStatus+0xbc>
	{
	case BTN_0:
		if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    15ec:	82 e0       	ldi	r24, 0x02	; 2
    15ee:	60 e1       	ldi	r22, 0x10	; 16
    15f0:	0e 94 2b 09 	call	0x1256	; 0x1256 <gpioPinRead>
    15f4:	88 23       	and	r24, r24
    15f6:	89 f0       	breq	.+34     	; 0x161a <pushButtonGetStatus+0x7a>
		{
			softwareDelayMs(20);
    15f8:	64 e1       	ldi	r22, 0x14	; 20
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 10 0c 	call	0x1820	; 0x1820 <softwareDelayMs>
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	60 e1       	ldi	r22, 0x10	; 16
    1608:	0e 94 2b 09 	call	0x1256	; 0x1256 <gpioPinRead>
    160c:	88 23       	and	r24, r24
    160e:	19 f0       	breq	.+6      	; 0x1616 <pushButtonGetStatus+0x76>
			{
				return Pressed;
    1610:	92 e0       	ldi	r25, 0x02	; 2
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	25 c0       	rjmp	.+74     	; 0x1660 <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    1616:	1a 82       	std	Y+2, r1	; 0x02
    1618:	23 c0       	rjmp	.+70     	; 0x1660 <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    161a:	1a 82       	std	Y+2, r1	; 0x02
    161c:	21 c0       	rjmp	.+66     	; 0x1660 <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_1:
		if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	64 e0       	ldi	r22, 0x04	; 4
    1622:	0e 94 2b 09 	call	0x1256	; 0x1256 <gpioPinRead>
    1626:	88 23       	and	r24, r24
    1628:	89 f0       	breq	.+34     	; 0x164c <pushButtonGetStatus+0xac>
		{
			softwareDelayMs(20);
    162a:	64 e1       	ldi	r22, 0x14	; 20
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 10 0c 	call	0x1820	; 0x1820 <softwareDelayMs>
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	64 e0       	ldi	r22, 0x04	; 4
    163a:	0e 94 2b 09 	call	0x1256	; 0x1256 <gpioPinRead>
    163e:	88 23       	and	r24, r24
    1640:	19 f0       	breq	.+6      	; 0x1648 <pushButtonGetStatus+0xa8>
			{
				return Pressed;
    1642:	22 e0       	ldi	r18, 0x02	; 2
    1644:	2a 83       	std	Y+2, r18	; 0x02
    1646:	0c c0       	rjmp	.+24     	; 0x1660 <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    1648:	1a 82       	std	Y+2, r1	; 0x02
    164a:	0a c0       	rjmp	.+20     	; 0x1660 <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    164c:	1a 82       	std	Y+2, r1	; 0x02
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_2:
		return ERROR;
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	3a 83       	std	Y+2, r19	; 0x02
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <pushButtonGetStatus+0xc0>
		break;
	case BTN_3:
		return ERROR;
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	8a 83       	std	Y+2, r24	; 0x02
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <pushButtonGetStatus+0xc0>
		break;
	default:
		return ERROR;
    165c:	9f ef       	ldi	r25, 0xFF	; 255
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <sevenSegInit>:
static uint8_t gu8_sevenSeg1Status = HIGH;

/*- APIs IMPLEMENTATION ------------------------------------*/

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <sevenSegInit+0x6>
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be initialized */
	switch(a_segment_id)
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	3b 83       	std	Y+3, r19	; 0x03
    1686:	2a 83       	std	Y+2, r18	; 0x02
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	9b 81       	ldd	r25, Y+3	; 0x03
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	31 f0       	breq	.+12     	; 0x169c <sevenSegInit+0x2c>
    1690:	2a 81       	ldd	r18, Y+2	; 0x02
    1692:	3b 81       	ldd	r19, Y+3	; 0x03
    1694:	21 30       	cpi	r18, 0x01	; 1
    1696:	31 05       	cpc	r19, r1
    1698:	c9 f0       	breq	.+50     	; 0x16cc <sevenSegInit+0x5c>
    169a:	2f c0       	rjmp	.+94     	; 0x16fa <sevenSegInit+0x8a>
	{
	case SEG_0:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	6f e0       	ldi	r22, 0x0F	; 15
    16a0:	4f ef       	ldi	r20, 0xFF	; 255
    16a2:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT2 | BIT4), OUTPUT);
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	64 e1       	ldi	r22, 0x14	; 20
    16aa:	4f ef       	ldi	r20, 0xFF	; 255
    16ac:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	6f e0       	ldi	r22, 0x0F	; 15
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	60 e1       	ldi	r22, 0x10	; 16
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		sevenSegDisable(SEG_0);
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <sevenSegDisable>
    16ca:	17 c0       	rjmp	.+46     	; 0x16fa <sevenSegInit+0x8a>
		break;
	case SEG_1:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	6f e0       	ldi	r22, 0x0F	; 15
    16d0:	4f ef       	ldi	r20, 0xFF	; 255
    16d2:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT3 | BIT4), OUTPUT);
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	68 e1       	ldi	r22, 0x18	; 24
    16da:	4f ef       	ldi	r20, 0xFF	; 255
    16dc:	0e 94 02 08 	call	0x1004	; 0x1004 <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	6f e0       	ldi	r22, 0x0F	; 15
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    16ea:	83 e0       	ldi	r24, 0x03	; 3
    16ec:	60 e1       	ldi	r22, 0x10	; 16
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		sevenSegDisable(SEG_1);
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <sevenSegDisable>
		break;
	}
}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <sevenSegEnable>:

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <sevenSegEnable+0x6>
    170c:	0f 92       	push	r0
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be enabled */
	switch(en_segment_id)
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3b 83       	std	Y+3, r19	; 0x03
    171c:	2a 83       	std	Y+2, r18	; 0x02
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	9b 81       	ldd	r25, Y+3	; 0x03
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	31 f0       	breq	.+12     	; 0x1732 <sevenSegEnable+0x2c>
    1726:	2a 81       	ldd	r18, Y+2	; 0x02
    1728:	3b 81       	ldd	r19, Y+3	; 0x03
    172a:	21 30       	cpi	r18, 0x01	; 1
    172c:	31 05       	cpc	r19, r1
    172e:	51 f0       	breq	.+20     	; 0x1744 <sevenSegEnable+0x3e>
    1730:	11 c0       	rjmp	.+34     	; 0x1754 <sevenSegEnable+0x4e>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, LOW);
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	64 e0       	ldi	r22, 0x04	; 4
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		gu8_sevenSeg0Status = HIGH;
    173c:	8f ef       	ldi	r24, 0xFF	; 255
    173e:	80 93 6f 00 	sts	0x006F, r24
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <sevenSegEnable+0x4e>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, LOW);
    1744:	83 e0       	ldi	r24, 0x03	; 3
    1746:	68 e0       	ldi	r22, 0x08	; 8
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		gu8_sevenSeg1Status = HIGH;
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	80 93 60 00 	sts	0x0060, r24
		break;
	}
}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <sevenSegDisable+0x6>
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be disabled */
	switch(en_segment_id)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3b 83       	std	Y+3, r19	; 0x03
    1776:	2a 83       	std	Y+2, r18	; 0x02
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	9b 81       	ldd	r25, Y+3	; 0x03
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	31 f0       	breq	.+12     	; 0x178c <sevenSegDisable+0x2c>
    1780:	2a 81       	ldd	r18, Y+2	; 0x02
    1782:	3b 81       	ldd	r19, Y+3	; 0x03
    1784:	21 30       	cpi	r18, 0x01	; 1
    1786:	31 05       	cpc	r19, r1
    1788:	49 f0       	breq	.+18     	; 0x179c <sevenSegDisable+0x3c>
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <sevenSegDisable+0x4a>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, HIGH);
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	64 e0       	ldi	r22, 0x04	; 4
    1790:	4f ef       	ldi	r20, 0xFF	; 255
    1792:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		gu8_sevenSeg0Status = LOW;
    1796:	10 92 6f 00 	sts	0x006F, r1
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <sevenSegDisable+0x4a>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, HIGH);
    179c:	83 e0       	ldi	r24, 0x03	; 3
    179e:	68 e0       	ldi	r22, 0x08	; 8
    17a0:	4f ef       	ldi	r20, 0xFF	; 255
    17a2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <gpioPinWrite>
		gu8_sevenSeg1Status = LOW;
    17a6:	10 92 60 00 	sts	0x0060, r1
		break;
	}
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <sevenSegWrite+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <sevenSegWrite+0x8>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which 7seg to be written */
	switch(en_segment_id)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3c 83       	std	Y+4, r19	; 0x04
    17ce:	2b 83       	std	Y+3, r18	; 0x03
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <sevenSegWrite+0x2e>
    17d8:	2b 81       	ldd	r18, Y+3	; 0x03
    17da:	3c 81       	ldd	r19, Y+4	; 0x04
    17dc:	21 30       	cpi	r18, 0x01	; 1
    17de:	31 05       	cpc	r19, r1
    17e0:	69 f0       	breq	.+26     	; 0x17fc <sevenSegWrite+0x46>
    17e2:	17 c0       	rjmp	.+46     	; 0x1812 <sevenSegWrite+0x5c>
	{
	case SEG_0:
		if(gu8_sevenSeg0Status == HIGH)
    17e4:	80 91 6f 00 	lds	r24, 0x006F
    17e8:	8f 3f       	cpi	r24, 0xFF	; 255
    17ea:	99 f4       	brne	.+38     	; 0x1812 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	98 2f       	mov	r25, r24
    17f0:	9f 70       	andi	r25, 0x0F	; 15
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	69 2f       	mov	r22, r25
    17f6:	0e 94 32 07 	call	0xe64	; 0xe64 <gpioPortWrite>
    17fa:	0b c0       	rjmp	.+22     	; 0x1812 <sevenSegWrite+0x5c>
		}
		break;
	case SEG_1:
		if(gu8_sevenSeg1Status == HIGH)
    17fc:	80 91 60 00 	lds	r24, 0x0060
    1800:	8f 3f       	cpi	r24, 0xFF	; 255
    1802:	39 f4       	brne	.+14     	; 0x1812 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	98 2f       	mov	r25, r24
    1808:	9f 70       	andi	r25, 0x0F	; 15
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	69 2f       	mov	r22, r25
    180e:	0e 94 32 07 	call	0xe64	; 0xe64 <gpioPortWrite>
		}
		break;
	}
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <softwareDelayMs>:
#include "softwareDelay.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	60 97       	sbiw	r28, 0x10	; 16
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	6d 87       	std	Y+13, r22	; 0x0d
    1836:	7e 87       	std	Y+14, r23	; 0x0e
    1838:	8f 87       	std	Y+15, r24	; 0x0f
    183a:	98 8b       	std	Y+16, r25	; 0x10
	/* 16 MHz */
	uint32_t ticks=2276, i, j;
    183c:	84 ee       	ldi	r24, 0xE4	; 228
    183e:	98 e0       	ldi	r25, 0x08	; 8
    1840:	a0 e0       	ldi	r26, 0x00	; 0
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	89 87       	std	Y+9, r24	; 0x09
    1846:	9a 87       	std	Y+10, r25	; 0x0a
    1848:	ab 87       	std	Y+11, r26	; 0x0b
    184a:	bc 87       	std	Y+12, r27	; 0x0c
	for(i=0 ; i<u32_delay_in_ms ; i++)
    184c:	1d 82       	std	Y+5, r1	; 0x05
    184e:	1e 82       	std	Y+6, r1	; 0x06
    1850:	1f 82       	std	Y+7, r1	; 0x07
    1852:	18 86       	std	Y+8, r1	; 0x08
    1854:	28 c0       	rjmp	.+80     	; 0x18a6 <softwareDelayMs+0x86>
	{
		for(j=0 ; j<ticks ; j++);
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	1a 82       	std	Y+2, r1	; 0x02
    185a:	1b 82       	std	Y+3, r1	; 0x03
    185c:	1c 82       	std	Y+4, r1	; 0x04
    185e:	0b c0       	rjmp	.+22     	; 0x1876 <softwareDelayMs+0x56>
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	ab 81       	ldd	r26, Y+3	; 0x03
    1866:	bc 81       	ldd	r27, Y+4	; 0x04
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	a1 1d       	adc	r26, r1
    186c:	b1 1d       	adc	r27, r1
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	ab 83       	std	Y+3, r26	; 0x03
    1874:	bc 83       	std	Y+4, r27	; 0x04
    1876:	29 81       	ldd	r18, Y+1	; 0x01
    1878:	3a 81       	ldd	r19, Y+2	; 0x02
    187a:	4b 81       	ldd	r20, Y+3	; 0x03
    187c:	5c 81       	ldd	r21, Y+4	; 0x04
    187e:	89 85       	ldd	r24, Y+9	; 0x09
    1880:	9a 85       	ldd	r25, Y+10	; 0x0a
    1882:	ab 85       	ldd	r26, Y+11	; 0x0b
    1884:	bc 85       	ldd	r27, Y+12	; 0x0c
    1886:	28 17       	cp	r18, r24
    1888:	39 07       	cpc	r19, r25
    188a:	4a 07       	cpc	r20, r26
    188c:	5b 07       	cpc	r21, r27
    188e:	40 f3       	brcs	.-48     	; 0x1860 <softwareDelayMs+0x40>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	/* 16 MHz */
	uint32_t ticks=2276, i, j;
	for(i=0 ; i<u32_delay_in_ms ; i++)
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	af 81       	ldd	r26, Y+7	; 0x07
    1896:	b8 85       	ldd	r27, Y+8	; 0x08
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	a1 1d       	adc	r26, r1
    189c:	b1 1d       	adc	r27, r1
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	af 83       	std	Y+7, r26	; 0x07
    18a4:	b8 87       	std	Y+8, r27	; 0x08
    18a6:	2d 81       	ldd	r18, Y+5	; 0x05
    18a8:	3e 81       	ldd	r19, Y+6	; 0x06
    18aa:	4f 81       	ldd	r20, Y+7	; 0x07
    18ac:	58 85       	ldd	r21, Y+8	; 0x08
    18ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b2:	af 85       	ldd	r26, Y+15	; 0x0f
    18b4:	b8 89       	ldd	r27, Y+16	; 0x10
    18b6:	28 17       	cp	r18, r24
    18b8:	39 07       	cpc	r19, r25
    18ba:	4a 07       	cpc	r20, r26
    18bc:	5b 07       	cpc	r21, r27
    18be:	58 f2       	brcs	.-106    	; 0x1856 <softwareDelayMs+0x36>
	{
		for(j=0 ; j<ticks ; j++);
	}
}
    18c0:	60 96       	adiw	r28, 0x10	; 16
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <__vector_10>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(TIMER0_COMP_vect)
{
    18d2:	1f 92       	push	r1
    18d4:	0f 92       	push	r0
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	0f 92       	push	r0
    18da:	11 24       	eor	r1, r1
    18dc:	2f 93       	push	r18
    18de:	3f 93       	push	r19
    18e0:	4f 93       	push	r20
    18e2:	5f 93       	push	r21
    18e4:	6f 93       	push	r22
    18e6:	7f 93       	push	r23
    18e8:	8f 93       	push	r24
    18ea:	9f 93       	push	r25
    18ec:	af 93       	push	r26
    18ee:	bf 93       	push	r27
    18f0:	ef 93       	push	r30
    18f2:	ff 93       	push	r31
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_CTC_callBackPtr != NULL)
    18fc:	80 91 72 00 	lds	r24, 0x0072
    1900:	90 91 73 00 	lds	r25, 0x0073
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	29 f0       	breq	.+10     	; 0x1912 <__vector_10+0x40>
	{
		g_T0_CTC_callBackPtr();
    1908:	e0 91 72 00 	lds	r30, 0x0072
    190c:	f0 91 73 00 	lds	r31, 0x0073
    1910:	09 95       	icall
	}
}
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	ff 91       	pop	r31
    1918:	ef 91       	pop	r30
    191a:	bf 91       	pop	r27
    191c:	af 91       	pop	r26
    191e:	9f 91       	pop	r25
    1920:	8f 91       	pop	r24
    1922:	7f 91       	pop	r23
    1924:	6f 91       	pop	r22
    1926:	5f 91       	pop	r21
    1928:	4f 91       	pop	r20
    192a:	3f 91       	pop	r19
    192c:	2f 91       	pop	r18
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1938:	1f 92       	push	r1
    193a:	0f 92       	push	r0
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	0f 92       	push	r0
    1940:	11 24       	eor	r1, r1
    1942:	2f 93       	push	r18
    1944:	3f 93       	push	r19
    1946:	4f 93       	push	r20
    1948:	5f 93       	push	r21
    194a:	6f 93       	push	r22
    194c:	7f 93       	push	r23
    194e:	8f 93       	push	r24
    1950:	9f 93       	push	r25
    1952:	af 93       	push	r26
    1954:	bf 93       	push	r27
    1956:	ef 93       	push	r30
    1958:	ff 93       	push	r31
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_OVF_callBackPtr != NULL)
    1962:	80 91 74 00 	lds	r24, 0x0074
    1966:	90 91 75 00 	lds	r25, 0x0075
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	29 f0       	breq	.+10     	; 0x1978 <__vector_11+0x40>
	{
		g_T0_OVF_callBackPtr();
    196e:	e0 91 74 00 	lds	r30, 0x0074
    1972:	f0 91 75 00 	lds	r31, 0x0075
    1976:	09 95       	icall
	}
}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	ff 91       	pop	r31
    197e:	ef 91       	pop	r30
    1980:	bf 91       	pop	r27
    1982:	af 91       	pop	r26
    1984:	9f 91       	pop	r25
    1986:	8f 91       	pop	r24
    1988:	7f 91       	pop	r23
    198a:	6f 91       	pop	r22
    198c:	5f 91       	pop	r21
    198e:	4f 91       	pop	r20
    1990:	3f 91       	pop	r19
    1992:	2f 91       	pop	r18
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	2f 93       	push	r18
    19aa:	3f 93       	push	r19
    19ac:	4f 93       	push	r20
    19ae:	5f 93       	push	r21
    19b0:	6f 93       	push	r22
    19b2:	7f 93       	push	r23
    19b4:	8f 93       	push	r24
    19b6:	9f 93       	push	r25
    19b8:	af 93       	push	r26
    19ba:	bf 93       	push	r27
    19bc:	ef 93       	push	r30
    19be:	ff 93       	push	r31
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_ICU_callBackPtr != NULL)
    19c8:	80 91 76 00 	lds	r24, 0x0076
    19cc:	90 91 77 00 	lds	r25, 0x0077
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	29 f0       	breq	.+10     	; 0x19de <__vector_6+0x40>
	{
		g_T1_ICU_callBackPtr();
    19d4:	e0 91 76 00 	lds	r30, 0x0076
    19d8:	f0 91 77 00 	lds	r31, 0x0077
    19dc:	09 95       	icall
	}
}
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	ff 91       	pop	r31
    19e4:	ef 91       	pop	r30
    19e6:	bf 91       	pop	r27
    19e8:	af 91       	pop	r26
    19ea:	9f 91       	pop	r25
    19ec:	8f 91       	pop	r24
    19ee:	7f 91       	pop	r23
    19f0:	6f 91       	pop	r22
    19f2:	5f 91       	pop	r21
    19f4:	4f 91       	pop	r20
    19f6:	3f 91       	pop	r19
    19f8:	2f 91       	pop	r18
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	0f 90       	pop	r0
    1a00:	1f 90       	pop	r1
    1a02:	18 95       	reti

00001a04 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1a04:	1f 92       	push	r1
    1a06:	0f 92       	push	r0
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	0f 92       	push	r0
    1a0c:	11 24       	eor	r1, r1
    1a0e:	2f 93       	push	r18
    1a10:	3f 93       	push	r19
    1a12:	4f 93       	push	r20
    1a14:	5f 93       	push	r21
    1a16:	6f 93       	push	r22
    1a18:	7f 93       	push	r23
    1a1a:	8f 93       	push	r24
    1a1c:	9f 93       	push	r25
    1a1e:	af 93       	push	r26
    1a20:	bf 93       	push	r27
    1a22:	ef 93       	push	r30
    1a24:	ff 93       	push	r31
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_A_callBackPtr != NULL)
    1a2e:	80 91 78 00 	lds	r24, 0x0078
    1a32:	90 91 79 00 	lds	r25, 0x0079
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	29 f0       	breq	.+10     	; 0x1a44 <__vector_7+0x40>
	{
		g_T1_CTC_A_callBackPtr();
    1a3a:	e0 91 78 00 	lds	r30, 0x0078
    1a3e:	f0 91 79 00 	lds	r31, 0x0079
    1a42:	09 95       	icall
	}
}
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	ff 91       	pop	r31
    1a4a:	ef 91       	pop	r30
    1a4c:	bf 91       	pop	r27
    1a4e:	af 91       	pop	r26
    1a50:	9f 91       	pop	r25
    1a52:	8f 91       	pop	r24
    1a54:	7f 91       	pop	r23
    1a56:	6f 91       	pop	r22
    1a58:	5f 91       	pop	r21
    1a5a:	4f 91       	pop	r20
    1a5c:	3f 91       	pop	r19
    1a5e:	2f 91       	pop	r18
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	0f 90       	pop	r0
    1a66:	1f 90       	pop	r1
    1a68:	18 95       	reti

00001a6a <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1a6a:	1f 92       	push	r1
    1a6c:	0f 92       	push	r0
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	0f 92       	push	r0
    1a72:	11 24       	eor	r1, r1
    1a74:	2f 93       	push	r18
    1a76:	3f 93       	push	r19
    1a78:	4f 93       	push	r20
    1a7a:	5f 93       	push	r21
    1a7c:	6f 93       	push	r22
    1a7e:	7f 93       	push	r23
    1a80:	8f 93       	push	r24
    1a82:	9f 93       	push	r25
    1a84:	af 93       	push	r26
    1a86:	bf 93       	push	r27
    1a88:	ef 93       	push	r30
    1a8a:	ff 93       	push	r31
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_B_callBackPtr != NULL)
    1a94:	80 91 7a 00 	lds	r24, 0x007A
    1a98:	90 91 7b 00 	lds	r25, 0x007B
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	29 f0       	breq	.+10     	; 0x1aaa <__vector_8+0x40>
	{
		g_T1_CTC_B_callBackPtr();
    1aa0:	e0 91 7a 00 	lds	r30, 0x007A
    1aa4:	f0 91 7b 00 	lds	r31, 0x007B
    1aa8:	09 95       	icall
	}
}
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	ff 91       	pop	r31
    1ab0:	ef 91       	pop	r30
    1ab2:	bf 91       	pop	r27
    1ab4:	af 91       	pop	r26
    1ab6:	9f 91       	pop	r25
    1ab8:	8f 91       	pop	r24
    1aba:	7f 91       	pop	r23
    1abc:	6f 91       	pop	r22
    1abe:	5f 91       	pop	r21
    1ac0:	4f 91       	pop	r20
    1ac2:	3f 91       	pop	r19
    1ac4:	2f 91       	pop	r18
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	0f 90       	pop	r0
    1acc:	1f 90       	pop	r1
    1ace:	18 95       	reti

00001ad0 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1ad0:	1f 92       	push	r1
    1ad2:	0f 92       	push	r0
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	0f 92       	push	r0
    1ad8:	11 24       	eor	r1, r1
    1ada:	2f 93       	push	r18
    1adc:	3f 93       	push	r19
    1ade:	4f 93       	push	r20
    1ae0:	5f 93       	push	r21
    1ae2:	6f 93       	push	r22
    1ae4:	7f 93       	push	r23
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	af 93       	push	r26
    1aec:	bf 93       	push	r27
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_OVF_callBackPtr != NULL)
    1afa:	80 91 7c 00 	lds	r24, 0x007C
    1afe:	90 91 7d 00 	lds	r25, 0x007D
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	29 f0       	breq	.+10     	; 0x1b10 <__vector_9+0x40>
	{
		g_T1_OVF_callBackPtr();
    1b06:	e0 91 7c 00 	lds	r30, 0x007C
    1b0a:	f0 91 7d 00 	lds	r31, 0x007D
    1b0e:	09 95       	icall
	}
}
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	ff 91       	pop	r31
    1b16:	ef 91       	pop	r30
    1b18:	bf 91       	pop	r27
    1b1a:	af 91       	pop	r26
    1b1c:	9f 91       	pop	r25
    1b1e:	8f 91       	pop	r24
    1b20:	7f 91       	pop	r23
    1b22:	6f 91       	pop	r22
    1b24:	5f 91       	pop	r21
    1b26:	4f 91       	pop	r20
    1b28:	3f 91       	pop	r19
    1b2a:	2f 91       	pop	r18
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1b36:	1f 92       	push	r1
    1b38:	0f 92       	push	r0
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	0f 92       	push	r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	2f 93       	push	r18
    1b42:	3f 93       	push	r19
    1b44:	4f 93       	push	r20
    1b46:	5f 93       	push	r21
    1b48:	6f 93       	push	r22
    1b4a:	7f 93       	push	r23
    1b4c:	8f 93       	push	r24
    1b4e:	9f 93       	push	r25
    1b50:	af 93       	push	r26
    1b52:	bf 93       	push	r27
    1b54:	ef 93       	push	r30
    1b56:	ff 93       	push	r31
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_CTC_callBackPtr != NULL)
    1b60:	80 91 7e 00 	lds	r24, 0x007E
    1b64:	90 91 7f 00 	lds	r25, 0x007F
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	29 f0       	breq	.+10     	; 0x1b76 <__vector_4+0x40>
	{
		g_T2_CTC_callBackPtr();
    1b6c:	e0 91 7e 00 	lds	r30, 0x007E
    1b70:	f0 91 7f 00 	lds	r31, 0x007F
    1b74:	09 95       	icall
	}
}
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	ff 91       	pop	r31
    1b7c:	ef 91       	pop	r30
    1b7e:	bf 91       	pop	r27
    1b80:	af 91       	pop	r26
    1b82:	9f 91       	pop	r25
    1b84:	8f 91       	pop	r24
    1b86:	7f 91       	pop	r23
    1b88:	6f 91       	pop	r22
    1b8a:	5f 91       	pop	r21
    1b8c:	4f 91       	pop	r20
    1b8e:	3f 91       	pop	r19
    1b90:	2f 91       	pop	r18
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	0f 90       	pop	r0
    1b98:	1f 90       	pop	r1
    1b9a:	18 95       	reti

00001b9c <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1b9c:	1f 92       	push	r1
    1b9e:	0f 92       	push	r0
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	0f 92       	push	r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	2f 93       	push	r18
    1ba8:	3f 93       	push	r19
    1baa:	4f 93       	push	r20
    1bac:	5f 93       	push	r21
    1bae:	6f 93       	push	r22
    1bb0:	7f 93       	push	r23
    1bb2:	8f 93       	push	r24
    1bb4:	9f 93       	push	r25
    1bb6:	af 93       	push	r26
    1bb8:	bf 93       	push	r27
    1bba:	ef 93       	push	r30
    1bbc:	ff 93       	push	r31
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_OVF_callBackPtr != NULL)
    1bc6:	80 91 80 00 	lds	r24, 0x0080
    1bca:	90 91 81 00 	lds	r25, 0x0081
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	29 f0       	breq	.+10     	; 0x1bdc <__vector_5+0x40>
	{
		g_T2_OVF_callBackPtr();
    1bd2:	e0 91 80 00 	lds	r30, 0x0080
    1bd6:	f0 91 81 00 	lds	r31, 0x0081
    1bda:	09 95       	icall
	}
}
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <timer0Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    1c02:	ef 92       	push	r14
    1c04:	0f 93       	push	r16
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <timer0Init+0xa>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <timer0Init+0xc>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <timer0Init+0xe>
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	6a 83       	std	Y+2, r22	; 0x02
    1c18:	4b 83       	std	Y+3, r20	; 0x03
    1c1a:	2c 83       	std	Y+4, r18	; 0x04
    1c1c:	0d 83       	std	Y+5, r16	; 0x05
    1c1e:	ee 82       	std	Y+6, r14	; 0x06
	/* Non-PWM mode */
	SET_BIT(TCCR0, FOC0);
    1c20:	a3 e5       	ldi	r26, 0x53	; 83
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e3 e5       	ldi	r30, 0x53	; 83
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 68       	ori	r24, 0x80	; 128
    1c2c:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR0 = (TCCR0 & 0xB7) | (en_mode);
    1c2e:	a3 e5       	ldi	r26, 0x53	; 83
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e3 e5       	ldi	r30, 0x53	; 83
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	98 2f       	mov	r25, r24
    1c3a:	97 7b       	andi	r25, 0xB7	; 183
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	89 2b       	or	r24, r25
    1c40:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR0 = (TCCR0 & 0xCF) | (en_OC0);
    1c42:	a3 e5       	ldi	r26, 0x53	; 83
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e3 e5       	ldi	r30, 0x53	; 83
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	98 2f       	mov	r25, r24
    1c4e:	9f 7c       	andi	r25, 0xCF	; 207
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	89 2b       	or	r24, r25
    1c54:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	80 93 70 00 	sts	0x0070, r24

	/* Set the timer/counter0 initial value */
	TCNT0 = u8_initialValue;
    1c5c:	e2 e5       	ldi	r30, 0x52	; 82
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR0 = u8_outputCompare;
    1c64:	ec e5       	ldi	r30, 0x5C	; 92
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xFC) | (en_interruptMask);
    1c6c:	a9 e5       	ldi	r26, 0x59	; 89
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e9 e5       	ldi	r30, 0x59	; 89
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	98 2f       	mov	r25, r24
    1c78:	9c 7f       	andi	r25, 0xFC	; 252
    1c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7c:	89 2b       	or	r24, r25
    1c7e:	8c 93       	st	X, r24
}
    1c80:	26 96       	adiw	r28, 0x06	; 6
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	0f 91       	pop	r16
    1c92:	ef 90       	pop	r14
    1c94:	08 95       	ret

00001c96 <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	0f 92       	push	r0
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter0 custom value */
	TCNT0 = u8_value;
    1ca2:	e2 e5       	ldi	r30, 0x52	; 82
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	80 83       	st	Z, r24
}
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <timer0Read>:

uint8_t timer0Read(void)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT0;
    1cba:	e2 e5       	ldi	r30, 0x52	; 82
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
}
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <timer0Start>:

void timer0Start(void)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR0 = (TCCR0 & 0xF8) | (gu8_timer0Timer1PreScaler);
    1cce:	a3 e5       	ldi	r26, 0x53	; 83
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e3 e5       	ldi	r30, 0x53	; 83
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	98 2f       	mov	r25, r24
    1cda:	98 7f       	andi	r25, 0xF8	; 248
    1cdc:	80 91 70 00 	lds	r24, 0x0070
    1ce0:	89 2b       	or	r24, r25
    1ce2:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT0 = 0;
    1ce4:	e2 e5       	ldi	r30, 0x52	; 82
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	10 82       	st	Z, r1
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <timer0Stop>:

void timer0Stop(void)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR0 &= ~((1 << CS00) | (1 << CS01) | (1 << CS02));
    1cf8:	a3 e5       	ldi	r26, 0x53	; 83
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e3 e5       	ldi	r30, 0x53	; 83
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	88 7f       	andi	r24, 0xF8	; 248
    1d04:	8c 93       	st	X, r24
}
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    1d0c:	ef 92       	push	r14
    1d0e:	0f 93       	push	r16
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <timer0DelayMs+0xa>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <timer0DelayMs+0xc>
    1d18:	0f 92       	push	r0
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	9d 83       	std	Y+5, r25	; 0x05
    1d20:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    1d22:	1b 82       	std	Y+3, r1	; 0x03
    1d24:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    1d26:	8a ef       	ldi	r24, 0xFA	; 250
    1d28:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	43 e0       	ldi	r20, 0x03	; 3
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	00 e0       	ldi	r16, 0x00	; 0
    1d34:	ee 24       	eor	r14, r14
    1d36:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <timer0Init>
	timer0Start();
    1d3a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <timer0Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1d3e:	1b 82       	std	Y+3, r1	; 0x03
    1d40:	1a 82       	std	Y+2, r1	; 0x02
    1d42:	0e c0       	rjmp	.+28     	; 0x1d60 <timer0DelayMs+0x54>
	{
		while(TCNT0 < u8_outputCompare);
    1d44:	e2 e5       	ldi	r30, 0x52	; 82
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	90 81       	ld	r25, Z
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	98 17       	cp	r25, r24
    1d4e:	d0 f3       	brcs	.-12     	; 0x1d44 <timer0DelayMs+0x38>
		TCNT0 = 0;
    1d50:	e2 e5       	ldi	r30, 0x52	; 82
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
	timer0Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	9b 83       	std	Y+3, r25	; 0x03
    1d5e:	8a 83       	std	Y+2, r24	; 0x02
    1d60:	2a 81       	ldd	r18, Y+2	; 0x02
    1d62:	3b 81       	ldd	r19, Y+3	; 0x03
    1d64:	8c 81       	ldd	r24, Y+4	; 0x04
    1d66:	9d 81       	ldd	r25, Y+5	; 0x05
    1d68:	28 17       	cp	r18, r24
    1d6a:	39 07       	cpc	r19, r25
    1d6c:	58 f3       	brcs	.-42     	; 0x1d44 <timer0DelayMs+0x38>
	{
		while(TCNT0 < u8_outputCompare);
		TCNT0 = 0;
	}
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	0f 91       	pop	r16
    1d7e:	ef 90       	pop	r14
    1d80:	08 95       	ret

00001d82 <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    1d82:	ef 92       	push	r14
    1d84:	0f 93       	push	r16
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	29 97       	sbiw	r28, 0x09	; 9
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	6e 83       	std	Y+6, r22	; 0x06
    1d9c:	7f 83       	std	Y+7, r23	; 0x07
    1d9e:	88 87       	std	Y+8, r24	; 0x08
    1da0:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    1da2:	1a 82       	std	Y+2, r1	; 0x02
    1da4:	1b 82       	std	Y+3, r1	; 0x03
    1da6:	1c 82       	std	Y+4, r1	; 0x04
    1da8:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    1daa:	80 e1       	ldi	r24, 0x10	; 16
    1dac:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
    1dae:	88 e0       	ldi	r24, 0x08	; 8
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	09 81       	ldd	r16, Y+1	; 0x01
    1db8:	ee 24       	eor	r14, r14
    1dba:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <timer0Init>
	timer0Start();
    1dbe:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <timer0Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1dc2:	1a 82       	std	Y+2, r1	; 0x02
    1dc4:	1b 82       	std	Y+3, r1	; 0x03
    1dc6:	1c 82       	std	Y+4, r1	; 0x04
    1dc8:	1d 82       	std	Y+5, r1	; 0x05
    1dca:	1e c0       	rjmp	.+60     	; 0x1e08 <timer0DelayUs+0x86>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
    1dcc:	e8 e5       	ldi	r30, 0x58	; 88
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	88 2f       	mov	r24, r24
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	82 70       	andi	r24, 0x02	; 2
    1dd8:	90 70       	andi	r25, 0x00	; 0
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	b9 f3       	breq	.-18     	; 0x1dcc <timer0DelayUs+0x4a>
		SET_BIT(TIFR, OCF0);
    1dde:	a8 e5       	ldi	r26, 0x58	; 88
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e8 e5       	ldi	r30, 0x58	; 88
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	82 60       	ori	r24, 0x02	; 2
    1dea:	8c 93       	st	X, r24
		TCNT0 = 0;
    1dec:	e2 e5       	ldi	r30, 0x52	; 82
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
	timer0Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	ac 81       	ldd	r26, Y+4	; 0x04
    1df8:	bd 81       	ldd	r27, Y+5	; 0x05
    1dfa:	01 96       	adiw	r24, 0x01	; 1
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	b1 1d       	adc	r27, r1
    1e00:	8a 83       	std	Y+2, r24	; 0x02
    1e02:	9b 83       	std	Y+3, r25	; 0x03
    1e04:	ac 83       	std	Y+4, r26	; 0x04
    1e06:	bd 83       	std	Y+5, r27	; 0x05
    1e08:	2a 81       	ldd	r18, Y+2	; 0x02
    1e0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e0c:	4c 81       	ldd	r20, Y+4	; 0x04
    1e0e:	5d 81       	ldd	r21, Y+5	; 0x05
    1e10:	8e 81       	ldd	r24, Y+6	; 0x06
    1e12:	9f 81       	ldd	r25, Y+7	; 0x07
    1e14:	a8 85       	ldd	r26, Y+8	; 0x08
    1e16:	b9 85       	ldd	r27, Y+9	; 0x09
    1e18:	28 17       	cp	r18, r24
    1e1a:	39 07       	cpc	r19, r25
    1e1c:	4a 07       	cpc	r20, r26
    1e1e:	5b 07       	cpc	r21, r27
    1e20:	a8 f2       	brcs	.-86     	; 0x1dcc <timer0DelayUs+0x4a>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
		SET_BIT(TIFR, OCF0);
		TCNT0 = 0;
	}
}
    1e22:	29 96       	adiw	r28, 0x09	; 9
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	0f 91       	pop	r16
    1e34:	ef 90       	pop	r14
    1e36:	08 95       	ret

00001e38 <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1e38:	ef 92       	push	r14
    1e3a:	0f 93       	push	r16
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <timer0SwPWM+0xa>
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <timer0SwPWM+0xc>
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	6c 83       	std	Y+4, r22	; 0x04
	/* Two variables to hold the values of output compare and prescaler */
	uint8_t u8_outputCompare, u8_prescaler;

	/* Enable global interrupt */
	sei();
    1e4c:	78 94       	sei
	
	/* If condition to determine the right equation to calculate prescaler and output compare values */
	if(u8_frequency <= 80)
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	81 35       	cpi	r24, 0x51	; 81
    1e52:	e8 f4       	brcc	.+58     	; 0x1e8e <timer0SwPWM+0x56>
	{
		u8_prescaler = T0_PRESCALER_64;
    1e54:	83 e0       	ldi	r24, 0x03	; 3
    1e56:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a0 e0       	ldi	r26, 0x00	; 0
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	39 e1       	ldi	r19, 0x19	; 25
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsi3>
    1e72:	9b 01       	movw	r18, r22
    1e74:	ac 01       	movw	r20, r24
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	94 e2       	ldi	r25, 0x24	; 36
    1e7a:	a4 ef       	ldi	r26, 0xF4	; 244
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodsi4>
    1e86:	da 01       	movw	r26, r20
    1e88:	c9 01       	movw	r24, r18
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
    1e8c:	1c c0       	rjmp	.+56     	; 0x1ec6 <timer0SwPWM+0x8e>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    1e8e:	82 e0       	ldi	r24, 0x02	; 2
    1e90:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e0       	ldi	r26, 0x00	; 0
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	20 e2       	ldi	r18, 0x20	; 32
    1e9e:	33 e0       	ldi	r19, 0x03	; 3
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsi3>
    1eac:	9b 01       	movw	r18, r22
    1eae:	ac 01       	movw	r20, r24
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	94 e2       	ldi	r25, 0x24	; 36
    1eb4:	a4 ef       	ldi	r26, 0xF4	; 244
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodsi4>
    1ec0:	da 01       	movw	r26, r20
    1ec2:	c9 01       	movw	r24, r18
    1ec4:	8a 83       	std	Y+2, r24	; 0x02
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}
	
	/* Initialize the timer depending on the previously calculated values */
	timer0Init(T0_COMP_MODE, T0_OC0_DIS, u8_prescaler, 0, u8_outputCompare, T0_INTERRUPT_CMP);
    1ec6:	88 e0       	ldi	r24, 0x08	; 8
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	49 81       	ldd	r20, Y+1	; 0x01
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	0a 81       	ldd	r16, Y+2	; 0x02
    1ed0:	ee 24       	eor	r14, r14
    1ed2:	68 94       	set
    1ed4:	e1 f8       	bld	r14, 1
    1ed6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <timer0Init>
	
	/* Provide the clock to the timer */
	timer0Start();
    1eda:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <timer0Start>
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	0f 91       	pop	r16
    1eec:	ef 90       	pop	r14
    1eee:	08 95       	ret

00001ef0 <Timer0_OVF_setCallBack>:

void Timer0_OVF_setCallBack(void(*local_ptr)(void))
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <Timer0_OVF_setCallBack+0x6>
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
	g_T0_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	90 93 75 00 	sts	0x0075, r25
    1f06:	80 93 74 00 	sts	0x0074, r24
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <Timer0_CTC_setCallBack>:

void Timer0_CTC_setCallBack(void(*local_ptr)(void))
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <Timer0_CTC_setCallBack+0x6>
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
	g_T0_CTC_callBackPtr = (volatile void(*)(void))local_ptr;
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	90 93 73 00 	sts	0x0073, r25
    1f2a:	80 93 72 00 	sts	0x0072, r24
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <timer1Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC1,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    1f38:	af 92       	push	r10
    1f3a:	cf 92       	push	r12
    1f3c:	df 92       	push	r13
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	2d 97       	sbiw	r28, 0x0d	; 13
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	7b 83       	std	Y+3, r23	; 0x03
    1f5e:	6a 83       	std	Y+2, r22	; 0x02
    1f60:	4c 83       	std	Y+4, r20	; 0x04
    1f62:	3e 83       	std	Y+6, r19	; 0x06
    1f64:	2d 83       	std	Y+5, r18	; 0x05
    1f66:	18 87       	std	Y+8, r17	; 0x08
    1f68:	0f 83       	std	Y+7, r16	; 0x07
    1f6a:	fa 86       	std	Y+10, r15	; 0x0a
    1f6c:	e9 86       	std	Y+9, r14	; 0x09
    1f6e:	dc 86       	std	Y+12, r13	; 0x0c
    1f70:	cb 86       	std	Y+11, r12	; 0x0b
    1f72:	ad 86       	std	Y+13, r10	; 0x0d
	/* Non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    1f74:	af e4       	ldi	r26, 0x4F	; 79
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	ef e4       	ldi	r30, 0x4F	; 79
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	88 60       	ori	r24, 0x08	; 8
    1f80:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    1f82:	af e4       	ldi	r26, 0x4F	; 79
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	ef e4       	ldi	r30, 0x4F	; 79
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	84 60       	ori	r24, 0x04	; 4
    1f8e:	8c 93       	st	X, r24

	TCCR1 = 0x0000;
    1f90:	ee e4       	ldi	r30, 0x4E	; 78
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	11 82       	std	Z+1, r1	; 0x01
    1f96:	10 82       	st	Z, r1

	/* Set the required operating mode */
	TCCR1 = en_mode | en_OC1;
    1f98:	ee e4       	ldi	r30, 0x4E	; 78
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	82 2b       	or	r24, r18
    1fa8:	93 2b       	or	r25, r19
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    1fae:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb0:	80 93 70 00 	sts	0x0070, r24

	/* Set the timer/counter0 initial value */
	TCNT1 = u16_initialValue;
    1fb4:	ec e4       	ldi	r30, 0x4C	; 76
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR1A = u16_outputCompareA;
    1fc0:	ea e4       	ldi	r30, 0x4A	; 74
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc6:	98 85       	ldd	r25, Y+8	; 0x08
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
	OCR1B = u16_outputCompareB;
    1fcc:	e8 e4       	ldi	r30, 0x48	; 72
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xC3) | (en_interruptMask);
    1fd8:	a9 e5       	ldi	r26, 0x59	; 89
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e9 e5       	ldi	r30, 0x59	; 89
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	93 7c       	andi	r25, 0xC3	; 195
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	89 2b       	or	r24, r25
    1fea:	8c 93       	st	X, r24
}
    1fec:	2d 96       	adiw	r28, 0x0d	; 13
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	df 90       	pop	r13
    2006:	cf 90       	pop	r12
    2008:	af 90       	pop	r10
    200a:	08 95       	ret

0000200c <timer1Set>:

void timer1Set(uint16_t u16_value)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <timer1Set+0x6>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter1 custom value */
	TCNT1 = u16_value;
    201a:	ec e4       	ldi	r30, 0x4C	; 76
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <timer1Read>:

uint16_t timer1Read(void)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT1;
    2038:	ec e4       	ldi	r30, 0x4C	; 76
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <timer1Start>:

void timer1Start(void)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (gu8_timer0Timer1PreScaler);
    204e:	ae e4       	ldi	r26, 0x4E	; 78
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	ee e4       	ldi	r30, 0x4E	; 78
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	98 2f       	mov	r25, r24
    205a:	98 7f       	andi	r25, 0xF8	; 248
    205c:	80 91 70 00 	lds	r24, 0x0070
    2060:	89 2b       	or	r24, r25
    2062:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT1 = 0;
    2064:	ec e4       	ldi	r30, 0x4C	; 76
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	11 82       	std	Z+1, r1	; 0x01
    206a:	10 82       	st	Z, r1
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <timer1Stop>:

void timer1Stop(void)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
    207a:	ae e4       	ldi	r26, 0x4E	; 78
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	ee e4       	ldi	r30, 0x4E	; 78
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	88 7f       	andi	r24, 0xF8	; 248
    2086:	8c 93       	st	X, r24
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    208e:	af 92       	push	r10
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <timer1DelayMs+0x14>
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <timer1DelayMs+0x16>
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <timer1DelayMs+0x18>
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u16_msCounter = 0;
    20ae:	1c 82       	std	Y+4, r1	; 0x04
    20b0:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    20b2:	8a ef       	ldi	r24, 0xFA	; 250
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	43 e0       	ldi	r20, 0x03	; 3
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	00 e0       	ldi	r16, 0x00	; 0
    20c8:	10 e0       	ldi	r17, 0x00	; 0
    20ca:	ee 24       	eor	r14, r14
    20cc:	ff 24       	eor	r15, r15
    20ce:	cc 24       	eor	r12, r12
    20d0:	dd 24       	eor	r13, r13
    20d2:	aa 24       	eor	r10, r10
    20d4:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <timer1Init>
	timer1Start();
    20d8:	0e 94 23 10 	call	0x2046	; 0x2046 <timer1Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    20dc:	1c 82       	std	Y+4, r1	; 0x04
    20de:	1b 82       	std	Y+3, r1	; 0x03
    20e0:	12 c0       	rjmp	.+36     	; 0x2106 <timer1DelayMs+0x78>
	{
		while(TCNT1 < u16_outputCompare);
    20e2:	ec e4       	ldi	r30, 0x4C	; 76
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	20 81       	ld	r18, Z
    20e8:	31 81       	ldd	r19, Z+1	; 0x01
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	28 17       	cp	r18, r24
    20f0:	39 07       	cpc	r19, r25
    20f2:	b8 f3       	brcs	.-18     	; 0x20e2 <timer1DelayMs+0x54>
		TCNT1 = 0;
    20f4:	ec e4       	ldi	r30, 0x4C	; 76
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	11 82       	std	Z+1, r1	; 0x01
    20fa:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
	timer1Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	01 96       	adiw	r24, 0x01	; 1
    2102:	9c 83       	std	Y+4, r25	; 0x04
    2104:	8b 83       	std	Y+3, r24	; 0x03
    2106:	2b 81       	ldd	r18, Y+3	; 0x03
    2108:	3c 81       	ldd	r19, Y+4	; 0x04
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	28 17       	cp	r18, r24
    2110:	39 07       	cpc	r19, r25
    2112:	38 f3       	brcs	.-50     	; 0x20e2 <timer1DelayMs+0x54>
	{
		while(TCNT1 < u16_outputCompare);
		TCNT1 = 0;
	}
}
    2114:	26 96       	adiw	r28, 0x06	; 6
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	ff 90       	pop	r15
    212a:	ef 90       	pop	r14
    212c:	df 90       	pop	r13
    212e:	cf 90       	pop	r12
    2130:	af 90       	pop	r10
    2132:	08 95       	ret

00002134 <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    2134:	af 92       	push	r10
    2136:	cf 92       	push	r12
    2138:	df 92       	push	r13
    213a:	ef 92       	push	r14
    213c:	ff 92       	push	r15
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	2a 97       	sbiw	r28, 0x0a	; 10
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	6f 83       	std	Y+7, r22	; 0x07
    2158:	78 87       	std	Y+8, r23	; 0x08
    215a:	89 87       	std	Y+9, r24	; 0x09
    215c:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t u32_usCounter = 0;
    215e:	1b 82       	std	Y+3, r1	; 0x03
    2160:	1c 82       	std	Y+4, r1	; 0x04
    2162:	1d 82       	std	Y+5, r1	; 0x05
    2164:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    2166:	80 e1       	ldi	r24, 0x10	; 16
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
    216e:	e9 81       	ldd	r30, Y+1	; 0x01
    2170:	fa 81       	ldd	r31, Y+2	; 0x02
    2172:	88 e0       	ldi	r24, 0x08	; 8
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	70 e0       	ldi	r23, 0x00	; 0
    2178:	41 e0       	ldi	r20, 0x01	; 1
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	8f 01       	movw	r16, r30
    2180:	ee 24       	eor	r14, r14
    2182:	ff 24       	eor	r15, r15
    2184:	cc 24       	eor	r12, r12
    2186:	dd 24       	eor	r13, r13
    2188:	aa 24       	eor	r10, r10
    218a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <timer1Init>
	timer1Start();
    218e:	0e 94 23 10 	call	0x2046	; 0x2046 <timer1Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    2192:	1b 82       	std	Y+3, r1	; 0x03
    2194:	1c 82       	std	Y+4, r1	; 0x04
    2196:	1d 82       	std	Y+5, r1	; 0x05
    2198:	1e 82       	std	Y+6, r1	; 0x06
    219a:	1f c0       	rjmp	.+62     	; 0x21da <timer1DelayUs+0xa6>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
    219c:	e8 e5       	ldi	r30, 0x58	; 88
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	80 71       	andi	r24, 0x10	; 16
    21a8:	90 70       	andi	r25, 0x00	; 0
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	b9 f3       	breq	.-18     	; 0x219c <timer1DelayUs+0x68>
		SET_BIT(TIFR, OCF1A);
    21ae:	a8 e5       	ldi	r26, 0x58	; 88
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e8 e5       	ldi	r30, 0x58	; 88
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	80 61       	ori	r24, 0x10	; 16
    21ba:	8c 93       	st	X, r24
		TCNT1 = 0;
    21bc:	ec e4       	ldi	r30, 0x4C	; 76
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	11 82       	std	Z+1, r1	; 0x01
    21c2:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
	timer1Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	ad 81       	ldd	r26, Y+5	; 0x05
    21ca:	be 81       	ldd	r27, Y+6	; 0x06
    21cc:	01 96       	adiw	r24, 0x01	; 1
    21ce:	a1 1d       	adc	r26, r1
    21d0:	b1 1d       	adc	r27, r1
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	ad 83       	std	Y+5, r26	; 0x05
    21d8:	be 83       	std	Y+6, r27	; 0x06
    21da:	2b 81       	ldd	r18, Y+3	; 0x03
    21dc:	3c 81       	ldd	r19, Y+4	; 0x04
    21de:	4d 81       	ldd	r20, Y+5	; 0x05
    21e0:	5e 81       	ldd	r21, Y+6	; 0x06
    21e2:	8f 81       	ldd	r24, Y+7	; 0x07
    21e4:	98 85       	ldd	r25, Y+8	; 0x08
    21e6:	a9 85       	ldd	r26, Y+9	; 0x09
    21e8:	ba 85       	ldd	r27, Y+10	; 0x0a
    21ea:	28 17       	cp	r18, r24
    21ec:	39 07       	cpc	r19, r25
    21ee:	4a 07       	cpc	r20, r26
    21f0:	5b 07       	cpc	r21, r27
    21f2:	a0 f2       	brcs	.-88     	; 0x219c <timer1DelayUs+0x68>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
		SET_BIT(TIFR, OCF1A);
		TCNT1 = 0;
	}
}
    21f4:	2a 96       	adiw	r28, 0x0a	; 10
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	ff 90       	pop	r15
    220a:	ef 90       	pop	r14
    220c:	df 90       	pop	r13
    220e:	cf 90       	pop	r12
    2210:	af 90       	pop	r10
    2212:	08 95       	ret

00002214 <timer1SwPWM>:

void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    2214:	af 92       	push	r10
    2216:	cf 92       	push	r12
    2218:	df 92       	push	r13
    221a:	ef 92       	push	r14
    221c:	ff 92       	push	r15
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	00 d0       	rcall	.+0      	; 0x2228 <timer1SwPWM+0x14>
    2228:	00 d0       	rcall	.+0      	; 0x222a <timer1SwPWM+0x16>
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	8b 83       	std	Y+3, r24	; 0x03
    2230:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    2232:	78 94       	sei

	if(u8_frequency <= 80)
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	81 35       	cpi	r24, 0x51	; 81
    2238:	e8 f4       	brcc	.+58     	; 0x2274 <timer1SwPWM+0x60>
	{
		u8_prescaler = T0_PRESCALER_64;
    223a:	83 e0       	ldi	r24, 0x03	; 3
    223c:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    223e:	8c 81       	ldd	r24, Y+4	; 0x04
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	a0 e0       	ldi	r26, 0x00	; 0
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	39 e1       	ldi	r19, 0x19	; 25
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsi3>
    2258:	9b 01       	movw	r18, r22
    225a:	ac 01       	movw	r20, r24
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	94 e2       	ldi	r25, 0x24	; 36
    2260:	a4 ef       	ldi	r26, 0xF4	; 244
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodsi4>
    226c:	da 01       	movw	r26, r20
    226e:	c9 01       	movw	r24, r18
    2270:	8a 83       	std	Y+2, r24	; 0x02
    2272:	1c c0       	rjmp	.+56     	; 0x22ac <timer1SwPWM+0x98>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e0       	ldi	r26, 0x00	; 0
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	20 e2       	ldi	r18, 0x20	; 32
    2284:	33 e0       	ldi	r19, 0x03	; 3
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsi3>
    2292:	9b 01       	movw	r18, r22
    2294:	ac 01       	movw	r20, r24
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	94 e2       	ldi	r25, 0x24	; 36
    229a:	a4 ef       	ldi	r26, 0xF4	; 244
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodsi4>
    22a6:	da 01       	movw	r26, r20
    22a8:	c9 01       	movw	r24, r18
    22aa:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, u8_prescaler, 0, u8_outputCompare, 0, 0, T1_INTERRUPT_CMP_1A);
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	e8 2f       	mov	r30, r24
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	88 e0       	ldi	r24, 0x08	; 8
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	49 81       	ldd	r20, Y+1	; 0x01
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	8f 01       	movw	r16, r30
    22c0:	ee 24       	eor	r14, r14
    22c2:	ff 24       	eor	r15, r15
    22c4:	cc 24       	eor	r12, r12
    22c6:	dd 24       	eor	r13, r13
    22c8:	aa 24       	eor	r10, r10
    22ca:	68 94       	set
    22cc:	a4 f8       	bld	r10, 4
    22ce:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <timer1Init>
	timer1Start();
    22d2:	0e 94 23 10 	call	0x2046	; 0x2046 <timer1Start>
}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	ff 90       	pop	r15
    22e8:	ef 90       	pop	r14
    22ea:	df 90       	pop	r13
    22ec:	cf 90       	pop	r12
    22ee:	af 90       	pop	r10
    22f0:	08 95       	ret

000022f2 <Timer1_OVF_setCallBack>:

void Timer1_OVF_setCallBack(void(*local_ptr)(void))
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <Timer1_OVF_setCallBack+0x6>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
	g_T1_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	90 93 7d 00 	sts	0x007D, r25
    2308:	80 93 7c 00 	sts	0x007C, r24
}
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <Timer1_CTC_A_setCallBack>:

void Timer1_CTC_A_setCallBack(void(*local_ptr)(void))
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	00 d0       	rcall	.+0      	; 0x231c <Timer1_CTC_A_setCallBack+0x6>
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
	g_T1_CTC_A_callBackPtr = (volatile void(*)(void))local_ptr;
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	90 93 79 00 	sts	0x0079, r25
    232c:	80 93 78 00 	sts	0x0078, r24
}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <Timer1_CTC_B_setCallBack>:

void Timer1_CTC_B_setCallBack(void(*local_ptr)(void))
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <Timer1_CTC_B_setCallBack+0x6>
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
	g_T1_CTC_B_callBackPtr = (volatile void(*)(void))local_ptr;
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	9a 81       	ldd	r25, Y+2	; 0x02
    234c:	90 93 7b 00 	sts	0x007B, r25
    2350:	80 93 7a 00 	sts	0x007A, r24
}
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <Timer1_ICU_setCallBack>:

void Timer1_ICU_setCallBack(void(*local_ptr)(void))
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	00 d0       	rcall	.+0      	; 0x2364 <Timer1_ICU_setCallBack+0x6>
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01
	g_T1_ICU_callBackPtr = (volatile void(*)(void))local_ptr;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	90 93 77 00 	sts	0x0077, r25
    2374:	80 93 76 00 	sts	0x0076, r24
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <timer2Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC2,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    2382:	cf 92       	push	r12
    2384:	ef 92       	push	r14
    2386:	0f 93       	push	r16
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	27 97       	sbiw	r28, 0x07	; 7
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	6a 83       	std	Y+2, r22	; 0x02
    23a0:	4b 83       	std	Y+3, r20	; 0x03
    23a2:	2c 83       	std	Y+4, r18	; 0x04
    23a4:	0d 83       	std	Y+5, r16	; 0x05
    23a6:	ee 82       	std	Y+6, r14	; 0x06
    23a8:	cf 82       	std	Y+7, r12	; 0x07
	/* Non-PWM mode */
	SET_BIT(TCCR2, FOC2);
    23aa:	a5 e4       	ldi	r26, 0x45	; 69
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e5 e4       	ldi	r30, 0x45	; 69
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	80 68       	ori	r24, 0x80	; 128
    23b6:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR2 = (TCCR2 & 0xB7) | (en_mode);
    23b8:	a5 e4       	ldi	r26, 0x45	; 69
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e5 e4       	ldi	r30, 0x45	; 69
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	98 2f       	mov	r25, r24
    23c4:	97 7b       	andi	r25, 0xB7	; 183
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	89 2b       	or	r24, r25
    23ca:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR2 = (TCCR2 & 0xCF) | (en_OC2);
    23cc:	a5 e4       	ldi	r26, 0x45	; 69
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e5 e4       	ldi	r30, 0x45	; 69
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	98 2f       	mov	r25, r24
    23d8:	9f 7c       	andi	r25, 0xCF	; 207
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	89 2b       	or	r24, r25
    23de:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer2PreScaler = en_prescal;
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	80 93 71 00 	sts	0x0071, r24

	/* Set the timer/counter0 initial value */
	TCNT2 = u8_initialValue;
    23e6:	e4 e4       	ldi	r30, 0x44	; 68
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	8c 81       	ldd	r24, Y+4	; 0x04
    23ec:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR2 = u8_outputCompare;
    23ee:	e3 e4       	ldi	r30, 0x43	; 67
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0x3F) | (en_interruptMask);
    23f6:	a9 e5       	ldi	r26, 0x59	; 89
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e9 e5       	ldi	r30, 0x59	; 89
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	98 2f       	mov	r25, r24
    2402:	9f 73       	andi	r25, 0x3F	; 63
    2404:	8f 81       	ldd	r24, Y+7	; 0x07
    2406:	89 2b       	or	r24, r25
    2408:	8c 93       	st	X, r24
}
    240a:	27 96       	adiw	r28, 0x07	; 7
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	0f 91       	pop	r16
    241c:	ef 90       	pop	r14
    241e:	cf 90       	pop	r12
    2420:	08 95       	ret

00002422 <timer2Set>:

void timer2Set(uint8_t u8_value)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	0f 92       	push	r0
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter2 custom value */
	TCNT2 = u8_value;
    242e:	e4 e4       	ldi	r30, 0x44	; 68
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	80 83       	st	Z, r24
}
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <timer2Read>:

uint8_t timer2Read(void)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT2;
    2446:	e4 e4       	ldi	r30, 0x44	; 68
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
}
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <timer2Start>:

void timer2Start(void)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR2 = (TCCR2 & 0xF8) | (gu8_timer2PreScaler);
    245a:	a5 e4       	ldi	r26, 0x45	; 69
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e5 e4       	ldi	r30, 0x45	; 69
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	98 2f       	mov	r25, r24
    2466:	98 7f       	andi	r25, 0xF8	; 248
    2468:	80 91 71 00 	lds	r24, 0x0071
    246c:	89 2b       	or	r24, r25
    246e:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT2 = 0;
    2470:	e4 e4       	ldi	r30, 0x44	; 68
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	10 82       	st	Z, r1
}
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <timer2Stop>:

void timer2Stop(void)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR2 &= ~((1 << CS20) | (1 << CS21) | (1 << CS22));
    2484:	a5 e4       	ldi	r26, 0x45	; 69
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e5 e4       	ldi	r30, 0x45	; 69
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	88 7f       	andi	r24, 0xF8	; 248
    2490:	8c 93       	st	X, r24
}
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <timer2DelayMs>:

void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    2498:	cf 92       	push	r12
    249a:	ef 92       	push	r14
    249c:	0f 93       	push	r16
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <timer2DelayMs+0xc>
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <timer2DelayMs+0xe>
    24a6:	0f 92       	push	r0
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	9d 83       	std	Y+5, r25	; 0x05
    24ae:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    24b0:	1b 82       	std	Y+3, r1	; 0x03
    24b2:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    24b4:	8a ef       	ldi	r24, 0xFA	; 250
    24b6:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	44 e0       	ldi	r20, 0x04	; 4
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	00 e0       	ldi	r16, 0x00	; 0
    24c2:	ee 24       	eor	r14, r14
    24c4:	cc 24       	eor	r12, r12
    24c6:	0e 94 c1 11 	call	0x2382	; 0x2382 <timer2Init>
	timer2Start();
    24ca:	0e 94 29 12 	call	0x2452	; 0x2452 <timer2Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    24ce:	1b 82       	std	Y+3, r1	; 0x03
    24d0:	1a 82       	std	Y+2, r1	; 0x02
    24d2:	0e c0       	rjmp	.+28     	; 0x24f0 <timer2DelayMs+0x58>
	{
		while(TCNT2 < u8_outputCompare);
    24d4:	e4 e4       	ldi	r30, 0x44	; 68
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	90 81       	ld	r25, Z
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	98 17       	cp	r25, r24
    24de:	d0 f3       	brcs	.-12     	; 0x24d4 <timer2DelayMs+0x3c>
		TCNT2 = 0;
    24e0:	e4 e4       	ldi	r30, 0x44	; 68
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
	timer2Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	9b 83       	std	Y+3, r25	; 0x03
    24ee:	8a 83       	std	Y+2, r24	; 0x02
    24f0:	2a 81       	ldd	r18, Y+2	; 0x02
    24f2:	3b 81       	ldd	r19, Y+3	; 0x03
    24f4:	8c 81       	ldd	r24, Y+4	; 0x04
    24f6:	9d 81       	ldd	r25, Y+5	; 0x05
    24f8:	28 17       	cp	r18, r24
    24fa:	39 07       	cpc	r19, r25
    24fc:	58 f3       	brcs	.-42     	; 0x24d4 <timer2DelayMs+0x3c>
	{
		while(TCNT2 < u8_outputCompare);
		TCNT2 = 0;
	}
}
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	0f 91       	pop	r16
    250e:	ef 90       	pop	r14
    2510:	cf 90       	pop	r12
    2512:	08 95       	ret

00002514 <timer2DelayUs>:

void timer2DelayUs(uint32_t u32_delay_in_us)
{
    2514:	cf 92       	push	r12
    2516:	ef 92       	push	r14
    2518:	0f 93       	push	r16
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	29 97       	sbiw	r28, 0x09	; 9
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	6e 83       	std	Y+6, r22	; 0x06
    2530:	7f 83       	std	Y+7, r23	; 0x07
    2532:	88 87       	std	Y+8, r24	; 0x08
    2534:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    2536:	1a 82       	std	Y+2, r1	; 0x02
    2538:	1b 82       	std	Y+3, r1	; 0x03
    253a:	1c 82       	std	Y+4, r1	; 0x04
    253c:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    253e:	80 e1       	ldi	r24, 0x10	; 16
    2540:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
    2542:	88 e0       	ldi	r24, 0x08	; 8
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	09 81       	ldd	r16, Y+1	; 0x01
    254c:	ee 24       	eor	r14, r14
    254e:	cc 24       	eor	r12, r12
    2550:	0e 94 c1 11 	call	0x2382	; 0x2382 <timer2Init>
	timer2Start();
    2554:	0e 94 29 12 	call	0x2452	; 0x2452 <timer2Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    2558:	1a 82       	std	Y+2, r1	; 0x02
    255a:	1b 82       	std	Y+3, r1	; 0x03
    255c:	1c 82       	std	Y+4, r1	; 0x04
    255e:	1d 82       	std	Y+5, r1	; 0x05
    2560:	1a c0       	rjmp	.+52     	; 0x2596 <timer2DelayUs+0x82>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
    2562:	e8 e5       	ldi	r30, 0x58	; 88
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	88 23       	and	r24, r24
    256a:	dc f7       	brge	.-10     	; 0x2562 <timer2DelayUs+0x4e>
		SET_BIT(TIFR, OCF2);
    256c:	a8 e5       	ldi	r26, 0x58	; 88
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e8 e5       	ldi	r30, 0x58	; 88
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	80 68       	ori	r24, 0x80	; 128
    2578:	8c 93       	st	X, r24
		TCNT2 = 0;
    257a:	e4 e4       	ldi	r30, 0x44	; 68
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
	timer2Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	9b 81       	ldd	r25, Y+3	; 0x03
    2584:	ac 81       	ldd	r26, Y+4	; 0x04
    2586:	bd 81       	ldd	r27, Y+5	; 0x05
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	a1 1d       	adc	r26, r1
    258c:	b1 1d       	adc	r27, r1
    258e:	8a 83       	std	Y+2, r24	; 0x02
    2590:	9b 83       	std	Y+3, r25	; 0x03
    2592:	ac 83       	std	Y+4, r26	; 0x04
    2594:	bd 83       	std	Y+5, r27	; 0x05
    2596:	2a 81       	ldd	r18, Y+2	; 0x02
    2598:	3b 81       	ldd	r19, Y+3	; 0x03
    259a:	4c 81       	ldd	r20, Y+4	; 0x04
    259c:	5d 81       	ldd	r21, Y+5	; 0x05
    259e:	8e 81       	ldd	r24, Y+6	; 0x06
    25a0:	9f 81       	ldd	r25, Y+7	; 0x07
    25a2:	a8 85       	ldd	r26, Y+8	; 0x08
    25a4:	b9 85       	ldd	r27, Y+9	; 0x09
    25a6:	28 17       	cp	r18, r24
    25a8:	39 07       	cpc	r19, r25
    25aa:	4a 07       	cpc	r20, r26
    25ac:	5b 07       	cpc	r21, r27
    25ae:	c8 f2       	brcs	.-78     	; 0x2562 <timer2DelayUs+0x4e>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
		SET_BIT(TIFR, OCF2);
		TCNT2 = 0;
	}
}
    25b0:	29 96       	adiw	r28, 0x09	; 9
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	0f 91       	pop	r16
    25c2:	ef 90       	pop	r14
    25c4:	cf 90       	pop	r12
    25c6:	08 95       	ret

000025c8 <timer2SwPWM>:

void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    25c8:	cf 92       	push	r12
    25ca:	ef 92       	push	r14
    25cc:	0f 93       	push	r16
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <timer2SwPWM+0xc>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <timer2SwPWM+0xe>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	8b 83       	std	Y+3, r24	; 0x03
    25dc:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    25de:	78 94       	sei

	if(u8_frequency <= 80)
    25e0:	8c 81       	ldd	r24, Y+4	; 0x04
    25e2:	81 35       	cpi	r24, 0x51	; 81
    25e4:	e8 f4       	brcc	.+58     	; 0x2620 <timer2SwPWM+0x58>
	{
		u8_prescaler = T0_PRESCALER_64;
    25e6:	83 e0       	ldi	r24, 0x03	; 3
    25e8:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    25ea:	8c 81       	ldd	r24, Y+4	; 0x04
    25ec:	88 2f       	mov	r24, r24
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	a0 e0       	ldi	r26, 0x00	; 0
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	39 e1       	ldi	r19, 0x19	; 25
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsi3>
    2604:	9b 01       	movw	r18, r22
    2606:	ac 01       	movw	r20, r24
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	94 e2       	ldi	r25, 0x24	; 36
    260c:	a4 ef       	ldi	r26, 0xF4	; 244
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	bc 01       	movw	r22, r24
    2612:	cd 01       	movw	r24, r26
    2614:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodsi4>
    2618:	da 01       	movw	r26, r20
    261a:	c9 01       	movw	r24, r18
    261c:	8a 83       	std	Y+2, r24	; 0x02
    261e:	1c c0       	rjmp	.+56     	; 0x2658 <timer2SwPWM+0x90>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    2624:	8c 81       	ldd	r24, Y+4	; 0x04
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	20 e2       	ldi	r18, 0x20	; 32
    2630:	33 e0       	ldi	r19, 0x03	; 3
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsi3>
    263e:	9b 01       	movw	r18, r22
    2640:	ac 01       	movw	r20, r24
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	94 e2       	ldi	r25, 0x24	; 36
    2646:	a4 ef       	ldi	r26, 0xF4	; 244
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodsi4>
    2652:	da 01       	movw	r26, r20
    2654:	c9 01       	movw	r24, r18
    2656:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, u8_prescaler, 0, u8_outputCompare, 0, T2_INTERRUPT_CMP);
    2658:	88 e0       	ldi	r24, 0x08	; 8
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	49 81       	ldd	r20, Y+1	; 0x01
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	0a 81       	ldd	r16, Y+2	; 0x02
    2662:	ee 24       	eor	r14, r14
    2664:	0f 2e       	mov	r0, r31
    2666:	f0 e8       	ldi	r31, 0x80	; 128
    2668:	cf 2e       	mov	r12, r31
    266a:	f0 2d       	mov	r31, r0
    266c:	0e 94 c1 11 	call	0x2382	; 0x2382 <timer2Init>
	timer2Start();
    2670:	0e 94 29 12 	call	0x2452	; 0x2452 <timer2Start>
}
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	0f 91       	pop	r16
    2682:	ef 90       	pop	r14
    2684:	cf 90       	pop	r12
    2686:	08 95       	ret

00002688 <Timer2_OVF_setCallBack>:

void Timer2_OVF_setCallBack(void(*local_ptr)(void))
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <Timer2_OVF_setCallBack+0x6>
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
	g_T2_OVF_callBackPtr = (volatile void(*)(void))local_ptr;
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	90 93 81 00 	sts	0x0081, r25
    269e:	80 93 80 00 	sts	0x0080, r24
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <Timer2_CTC_setCallBack>:

void Timer2_CTC_setCallBack(void(*local_ptr)(void))
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <Timer2_CTC_setCallBack+0x6>
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	9a 83       	std	Y+2, r25	; 0x02
    26b8:	89 83       	std	Y+1, r24	; 0x01
	g_T2_CTC_callBackPtr = (volatile void(*)(void))local_ptr;
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	90 93 7f 00 	sts	0x007F, r25
    26c2:	80 93 7e 00 	sts	0x007E, r24
}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <__mulsi3>:
    26d0:	62 9f       	mul	r22, r18
    26d2:	d0 01       	movw	r26, r0
    26d4:	73 9f       	mul	r23, r19
    26d6:	f0 01       	movw	r30, r0
    26d8:	82 9f       	mul	r24, r18
    26da:	e0 0d       	add	r30, r0
    26dc:	f1 1d       	adc	r31, r1
    26de:	64 9f       	mul	r22, r20
    26e0:	e0 0d       	add	r30, r0
    26e2:	f1 1d       	adc	r31, r1
    26e4:	92 9f       	mul	r25, r18
    26e6:	f0 0d       	add	r31, r0
    26e8:	83 9f       	mul	r24, r19
    26ea:	f0 0d       	add	r31, r0
    26ec:	74 9f       	mul	r23, r20
    26ee:	f0 0d       	add	r31, r0
    26f0:	65 9f       	mul	r22, r21
    26f2:	f0 0d       	add	r31, r0
    26f4:	99 27       	eor	r25, r25
    26f6:	72 9f       	mul	r23, r18
    26f8:	b0 0d       	add	r27, r0
    26fa:	e1 1d       	adc	r30, r1
    26fc:	f9 1f       	adc	r31, r25
    26fe:	63 9f       	mul	r22, r19
    2700:	b0 0d       	add	r27, r0
    2702:	e1 1d       	adc	r30, r1
    2704:	f9 1f       	adc	r31, r25
    2706:	bd 01       	movw	r22, r26
    2708:	cf 01       	movw	r24, r30
    270a:	11 24       	eor	r1, r1
    270c:	08 95       	ret

0000270e <__udivmodqi4>:
    270e:	99 1b       	sub	r25, r25
    2710:	79 e0       	ldi	r23, 0x09	; 9
    2712:	04 c0       	rjmp	.+8      	; 0x271c <__udivmodqi4_ep>

00002714 <__udivmodqi4_loop>:
    2714:	99 1f       	adc	r25, r25
    2716:	96 17       	cp	r25, r22
    2718:	08 f0       	brcs	.+2      	; 0x271c <__udivmodqi4_ep>
    271a:	96 1b       	sub	r25, r22

0000271c <__udivmodqi4_ep>:
    271c:	88 1f       	adc	r24, r24
    271e:	7a 95       	dec	r23
    2720:	c9 f7       	brne	.-14     	; 0x2714 <__udivmodqi4_loop>
    2722:	80 95       	com	r24
    2724:	08 95       	ret

00002726 <__udivmodhi4>:
    2726:	aa 1b       	sub	r26, r26
    2728:	bb 1b       	sub	r27, r27
    272a:	51 e1       	ldi	r21, 0x11	; 17
    272c:	07 c0       	rjmp	.+14     	; 0x273c <__udivmodhi4_ep>

0000272e <__udivmodhi4_loop>:
    272e:	aa 1f       	adc	r26, r26
    2730:	bb 1f       	adc	r27, r27
    2732:	a6 17       	cp	r26, r22
    2734:	b7 07       	cpc	r27, r23
    2736:	10 f0       	brcs	.+4      	; 0x273c <__udivmodhi4_ep>
    2738:	a6 1b       	sub	r26, r22
    273a:	b7 0b       	sbc	r27, r23

0000273c <__udivmodhi4_ep>:
    273c:	88 1f       	adc	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	5a 95       	dec	r21
    2742:	a9 f7       	brne	.-22     	; 0x272e <__udivmodhi4_loop>
    2744:	80 95       	com	r24
    2746:	90 95       	com	r25
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	08 95       	ret

0000274e <__udivmodsi4>:
    274e:	a1 e2       	ldi	r26, 0x21	; 33
    2750:	1a 2e       	mov	r1, r26
    2752:	aa 1b       	sub	r26, r26
    2754:	bb 1b       	sub	r27, r27
    2756:	fd 01       	movw	r30, r26
    2758:	0d c0       	rjmp	.+26     	; 0x2774 <__udivmodsi4_ep>

0000275a <__udivmodsi4_loop>:
    275a:	aa 1f       	adc	r26, r26
    275c:	bb 1f       	adc	r27, r27
    275e:	ee 1f       	adc	r30, r30
    2760:	ff 1f       	adc	r31, r31
    2762:	a2 17       	cp	r26, r18
    2764:	b3 07       	cpc	r27, r19
    2766:	e4 07       	cpc	r30, r20
    2768:	f5 07       	cpc	r31, r21
    276a:	20 f0       	brcs	.+8      	; 0x2774 <__udivmodsi4_ep>
    276c:	a2 1b       	sub	r26, r18
    276e:	b3 0b       	sbc	r27, r19
    2770:	e4 0b       	sbc	r30, r20
    2772:	f5 0b       	sbc	r31, r21

00002774 <__udivmodsi4_ep>:
    2774:	66 1f       	adc	r22, r22
    2776:	77 1f       	adc	r23, r23
    2778:	88 1f       	adc	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	1a 94       	dec	r1
    277e:	69 f7       	brne	.-38     	; 0x275a <__udivmodsi4_loop>
    2780:	60 95       	com	r22
    2782:	70 95       	com	r23
    2784:	80 95       	com	r24
    2786:	90 95       	com	r25
    2788:	9b 01       	movw	r18, r22
    278a:	ac 01       	movw	r20, r24
    278c:	bd 01       	movw	r22, r26
    278e:	cf 01       	movw	r24, r30
    2790:	08 95       	ret

00002792 <_exit>:
    2792:	f8 94       	cli

00002794 <__stop_program>:
    2794:	ff cf       	rjmp	.-2      	; 0x2794 <__stop_program>
